---------------------------------------
app-routing.module.ts
************
import { NgModule } from '@angular/core';
import { PreloadAllModules, RouterModule, Routes } from '@angular/router';
import { NotFoundComponent } from './not-found/not-found.component';
import { AuthGuard } from './core/guards/auth.guard';

const routes: Routes = [
  {
    path: '',
    loadChildren: () => import('./auth/auth.module').then((m) => m.AuthModule),
  },
  {
    path: 'app',
    canActivate: [ AuthGuard ],
    loadChildren: () => import('./layout/layout.module').then((m) => m.LayoutModule),
  },
  {
    path: '**',
    component: NotFoundComponent,
    title: 'error'
  },
];

@NgModule({
  imports: [RouterModule.forRoot(routes, {
    preloadingStrategy: PreloadAllModules
  } )],
  exports: [RouterModule]
})
export class AppRoutingModule { }

---------------------------------------
app.component.html
************
<div [ngClass]="{'dark': templateColor === 'dark'}">
  <div class="h-screen w-full dark:bg-gray-300 bg-blue-200">
    <router-outlet></router-outlet>
  </div>
</div>





---------------------------------------
app.component.scss
************

---------------------------------------
app.component.spec.ts
************
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [
        RouterTestingModule
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'basic-spa-framework'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('basic-spa-framework');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('basic-spa-framework app is running!');
  });
});

---------------------------------------
app.component.ts
************
import { Component } from '@angular/core';
import { environment } from 'src/environments/environment';
import { TemplateColor } from './core/models/template-color';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent {
  title = 'basic-spa-framework';
  templateColor : TemplateColor =  environment.templateColor as TemplateColor;
}

---------------------------------------
app.module.ts
************
import { RenewTokenServiceMock } from './core/services/renew-token.service.mock';
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { OverlayModule } from '@angular/cdk/overlay'
import { environment } from 'src/environments/environment';
import { AuthServiceMock } from './core/services/auth.service.mock';
import { AuthService } from './core/services/auth.service';
import { RenewTokenService } from './core/services/renew-token.service';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { TokenInterceptor } from './core/Interceptor/token-interceptor';
import { HashLocationStrategy, LocationStrategy } from '@angular/common';

@NgModule({
  declarations: [
    AppComponent,
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    OverlayModule,
    BrowserAnimationsModule,
    HttpClientModule
  ],
  providers: [
    { provide: 'API_URL', useValue: environment.API_URL },
    { provide: AuthService, useClass: AuthService },  //TODO: comment to remove mock
    { provide: RenewTokenService, useClass: RenewTokenService }, //TODO: comment to remove mock
    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },
    { provide: LocationStrategy, useClass: HashLocationStrategy },
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

---------------------------------------
auth-routing.module.ts
************
import { PasswordRecoveryComponent } from './pages/password-recovery/password-recovery.component';
import { RegisterComponent } from './pages/register/register.component';
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './pages/login/login.component';

const routes: Routes = [
  {
    path: '',
    redirectTo: 'login',
    pathMatch: 'full'
  },
  {
    path: 'login',
    component: LoginComponent,
    title: 'Login'
  },
  {
    path: 'register',
    component: RegisterComponent,
    title: 'register'
  },
  {
    path: 'recovery',
    component: PasswordRecoveryComponent,
    title: 'recovery'
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AuthRoutingModule { }

---------------------------------------
auth.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { AuthRoutingModule } from './auth-routing.module';
import { LoginComponent } from './pages/login/login.component';
import { RegisterComponent } from './pages/register/register.component';
import { PasswordRecoveryComponent } from './pages/password-recovery/password-recovery.component';
import { LoginFormComponent } from './components/login-form/login-form.component';
import { RegisterFormComponent } from './components/register-form/register-form.component';
import { PasswordRecoveryFormComponent } from './components/password-recovery-form/password-recovery-form.component';
import { ReactiveFormsModule } from '@angular/forms';


@NgModule({
  declarations: [
    LoginComponent,
    RegisterComponent,
    PasswordRecoveryComponent,
    LoginFormComponent,
    RegisterFormComponent,
    PasswordRecoveryFormComponent
  ],
  imports: [
    CommonModule,
    AuthRoutingModule,
    ReactiveFormsModule,
  ]
})
export class AuthModule { }

---------------------------------------
login-form.component.html
************
<form [formGroup]="form" class="space-y-6" (ngSubmit)="Login()">
  <h5 class="text-xl font-medium text-gray-900 dark:text-white">Ingreso a la plataforma</h5>
  <div>
      <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Correo:</label>
      <input type="email" name="user" formControlName="user" id="email" class="text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" placeholder="nombre@compania.com" required>
  </div>
  <div>
      <label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Contraseña:</label>
      <input type="password" name="password" formControlName="password" id="password" placeholder="••••••••" class="text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white" required>
  </div>
  <!-- <div class="flex items-start">
      <div class="flex items-start">
          <div class="flex items-center h-5">
              <input id="remember" type="checkbox" value="" class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800" required>
          </div>
          <label for="remember" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">Remember me</label>
      </div>
      <a routerLink="/recovery" class="ml-auto text-sm text-blue-700 hover:underline dark:text-blue-500">Lost Password?</a>
  </div> -->
  <button type="submit" class="w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Entrar</button>
  <!-- <div class="text-sm font-medium text-gray-500 dark:text-gray-300">
      Not registered? <a routerLink="/register" class="text-blue-700 hover:underline dark:text-blue-500">Create account</a>
  </div> -->
</form>

---------------------------------------
login-form.component.scss
************

---------------------------------------
login-form.component.ts
************
import { AuthService } from './../../../core/services/auth.service';
import { Component, EventEmitter, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login-form',
  templateUrl: './login-form.component.html',
  styleUrls: ['./login-form.component.scss']
})
export class LoginFormComponent {

  form:FormGroup;
  @Output() login= new EventEmitter();

  constructor( private formbuilder:FormBuilder ){
    this.BuildForm();
  }

  private BuildForm(){
    this.form = this.formbuilder.group({
      user:['', [Validators.required]],
      password:['', [Validators.required]],
    })
  }

  Login()
  {
    this.login.emit(this.form.value);
  }
}

---------------------------------------
password-recovery-form.component.html
************

<form>
  <div class="mb-6">
    <label for="email" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your email</label>
    <input type="email" id="email" class="shadow-sm text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light" placeholder="name@flowbite.com" required>
  </div>
  <div class="mb-6">
    <label for="password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Your password</label>
    <input type="password" id="password" class="shadow-sm text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light" required>
  </div>
  <div class="mb-6">
    <label for="repeat-password" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Repeat password</label>
    <input type="password" id="repeat-password" class="shadow-sm text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 dark:shadow-sm-light" required>
  </div>
  <div class="flex items-start mb-6">
    <div class="flex items-center h-5">
      <input id="terms" type="checkbox" value="" class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800" required>
    </div>
    <label for="terms" class="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">I agree with the <a href="#" class="text-blue-600 hover:underline dark:text-blue-500">terms and conditions</a></label>
  </div>
  <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Register new account</button>
</form>


---------------------------------------
password-recovery-form.component.scss
************

---------------------------------------
password-recovery-form.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-password-recovery-form',
  templateUrl: './password-recovery-form.component.html',
  styleUrls: ['./password-recovery-form.component.scss']
})
export class PasswordRecoveryFormComponent {

}

---------------------------------------
register-form.component.html
************

<form>
  <div class="relative z-0 w-full mb-6 group">
      <input type="email" name="floating_email" id="floating_email" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " required />
      <label for="floating_email" class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 - origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Email address</label>
  </div>
  <div class="relative z-0 w-full mb-6 group">
      <input type="password" name="floating_password" id="floating_password" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " required />
      <label for="floating_password" class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 - origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Password</label>
  </div>
  <div class="relative z-0 w-full mb-6 group">
      <input type="password" name="repeat_password" id="floating_repeat_password" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " required />
      <label for="floating_repeat_password" class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 - origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Confirm password</label>
  </div>
  <div class="grid md:grid-cols-2 md:gap-6">
    <div class="relative z-0 w-full mb-6 group">
        <input type="text" name="floating_first_name" id="floating_first_name" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " required />
        <label for="floating_first_name" class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 - origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">First name</label>
    </div>
    <div class="relative z-0 w-full mb-6 group">
        <input type="text" name="floating_last_name" id="floating_last_name" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " required />
        <label for="floating_last_name" class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 - origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Last name</label>
    </div>
  </div>
  <div class="grid md:grid-cols-2 md:gap-6">
    <div class="relative z-0 w-full mb-6 group">
        <input type="tel" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" name="floating_phone" id="floating_phone" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " required />
        <label for="floating_phone" class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 - origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Phone number (123-456-7890)</label>
    </div>
    <div class="relative z-0 w-full mb-6 group">
        <input type="text" name="floating_company" id="floating_company" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " required />
        <label for="floating_company" class="peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 - origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6">Company (Ex. Google)</label>
    </div>
  </div>
  <button type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Submit</button>
</form>


---------------------------------------
register-form.component.scss
************

---------------------------------------
register-form.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-register-form',
  templateUrl: './register-form.component.html',
  styleUrls: ['./register-form.component.scss']
})
export class RegisterFormComponent {

}

---------------------------------------
login.component.html
************

  <div class="w-full flex items-center justify-center h-screen">
    <div class="w-full max-w-sm p-4 bg-white border border-gray-200 rounded-lg shadow sm:p-6 md:p-8 dark:bg-gray-800 dark:border-gray-700">
      <app-login-form
      (login)="Login($event)"></app-login-form>
    </div>
  </div>


---------------------------------------
login.component.scss
************

---------------------------------------
login.component.ts
************
import { TokenService } from 'src/app/core/services/token.service';
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/core/services/auth.service';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent {

  constructor( private userService: AuthService,
    private router: Router){

  }

  Login(data)
  {
    this.userService.Login(data.user, data.password).subscribe({
      next:(result) => {
        this.router.navigate(['/app/']);
      },
      error: () => {
        console.log("Error")
      }
    });
  }

}

---------------------------------------
password-recovery.component.html
************
<div class="w-full flex items-center justify-center h-screen">
  <div class="w-full max-w-sm p-4 bg-white border border-gray-200 rounded-lg shadow sm:p-6 md:p-8 dark:bg-gray-800 dark:border-gray-700">
      <app-password-recovery-form></app-password-recovery-form>
  </div>
</div>



---------------------------------------
password-recovery.component.scss
************

---------------------------------------
password-recovery.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-password-recovery',
  templateUrl: './password-recovery.component.html',
  styleUrls: ['./password-recovery.component.scss']
})
export class PasswordRecoveryComponent {

}

---------------------------------------
register.component.html
************
<div class="w-full flex items-center justify-center h-screen">
  <div class="w-full max-w-sm p-4 bg-white border border-gray-200 rounded-lg shadow sm:p-6 md:p-8 dark:bg-gray-800 dark:border-gray-700">
      <app-register-form></app-register-form>
  </div>
</div>

---------------------------------------
register.component.scss
************

---------------------------------------
register.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent {

}

---------------------------------------
number-input.directive.ts
************
import { Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';

@Directive({
  selector: '[appNumberInput]'
})
export class NumberInputDirective {

  
  constructor(private el: ElementRef, private renderer: Renderer2 ) {}
  
  ngOnInit() {
    // Aplicar estilos CSS aquí
    this.renderer.setStyle(this.el.nativeElement, 'text-align', 'right');
    // También puedes agregar clases CSS
    this.renderer.addClass(this.el.nativeElement, 'tu-clase-css');
  }


  @HostListener('input', ['$event'])
  onInput(event: any): void {

    const inputValue = event.target.value;
    let formattedValue = inputValue.replace(/[^0-9.]/g, ''); // Permite solo números y un punto
    const decimalCount = (formattedValue.match(/\./g) || []).length; // Contar la cantidad de puntos
    if (decimalCount > 1) {
      const parts = formattedValue.split('.');
      formattedValue = parts[0] + '.' + parts.slice(1).join(''); // Elimina puntos adicionales
    }
    this.el.nativeElement.value = formattedValue;
  }

  @HostListener('keydown', ['$event'])
  onKeyDown(event: KeyboardEvent): void {
    if (event.key === '.' && this.el.nativeElement.value.includes('.')) {
      event.preventDefault(); // Evitar la entrada de más de un punto
    }
  }
}

---------------------------------------
auth.guard.ts
************
import { PermisosDto } from './../models/permisos-dto';
import { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';

import { Injectable } from '@angular/core';
import { TokenService } from '../services/token.service';
import { Observable, map, catchError, of } from 'rxjs';



@Injectable({ providedIn: 'root' })
export class AuthGuard {
  constructor(private tokenService: TokenService,
    private router: Router) { }

  permisos: PermisosDto[]
  home: string = "home";

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {
    const isValidToken = this.tokenService.isValidToken();
    const rutaEnMinuscula = state.url.toLowerCase();

    if (isValidToken) {
      // Agrega la validación de permisos aquí

      if(rutaEnMinuscula.includes(this.home))
        return of(true);

      const modifiedUrl = state.url.replace('/app/', '');
      console.log("url"+modifiedUrl)
      const tienePermiso = this.validarPermisos(modifiedUrl);
    
     
      if (!tienePermiso) {
        console.log("No tienes permisos para acceder a esta ruta.");
        alert("No tienes permisos para ver esta página");
        this.router.navigate(['/app/home']);
        // Aquí puedes decidir si quieres redirigir a otra página, por ejemplo, una página de "Acceso denegado"
        return of(false);
      }

      return of(true);
    } else {
      if (this.tokenService.isValidRefreshToken()) {
        // Intenta renovar el token si es posible
        return this.tokenService.refreshToken().pipe(
          map(response => {
            // Si la renovación es exitosa, entonces el guard permite la navegación
            return true;
          }),
          catchError(err => {
            // Si hay un error (por ejemplo, el token de actualización también es inválido), redirige al usuario al login
            console.log("Error al intentar renovar token.")
            this.router.navigate(['/login/']);
            return of(false);
          })
        );
      } else {
        // Si el token de actualización es inválido, redirige al usuario al login
        this.router.navigate(['/login/']);
        return of(false);
      }
    }
  }

  validarPermisos(ruta: string): boolean {
    const permisos = this.tokenService.getPermisos();
    console.log("permisos"+ permisos)
    // Convertir la ruta a minúsculas para evitar problemas de mayúsculas/minúsculas.
    const rutaEnMinuscula = ruta.toLowerCase();
   /* permisos.forEach(permiso => {
    
    
    });*/
    // Buscar la ruta en el arreglo de permisos. Si la encuentra, devuelve true; de lo contrario, devuelve false.
    return permisos.some(permiso => rutaEnMinuscula.includes(permiso.module.toLowerCase()) && permiso.listed);
    //return true;
  }

}




---------------------------------------
token-interceptor.ts
************
import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HttpContextToken,
  HttpContext,
} from '@angular/common/http';
import { Observable, switchMap } from 'rxjs';
import { TokenService } from '../services/token.service';



const CHECK_TOKEN = new HttpContextToken<boolean>(() => false);

export function checkToken() {
  return new HttpContext().set(CHECK_TOKEN, true);
}

@Injectable()
export class TokenInterceptor implements HttpInterceptor {

  constructor(
    private tokenService: TokenService
  ) {}

  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {
    
    if (request.context.get(CHECK_TOKEN)) {
      const isValidToken = this.tokenService.isValidToken(); // accessToken
      if (isValidToken) {
        return this.addToken(request, next);
      } else {
        return this.updateAccessTokenAndRefreshToken(request, next);
      }
    }
    return next.handle(request);
  }

  private addToken(request: HttpRequest<unknown>, next: HttpHandler) {
    const accessToken = this.tokenService.getToken();

    if (accessToken) {
      const authRequest = request.clone({
        headers: request.headers.set('Authorization', `Bearer ${accessToken}`)
      });

      return next.handle(authRequest);
    }
    return next.handle(request);
  }

  private updateAccessTokenAndRefreshToken(request: HttpRequest<unknown>, next: HttpHandler) {
    const isValidRefreshToken = this.tokenService.isValidRefreshToken();

    if (isValidRefreshToken) {
      return this.tokenService.refreshToken()
      .pipe(
        switchMap(() => this.addToken(request, next)),
      )
    }
    return next.handle(request);
  }
}

---------------------------------------
actividadessilviculturales-dto.model.ts
************
import { BaseDto } from "./base-dto";

export class ActividadesSilviculturalesDto extends BaseDto {    
    idCensoArboreo: string;
    podaRealceR : boolean;
    podaEstabilidadE : boolean;
    podaMantenimientoM : boolean;

    cortesNuevos : boolean;
    cortesViejos : boolean;
    cortesEnfermos : boolean;
    podaRaices : boolean;
    estructurasCercanasTipoEmplazamiento : string;


    limpieza : string;


    podaSanitaria : string;



    inmediataI : boolean;
    cortoPlazoC : boolean;
    largoPlazoL : boolean;
    trasplante : boolean;
    observacion : string;
    estado : Estado;

    //SIEMBRA
    numeroArbolCampo: string;
    responsable : string;
    //PODAS
    actor: string;
    operador: string;
    nuevaIntervencion: Date;
    podaCorreccion: boolean;
    podaFormacion: boolean;

    //TALAS
    numAutorizationCdmb: string;
    usoDeMadera: string;
    expedicionPermiso: Date;

    //Fotos
    fotoAntes: string;
    fotoDuranteUno: string;
    fotoDuranteDos: string;
    fotoDespues: string;

    //typo
    isSiembra: boolean;
    isPoda: boolean;    
    isTala: boolean;
  }

  export enum Estado {
    Solicitada = "Solicitada",
    Aprobada = "Aprobada", 
    Rechazada = "Rechazada",
    Ejecutada = "Ejecutada"
  }
  

  export class ActividadesSilviculturalesEstadoDto {
    id: string;
    estado : string;
    observacion : string;
  } 
---------------------------------------
api-response.ts
************
export class CustomApiResponse<T> {
    constructor(public data: T, public meta: Metadata) {}
  }

  export class Metadata {
    constructor(
      public totalCount: number,
      public pageSize: number,
      public currentPage: number,
      public totalPages: number,
      public hasNextPage: boolean,
      public hasPreviousPage: boolean,
      public nextPageUrl: string,
      public previousPageUrl: string
    ) {}
  }

---------------------------------------
auth-user.model.ts
************
export interface AuthUser {
  id: string;
  name: string;
  email: string;
  avatar: string;
  authToken: string;
  refreshToken: string;
}

---------------------------------------
auth.model.ts
************
import { PermisosDto } from "./permisos-dto";

export interface ResponseLogin {
  authToken: string;
  refreshToken: string;
  userId: number;
  userName: string;
  permisos:PermisosDto[];
}

---------------------------------------
base-dto.ts
************
export class BaseDto {
  id: string | null; // Guids son representados como strings en JS/TS
}

---------------------------------------
censoarboreo-dto.model.ts
************
import { BaseDto } from "./base-dto";

export class CensoArboreoDto extends BaseDto{

  numeroIndividuoId: number;
  alturaTotal: number;
  alturaComercial: number;
  cuadrilla: string;
  formaCopa: string;
  diametroCopa: number;
  alturaCopa: number;
  observacionCopa: string;
  dap: number;
  dap2: number;
  dap3: number;
  dap4: number;
  ndaptotal: number;
  daptotal: number;
  numeroFustes: number;
  nombreComun: string;
  nombreCientifico: string;
  orden: string;
  familia: string;
  genero: string;
  especie: string;
  altitudASNM: number;
  estadoFitosanitario: string;
  estadoMadurez: string;
  tipoIndividuoForestal: string;
  departamento: string;
  ciudad: string;
  tipoAglomeracion: string;
  barrio: string;
  comuna: string;
  tipoEmplazamiento: string;
  observacionTipoEmplazamiento: string;
  infraestructuraAfectada: string;
  observacionInfraestructuraAfectada: string;
  apendiceCites: boolean;
  categoriaUicn: boolean;
  clasificacionId:string;
  categoriaMinisterioResolucion01922014: boolean;
  especieEndemica: boolean;
  origen: string;
  observacion: string;
  fecha: Date;
  recomendacionesParaManejoSilvicultural: string;

  coordenada: CoordenadaDto;
  fotos: RegistroFotograficoCensoDto[];

  isGuadua : boolean;

  constructor(){
    super();
    this.coordenada = new CoordenadaDto();
    this.fotos = new Array<RegistroFotograficoCensoDto>();
  }
}


export class CoordenadaDto extends BaseDto {
  latitud: number;
  longitud: number;
  altitud: string;
  norte: string;
  este: string;
}


export class RegistroFotograficoBaseDto extends BaseDto {

  url: string;
  nombre: string;
  censoArboreoId: string;

}

export class RegistroFotograficoCensoDto extends RegistroFotograficoBaseDto {

}

export class RegistroFotograficoEspacioDto extends RegistroFotograficoBaseDto {

}

---------------------------------------
clasificacion.model.ts
************
import { EspecieDto } from "./especie.model";
import { FamiliaDto } from "./familia.model";
import { GeneroDto } from "./genero.model";
import { OrdenDto } from "./orden.model";

export interface ClasificacionDto {
  id: string; // Guid en C# se traduce generalmente como string en TypeScript
  ordenId?: string;
  orden?: OrdenDto;
  familiaId?: string;
  familia?: FamiliaDto;
  generoId?: string;
  genero?: GeneroDto;
  especieId?: string;
  especie?: EspecieDto;
  nombreCientifico: string;
  nombreComun: string;
  etiqueta: string;
}

---------------------------------------
colors.model.ts
************
export type Colors = 'sky' | 'yellow' | 'green' | 'red' | 'violet' | 'gray' | 'success' | 'primary' | 'danger' | 'light';

export type ObjColors = Record<string, Record<string, boolean>>;

export const COLORS: ObjColors = {
  success: {
    'bg-green-700': true,
    'hover:bg-green-800': true,
    'focus:ring-green-300': true,
    'text-white': true,
  },
  primary: {
    'bg-blue-700': true,
    'hover:bg-blue-800': true,
    'focus:bg-blue-400': true,
    'text-white': true,
  },
  danger: {
    'bg-red-700': true,
    'hover:bg-red-800': true,
    'focus:ring-red-300': true,
    'text-white': true,
  },
  light: {
    'bg-gray-200': true,
    'hover:bg-gray-500': true,
    'focus:ring-gray-50': true,
    'text-gray-700': true,
  },
  sky: {
    'bg-sky-700': true,
    'hover:bg-sky-800': true,
    'focus:ring-sky-300': true,
    'text-white': true,
  },
  yellow: {
    'bg-yellow-700': true,
    'hover:bg-yellow-800': true,
    'text-white': true,
  },
  green: {
    'bg-green-700': true,
    'hover:bg-green-800': true,
    'text-white': true,
  },
  red: {
    'bg-red-700': true,
    'hover:bg-red-800': true,
    'text-white': true,
  },
  violet: {
    'bg-violet-700': true,
    'hover:bg-violet-800': true,
    'text-white': true,
  },
  gray: {
    'bg-gray-700': true,
    'hover:bg-gray-800': true,
    'text-white': true,
  },
}

export const BACKGROUNDS: ObjColors = {
  success: {
    'bg-green-600': true,
  },
  primary: {
    'bg-blue-600': true,
  },
  danger: {
    'bg-red-600': true,
  },
  light: {
    'bg-gray-600': true,
  },
  sky: {
    'bg-sky-600': true,
  },
  yellow: {
    'bg-yellow-600': true,
  },
  green: {
    'bg-green-600': true,
  },
  red: {
    'bg-red-600': true,
  },
  violet: {
    'bg-violet-400': true,
  },
  gray: {
    'bg-gray-600': true,
  },
}

export const NAVBAR_BACKGROUNDS: ObjColors = {
  success: {
    'bg-green-700': true,
  },
  primary: {
    'bg-blue-700': true,
  },
  danger: {
    'bg-red-700': true,
  },
  light: {
    'bg-gray-700': true,
  },
  sky: {
    'bg-sky-700': true,
  },
  yellow: {
    'bg-yellow-700': true,
  },
  green: {
    'bg-green-700': true,
  },
  red: {
    'bg-red-700': true,
  },
  violet: {
    'bg-violet-700': true,
  },
  gray: {
    'bg-gray-700': true,
  },
}

---------------------------------------
cross-actividades-silviculturales-dto.model.ts
************
import { BaseDto } from "./base-dto";

export class CrossActividadesSilviculturalesDto {

  censoArboreoId: string;
  numeroIndividuoId: string;
  numeroArbolCampo: string;
  
}

---------------------------------------
detalle-dto.model.ts
************
import { BaseDto } from "./base-dto";

export class DetalleDto extends BaseDto {  
  maestraId :string;
  nombre :string;
  descripcion:string;
  codigo:string;
  constructor(label? : string) {
    super();
    if (label) {
      this.codigo = label;
      this.nombre = label;
    }
  }
}

---------------------------------------
espaciospotenciales-dto.model.ts
************
import { BaseDto } from "./base-dto";
import { CoordenadaDto, RegistroFotograficoEspacioDto} from "./censoarboreo-dto.model";

export class EspaciosPotencialesDto extends BaseDto {
  areasDisponibles: number;
  tipoEmplazamiento: string;
  especiesPotencialesParaSiembraAlMenosTresOpciones: string;
  alturasPotencialesArboles: number;
  caracteristicasEdaficasODelSuelo: number;
  tresBolillo: boolean;
  cuadrado: boolean;
  rectangular: boolean;
  individualOUno: boolean;
  distanciamientoSiembra: number;
  infraestructuraAfectada: string;
  pendienteDelTerreno: string;
  barrio: string;
  comuna: string;
  altitudASNM: number;
  
  coordenada: CoordenadaDto;
  fotos: RegistroFotograficoEspacioDto[];
  

  constructor(){
    super();
    this.fotos = new Array<RegistroFotograficoEspacioDto>();
    this.coordenada = new CoordenadaDto();
  }
}



---------------------------------------
especie.model.ts
************
export interface EspecieDto {
  id: string; // Guid en C# se traduce generalmente como string en TypeScript
  descripcion:string;
}

---------------------------------------
familia.model.ts
************
export interface FamiliaDto {
  id: string; // Guid en C# se traduce generalmente como string en TypeScript
  descripcion:string;
}

---------------------------------------
generic-predecesor-sucesor-dto.model.ts
************
import { BaseDto } from "./base-dto";


export class GenericPredecesorSucesorTableDto extends BaseDto {
  public descripcion: string;
  public predecesorId: string;
  public predecesor: GenericPredecesorSucesorTableDto | null;
  public sucesores: GenericPredecesorSucesorTableDto[];

  constructor() {
    super();
    this.sucesores = [];
  }
}
---------------------------------------
genero.model.ts
************
export interface GeneroDto {
  id: string; // Guid en C# se traduce generalmente como string en TypeScript
  descripcion:string;
}

---------------------------------------
maestra-dto.model.ts
************
import { BaseDto } from "./base-dto";

export class MaestraDto extends BaseDto {  
  nombreTabla :string;
}

---------------------------------------
maestradetalle.mode.ts
************
export enum MaestraDetalleCombo {
    TipoIndividuo = "0475362b-ab82-4d1e-8a32-cbfc0f5bd942",
    CaracteristicasEdaficasODelSuelo = "08bc8ed9-870a-4973-9908-4360702fff55",
    InfraestructuraAfectada = "1bbd9baf-b6c1-46a8-b175-c9ad299646ee",
    TipoEmplazamiento = "3600546b-7820-4384-b05f-c0d77d17932c",
    DistanciamientoSiembra = "3bb50b22-9b46-4662-876d-6bbcdacce005",
    EspeciesPotencialesParaSiembraAlMenosTresOpciones = "5ed945fe-351d-4315-8c46-aeed0b730f4a",
    EstadoMadurez = "77dcb515-3652-4387-8952-9070642aa296",
    PendienteDelTerreno = "7e60de52-ff90-4ab0-a379-0633bda93618",
    PodaSanitaria = "961d1612-d404-4fc0-b951-93552ee10b88",
    EstadoFitosanitario = "a6207503-a3bd-460d-8b2c-d9e7360f68cc",
    RecomendacionesParaManejoSilvicultural = "abe3625e-670d-4c49-851c-2b5c6555d6de",
    AlturasPotencialesArboles = "b0bb7f80-7997-4130-9ad4-301101b4f6ea",
    EstructurasCercanasTipoEmplazamiento = "b4f84511-f07a-412e-9fa0-f68180daf435",
    Limpieza = "e2b9fb66-ecc8-45e6-96dc-2bcde2267d76",
    FormaCopa = "e34711a0-b522-429f-af9b-307c9eead211"

  }
---------------------------------------
modules-dto.ts
************
import { BaseDto } from './base-dto'; // Asumiendo que BaseDto está en el mismo directorio. Ajusta la ruta de importación si es necesario.

export class ModulesDto extends BaseDto {
  moduleName: string;
}

---------------------------------------
orden.model.ts
************
export interface OrdenDto {
  id: string; // Guid en C# se traduce generalmente como string en TypeScript
  descripcion:string;
}

---------------------------------------
permisos-dto.ts
************
import { BaseDto } from "./base-dto";

export interface PermisosDto extends BaseDto {
  module: string;
  created: boolean;
  edited: boolean;
  listed: boolean;
  deleted: boolean;
  printed: boolean;
}

---------------------------------------
request-status.model.ts
************
export type RequestStatus = 'init' | 'loading' | 'success' | 'failed' | 'error';

---------------------------------------
rol-module-dto.ts
************
import { BaseDto } from './base-dto'; // Asumiendo que BaseDto está en el mismo directorio. Ajusta la ruta de importación si es necesario.
import { ModulesDto } from './modules-dto';
import { RolesDto } from './roles-dto'; // Importa RolesDto si ya lo tienes definido en otro lugar.


export class RolModuleDto extends BaseDto {
  created: boolean;
  edited: boolean;
  listed: boolean;
  deleted: boolean;
  printed: boolean;

  idRol: string;  // Guids se representan como strings en JS/TS
  rol: RolesDto;

  idModule: string;  // Guids se representan como strings en JS/TS
  module: ModulesDto;  // Asumo que "Modules" es el nombre de la clase. Si tiene un nombre diferente en TypeScript, cámbialo.
}

---------------------------------------
roles-dto.ts
************
import { BaseDto } from "./base-dto";

export class RolesDto extends BaseDto {
  rolName: string;
}

---------------------------------------
template-color.ts
************
export type TemplateColor = 'dark' | 'ligth' ; //| 'success' | 'failed' | 'error';

---------------------------------------
user-dto.model.ts
************

export interface UserDto {
  id: string;
  fullName: string;
  email: string;
  phone: string;
  userName: string;
  password: string;
  fechaCreacion:Date
  ultimaActualizacion:Date
}

---------------------------------------
user-in-roles-dto.ts
************
import { BaseDto } from "./base-dto";
import { RolesDto } from "./roles-dto";
import { UserDto } from "./user-dto.model";

export class UserInRolesDto extends BaseDto {
  userId: string;  // Guids se representan como strings en JS/TS
  user: UserDto;
  rolId: string;  // Guids se representan como strings en JS/TS
  rol: RolesDto;
}

---------------------------------------
user.model.ts
************
import { PermisosDto } from "./permisos-dto";

export interface User {
  id: string;
  name: string;
  email: string;
  dni: string;
  avatar: string;
  isActive:boolean;
  role: string[];
  permisos:PermisosDto[]
}

---------------------------------------
actividadessilviculturales.service.ts
************
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { ActividadesSilviculturalesDto, ActividadesSilviculturalesEstadoDto } from '../models/actividadessilviculturales-dto.model';
import { CustomApiResponse } from '../models/api-response';
import { checkToken } from '../Interceptor/token-interceptor';
import { Observable, map } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ActividadesSilviculturalesService extends GenericService<ActividadesSilviculturalesDto> {
    protected override endpoint = 'ActividadesSilviculturales';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }

  getPendientes(filter: string, pageNumber: number, pageSize: number) {
    const params = {
      filter: filter,
      pageNumber: pageNumber.toString(),
      pageSize: pageSize.toString()
    };

    return this.http.get<CustomApiResponse<ActividadesSilviculturalesDto[]>>(`${this.apiUrl}/api/${this.endpoint}/GetActividadesSilviculturalesPendientes`, { params, context: checkToken() });
  }

  getByType(filter: string, pageNumber: number, pageSize: number, type : string) {
    const params = {
      filter: filter,
      pageNumber: pageNumber.toString(),
      pageSize: pageSize.toString()
    };

    return this.http.get<CustomApiResponse<ActividadesSilviculturalesDto[]>>(`${this.apiUrl}/api/${this.endpoint}/GetActividadesSilviculturalesByEstado/${type}`, { params, context: checkToken() });
  }



  ///PODA SIEMBRA 

  getListaBySiembraPodaTala(isSiembra:boolean,isPoda:boolean,isTala:boolean,  filter: string, pageNumber: number, pageSize: number) {
    const params = {
      isSiembra: isSiembra,
      isPoda:isPoda,
      isTala:isTala,
      filter: filter,
      pageNumber: pageNumber.toString(),
      pageSize: pageSize.toString()
    };

    return this.http.get<CustomApiResponse<ActividadesSilviculturalesDto[]>>(`${this.apiUrl}/api/${this.endpoint}`, { params, context: checkToken() });
  }

  createWFiles(item: FormData) {
    return this.http.post<CustomApiResponse<ActividadesSilviculturalesDto>>(`${this.apiUrl}/api/${this.endpoint}/LoadWithImages`, item, { context: checkToken() });
  }

  updateWFile(id: string, item: any) {
    return this.http.put<CustomApiResponse<ActividadesSilviculturalesDto>>(`${this.apiUrl}/api/${this.endpoint}/UpdateLoadWithImages/${id}`, item, { context: checkToken() });
  }
  //traer actividades
  GetAll(id: string) {
    return this.http.get<CustomApiResponse<ActividadesSilviculturalesDto>>(`${this.apiUrl}/api/${this.endpoint}/GetAll/${id}`,{ context: checkToken() });
  }
  updateProcesamiento(id: string, item: ActividadesSilviculturalesDto) {
    return this.http.put<CustomApiResponse<ActividadesSilviculturalesDto>>(`${this.apiUrl}/api/${this.endpoint}/procesamiento/${id}`, { ...item, 'ResponsableId': this.tokenService.getTokenId() }, { context: checkToken() });
  }
  updateProcesamientoEstado(id: string, item: ActividadesSilviculturalesEstadoDto) {
    return this.http.put<CustomApiResponse<ActividadesSilviculturalesDto>>(`${this.apiUrl}/api/${this.endpoint}/procesamiento/estado/${id}`, { ...item, 'ResponsableId': this.tokenService.getTokenId() }, { context: checkToken() });
  }

  uploadFile(formData: FormData, size: number) {
    return this.http.post<CustomApiResponse<ActividadesSilviculturalesDto>>(`${this.apiUrl}/api/${this.endpoint}/cargarArchivo`, formData,  { context: checkToken() });
  }
  getDescargas(): Observable<Blob> {
    const headers = new HttpHeaders({
      Accept: 'text/csv; charset=utf-8', // Asegúrate de que este valor sea el correcto según tu API.
    });

    return this.http
      .get(`${this.apiUrl}/api/${this.endpoint}/export`, {
        headers,
        responseType: 'blob' as 'json',
        context: checkToken(),
      })
      .pipe(
        map((res: any) => {
          return new Blob([res], { type: 'text/csv; charset=utf-8' });
        })
      );
  }


}

---------------------------------------
auth.service.mock.ts
************
// src/app/mocks/user.service.mock.ts
import { Observable, of } from 'rxjs';
import { AuthUser } from '../models/auth-user.model';
import { IAuthService } from './interfaces/iauth.service';
import { ResponseLogin } from '../models/auth.model';

export class AuthServiceMock implements IAuthService {

  mockUser: AuthUser = { id:'1', name:'Sancho Panza', email:'usuario@yopmail.com', avatar:'', authToken:'token_123', refreshToken: 'refresh_123' };
  mockResponse: ResponseLogin = { authToken:'', refreshToken:'', userId:0, userName : '', permisos:[] };

  Login(username: string, password:string): Observable<ResponseLogin> {
    return of(this.mockResponse);
  }

}

---------------------------------------
auth.service.ts
************
// src/app/mocks/user.service.mock.ts
import { BehaviorSubject, Observable, of, tap } from 'rxjs';
import { AuthUser } from '../models/auth-user.model';
import { IAuthService } from './interfaces/iauth.service';
import { environment } from 'src/environments/environment';
import { User } from '../models/user.model';
import { TokenService } from './token.service';
import { ResponseLogin } from '../models/auth.model';
import { HttpClient } from '@angular/common/http';
import { checkToken } from '../Interceptor/token-interceptor';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root' // Esto asegura que el servicio esté disponible en toda la aplicación
})

export class AuthService implements IAuthService {

  mockUser: AuthUser = { id:'1', name:'Oscar Rueda', email:'usuario@yopmail.com', avatar:'', authToken:'token_123', refreshToken: 'refresh_123' };

  apiUrl = environment.API_URL;
  user$ = new BehaviorSubject<User | null>(null);

  constructor(private http: HttpClient,
    private tokenService: TokenService){

  }
  // Login(username: string, password: string): Observable<ResponseLogin> {
  //   throw new Error('Method not implemented.');
  // }

  Login(user: string, password: string): Observable<ResponseLogin> {
    return this.http.post<ResponseLogin>(`${this.apiUrl}/api/token`, {
      user,
      password
    })
    .pipe(
      tap(response => {
        
        this.tokenService.saveToken(response.authToken);
        this.tokenService.saveRefreshToken(response.refreshToken);
        this.tokenService.saveTokenId(response.userId)
        this.tokenService.saveTokenUserName(response.userName)
        this.tokenService.savePermisos(response.permisos)
      })
    );
  }

  getDataUser() {
    return this.user$.getValue();
  }

  getProfile() {
    return this.http.get<User>(`${this.apiUrl}/Auth/me`, { context: checkToken() })
    .pipe(
      tap(user => {
        //console.log("logeado", user)
        this.user$.next(user);
      })
    );
  }

}

---------------------------------------
basictable.service.ts
************

import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { GenericPredecesorSucesorTableDto } from '../models/generic-predecesor-sucesor-dto.model';
import { checkToken } from '../Interceptor/token-interceptor';
import { CustomApiResponse } from '../models/api-response';


@Injectable({
  providedIn: 'root'
})
export class BasicTableService extends GenericService<GenericPredecesorSucesorTableDto> {
    protected override endpoint = 'BasicTable';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }

  getPagesByTable(tabla: string,filter: string, pageNumber: number, pageSize: number) {
    const params = {
      filter: filter,
      pageNumber: pageNumber.toString(),
      pageSize: pageSize.toString()
    };

    return this.http.get<CustomApiResponse<GenericPredecesorSucesorTableDto[]>>(`${this.apiUrl}/api/${this.endpoint}/filters/${tabla}`, { params, context: checkToken() });
  }

  getByTableById(tabla: string, id: string) {
    return this.http.get<CustomApiResponse<GenericPredecesorSucesorTableDto>>(`${this.apiUrl}/api/${this.endpoint}/${tabla}/${id}`, { context: checkToken() });
  }

  getByTable(tabla: string) {
    return this.http.get<CustomApiResponse<GenericPredecesorSucesorTableDto[]>>(`${this.apiUrl}/api/${this.endpoint}/${tabla}`, { context: checkToken() });
  }

  createByTabla(tabla: string, item: GenericPredecesorSucesorTableDto) {
    return this.http.post<CustomApiResponse<GenericPredecesorSucesorTableDto>>(`${this.apiUrl}/api/${this.endpoint}/${tabla}`, { ...item, 'ResponsableId': this.tokenService.getTokenId() }, { context: checkToken() });
  }

  updateByTabla(tabla: string,id: string, item: GenericPredecesorSucesorTableDto) {
    return this.http.put<CustomApiResponse<GenericPredecesorSucesorTableDto>>(`${this.apiUrl}/api/${this.endpoint}/${tabla}/${id}`, { ...item, 'ResponsableId': this.tokenService.getTokenId() }, { context: checkToken() });
  }

  deleteByTabla(tabla: string, id: string, item: GenericPredecesorSucesorTableDto) {
    return this.http.delete<CustomApiResponse<GenericPredecesorSucesorTableDto>>(`${this.apiUrl}/api/${this.endpoint}/${tabla}/${id}`, { context: checkToken() });
  }


  getByTableByIdPredecesor(tabla: string, predecesorId: string) {
    return this.http.get<CustomApiResponse<GenericPredecesorSucesorTableDto[]>>(`${this.apiUrl}/api/${this.endpoint}/ByPredecesor/${tabla}/${predecesorId}`, { context: checkToken() });
  }


  public getAntecesor(tabla : string) : string {
    switch(tabla){
      case "Familia" : return "Orden";
      case "Genero" : return "Familia";
      case "Especie" : return "Genero";
      case "Barrio" : return "Comuna";
      default: return null;

    }
  }
}

---------------------------------------
censoarboreo.service.ts
************
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { CensoArboreoDto, CoordenadaDto } from '../models/censoarboreo-dto.model';
import { checkToken } from '../Interceptor/token-interceptor';
import { CustomApiResponse } from '../models/api-response';
import { Observable, map } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class CensoArboreoService extends GenericService<CensoArboreoDto> {
  protected override endpoint = 'CensoArboreo';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }

  createWFiles(item: FormData) {
    return this.http.post<CustomApiResponse<CensoArboreoDto>>(
      `${this.apiUrl}/api/${this.endpoint}/LoadCensoWithImages`,
      item,
      { context: checkToken() }
    );
  }

  updateWFile(id: string, item: any) {
    return this.http.put<CustomApiResponse<CensoArboreoDto>>(
      `${this.apiUrl}/api/${this.endpoint}/UpdateLoadCensoWithImages/${id}`,
      item,
      { context: checkToken() }
    );
  }

  getDescargas(): Observable<Blob> {
    const headers = new HttpHeaders({
      Accept: 'text/csv; charset=utf-8', // Asegúrate de que este valor sea el correcto según tu API.
    });

    return this.http
      .get(`${this.apiUrl}/api/${this.endpoint}/export`, {
        headers,
        responseType: 'blob' as 'json',
        context: checkToken(),
      })
      .pipe(
        map((res: any) => {
          return new Blob([res], { type: 'text/csv; charset=utf-8' });
        })
      );
  }

  uploadFile(formData: FormData, size: number) {
    return this.http.post<CustomApiResponse<CensoArboreoDto>>(`${this.apiUrl}/api/CensoArboreo/cargarArchivo`, formData,  { context: checkToken() });
  }

  getAllCoordenadas() {
    return this.http.get<CustomApiResponse<CoordenadaDto[]>>(`${this.apiUrl}/api/CensoArboreo/GetUbicacionArboles`,{ context: checkToken() });
  }

  getFilterPlantula(filter: string, pageNumber: number, pageSize: number) {
    const params = {
      filter: filter,
      toActividades : 'Plantula',
      pageNumber: pageNumber.toString(),
      pageSize: pageSize.toString()
    };

    return this.http.get<CustomApiResponse<CensoArboreoDto[]>>(`${this.apiUrl}/api/${this.endpoint}`, { params, context: checkToken() });
  }

  getArbolesCercanos(lat: number,long: number) {
    const params = {
      lat: lat,
      long: long,
      dist: 20
    };

    return this.http.get<CustomApiResponse<CoordenadaDto[]>>(`${this.apiUrl}/api/CensoArboreo/GetUbicacionArbolesCercanos`, { params, context: checkToken() });
  }
}

---------------------------------------
clasificacion-service.ts
************
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { GenericService } from "./generic-service";
import { TokenService } from "./token.service";
import { ClasificacionDto } from "../models/clasificacion.model";

@Injectable({
  providedIn: 'root'
})
export class ClasificacionService extends GenericService<ClasificacionDto> {
    protected override endpoint = 'clasificacion';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
combo.service.ts
************
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { DetalleDto } from '../models/detalle-dto.model';

@Injectable({
  providedIn: 'root'
})
export class DetalleService extends GenericService<DetalleDto> {
    protected override endpoint = 'detalle';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
detalle.service.ts
************
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { DetalleDto } from '../models/detalle-dto.model';
import { CustomApiResponse } from '../models/api-response';
import { checkToken } from '../Interceptor/token-interceptor';

@Injectable({
  providedIn: 'root'
})
export class DetalleService extends GenericService<DetalleDto> {
    protected override endpoint = 'detalle';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }

  getByMaestra(id : string) {
    return this.http.get<CustomApiResponse<DetalleDto[]>>(`${this.apiUrl}/api/${this.endpoint}/GetByMaestra/${id}`, { context: checkToken() });
  }

  getFilterByMaestra(filter: string, idMaestra: string, pageNumber: number, pageSize: number) {
    const params = {
      IdMaestra: idMaestra,
      filter: filter,
      pageNumber: pageNumber.toString(),
      pageSize: pageSize.toString()
    };

    return this.http.get<CustomApiResponse<DetalleDto[]>>(`${this.apiUrl}/api/${this.endpoint}`, { params, context: checkToken() });
  }
}

---------------------------------------
espaciospotenciales.service.ts
************
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { EspaciosPotencialesDto } from '../models/espaciospotenciales-dto.model';
import { checkToken } from '../Interceptor/token-interceptor';
import { CustomApiResponse } from '../models/api-response';
import { Observable, map } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class EspaciosPotencialesService extends GenericService<EspaciosPotencialesDto> {
    protected override endpoint = 'EspaciosPotenciales';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }

  createWFiles(item: FormData) {
    return this.http.post<CustomApiResponse<EspaciosPotencialesDto>>(`${this.apiUrl}/api/${this.endpoint}/LoadEspacioWithImages`, item, { context: checkToken() });
  }

  updateWFile(id: string, item: any) {
    return this.http.put<CustomApiResponse<EspaciosPotencialesDto>>(`${this.apiUrl}/api/${this.endpoint}/UpdateLoadEspacioWithImages/${id}`, item, { context: checkToken() });
  }
  uploadFile(formData: FormData, size: number) {
    return this.http.post<CustomApiResponse<EspaciosPotencialesDto>>(`${this.apiUrl}/api/${this.endpoint}/cargarArchivo`, formData,  { context: checkToken() });
  }
  getDescargas(): Observable<Blob> {
    const headers = new HttpHeaders({
      Accept: 'text/csv; charset=utf-8', // Asegúrate de que este valor sea el correcto según tu API.
    });

    return this.http
      .get(`${this.apiUrl}/api/${this.endpoint}/export`, {
        headers,
        responseType: 'blob' as 'json',
        context: checkToken(),
      })
      .pipe(
        map((res: any) => {
          return new Blob([res], { type: 'text/csv; charset=utf-8' });
        })
      );
  }
}

---------------------------------------
EsriMap.service.ts
************
import { Injectable } from '@angular/core';
import EsriMap from '@arcgis/core/Map';
import MapView from '@arcgis/core/views/MapView';
import Graphic from '@arcgis/core/Graphic';
import GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';
import Point from '@arcgis/core/geometry/Point';
import PictureMarkerSymbol from "@arcgis/core/symbols/PictureMarkerSymbol.js";

@Injectable({
  providedIn: 'root'
})
export class EsriMapService {
  public view: MapView | null = null;
  private graphicsLayer: GraphicsLayer; // Now it's not initialized here
  private initialCenter: Point;
  private initialZoom: number;

  private pendingPoints: Array<{ longitude: number, latitude: number }> = [];

  constructor() {
    this.graphicsLayer = new GraphicsLayer(); // Initialize in the constructor
    this.initialCenter = new Point({ // Establece el centro inicial aquí
      longitude: -73.1198,
      latitude: 7.11392
    });
    this.initialZoom = 17;
  }

  async initializeMap(containerId: string): Promise<MapView> {
    const map = new EsriMap({
      basemap: 'topo'
    });

    const mapView = new MapView({
      container: containerId,
      map: map,
      zoom: this.initialZoom,
      center: this.initialCenter
    });

    this.view = mapView;

    await mapView.when();

    this.view.map.add(this.graphicsLayer); // Add the graphics layer to the map

    this.view.watch('extent', () => {
      this.loadPendingPoints();
    });

    return mapView; // Make sure to return the mapView here
  }

  public addPoint(longitude: number, latitude: number): void {
    if (!this.view || longitude == undefined || latitude == undefined) {
      console.error('La vista del mapa no está inicializada o las coordenadas no están definidas.');
      return;
    }

    // Create a point
    const point = new Point({
      longitude: longitude,
      latitude: latitude
    });

    if (this.isPointInView(point)) {
      this.createAndAddGraphic(point);
    } else {
      this.pendingPoints.push({ longitude, latitude });
    }
  }

  private createAndAddGraphic(point: Point): void {
    // Define a symbol
    const simpleMarkerSymbol = {
      type: 'simple-marker',
      style: 'triangle',
      color: [0, 128, 0], // green
      outline: {
        color: [0, 0, 0], // black
        width: 1
      }
    };

    // Define a picture marker symbol
    const pictureMarkerSymbol = new PictureMarkerSymbol({
      url: "./assets/img/arbol2.png",  // URL de la imagen PNG
      width: "24px",  // Ancho del ícono
      height: "24px"  // Altura del ícono
    });

    // Create a graphic
    const pointGraphic = new Graphic({
      geometry: point,
      symbol: simpleMarkerSymbol
    });

    // Add the graphic to the layer
    this.graphicsLayer.add(pointGraphic);
  }

  private isPointInView(point: Point): boolean {
    return this.view.extent.contains(point);
  }

  public addSinglePoint(longitude: number, latitude: number): void {
    if (!this.view || longitude == undefined || latitude == undefined) {
      console.error('La vista del mapa no está inicializada o las coordenadas no están definidas.');
      return;
    }

    // Create a point
    const point = new Point({
      longitude: longitude,
      latitude: latitude
    });

    this.view.center = point;

    // Define a symbol
    const simpleMarkerSymbol = {
      type: 'simple-marker',
      style: 'triangle',
      color: [0, 128, 0], // green
      outline: {
        color: [0, 0, 0], // black
        width: 1
      }
    };

    // Create a graphic
    const pointGraphic = new Graphic({
      geometry: point,
      symbol: simpleMarkerSymbol
    });

    this.graphicsLayer.removeAll();
    // Add the graphic to the layer
    this.graphicsLayer.add(pointGraphic);

    // Center the view at the point and zoom to an appropriate level
    this.view.goTo({
      center: point,
      zoom: 18 // or any other zoom level you find appropriate
    }).catch((error: any) => {
      console.error('Error al centrar el mapa en el punto:', error);
    });
  }

  public resetMapView(): void {
    if (!this.view) {
      console.error('La vista del mapa no está inicializada.');
      return;
    }

    // Restablece la vista del mapa a los valores iniciales
    this.view.goTo({
      center: this.initialCenter,
      zoom: this.initialZoom
    }).catch((error: any) => {
      console.error('Error al restablecer la vista del mapa:', error);
    });
  }

  private loadPendingPoints(): void {
    this.pendingPoints = this.pendingPoints.filter(pendingPoint => {
      const point = new Point({
        longitude: pendingPoint.longitude,
        latitude: pendingPoint.latitude
      });

      if (this.isPointInView(point)) {
        this.createAndAddGraphic(point);
        return false;
      }

      return true;
    });
  }

}




---------------------------------------
generic-service.ts
************
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { environment } from 'src/environments/environment';
import { CustomApiResponse } from '../models/api-response';
import { TokenService } from './token.service';
import { checkToken } from '../Interceptor/token-interceptor';

@Injectable({
  providedIn: 'root'
})
export class GenericService<T> {

  apiUrl = environment.API_URL;
  protected endpoint: string;

  constructor(
    protected http: HttpClient,
    protected tokenService: TokenService
  ) { }

  get(filter: string, pageNumber: number, pageSize: number) {
    const params = {
      filter: filter,
      pageNumber: pageNumber.toString(),
      pageSize: pageSize.toString()
    };

    return this.http.get<CustomApiResponse<T[]>>(`${this.apiUrl}/api/${this.endpoint}`, { params, context: checkToken() });
  }

  getAll() {
    return this.http.get<CustomApiResponse<T[]>>(`${this.apiUrl}/api/${this.endpoint}/getAll`, { context: checkToken() });
  }

  getById(id: string) {
    return this.http.get<CustomApiResponse<T>>(`${this.apiUrl}/api/${this.endpoint}/${id}`, { context: checkToken() });
  }

  create(item: T) {
    return this.http.post<CustomApiResponse<T>>(`${this.apiUrl}/api/${this.endpoint}`, { ...item, 'ResponsableId': this.tokenService.getTokenId() }, { context: checkToken() });
  }

  update(id: string, item: T) {
    return this.http.put<CustomApiResponse<T>>(`${this.apiUrl}/api/${this.endpoint}/${id}`, { ...item, 'ResponsableId': this.tokenService.getTokenId() }, { context: checkToken() });
  }

  delete(id: string, item: T) {
    return this.http.delete<CustomApiResponse<T>>(`${this.apiUrl}/api/${this.endpoint}/${id}`, { context: checkToken() });
  }
}

---------------------------------------
habilitaracciones.service.ts
************
import { Injectable } from '@angular/core';
import { TokenService } from './token.service';
@Injectable({
  providedIn: 'root'
})
export class Habilitaracciones {
  mostrarCreate: boolean = false;
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  mostraPrint: boolean = false;
  mostraList: boolean = false;
  constructor(private tokenService: TokenService) {}
      // Función para verificar los permisos y establecer la visibilidad del botón
      MostrarBotones(module: string) {
        const permisos = this.tokenService.getPermisos();
        const resultados = [];
    
        if (!module) {
          permisos.forEach(permiso => {
            resultados.push({ module: permiso.module, listed: permiso.listed });
          });
        } else {
          permisos.forEach(permiso => {
            if (permiso.module === module) {
              this.mostrarCreate = permiso.created;
              this.mostraUpdate = permiso.edited;
              this.mostraDelete = permiso.deleted;
              this.mostraPrint = permiso.printed;
              this.mostraList = permiso.listed;
            }
          });
    
          resultados.push({
            crear: this.mostrarCreate,
            editar: this.mostraUpdate,
            eliminar: this.mostraDelete,
            imprimir: this.mostraPrint,
            listar: this.mostraList
          });
        }
    
        return resultados;
    }
    

}

---------------------------------------
iauth.service.ts
************
import { Observable } from "rxjs";
import { ResponseLogin } from "../../models/auth.model";

export interface IAuthService {
  Login(username: string, password:string): Observable<ResponseLogin>;
}

---------------------------------------
irenew-token.service.ts
************
import { Observable } from "rxjs";
import { AuthUser } from "../../models/auth-user.model";

export interface IRenewtokenService {
  RenewToken(authToken: string, refreshToken:string): Observable<AuthUser>;
}

---------------------------------------
maestra.service.ts
************
import { UserDto } from '../models/user-dto.model';
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { MaestraDto } from '../models/maestra-dto.model';

@Injectable({
  providedIn: 'root'
})
export class MaestraService extends GenericService<MaestraDto> {
    protected override endpoint = 'maestra';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
masreportes-service.ts
************
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { CensoArboreoDto, CoordenadaDto } from '../models/censoarboreo-dto.model';
import { checkToken } from '../Interceptor/token-interceptor';
import { CustomApiResponse } from '../models/api-response';
import { Observable, map } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class MasreportesService extends GenericService<CensoArboreoDto> {
  protected override endpoint = 'ActividadesSilviculturales';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }

   getDescargas(tipo: number): Observable<Blob> {
    const headers = new HttpHeaders({
      Accept: 'text/xlsx; charset=utf-8', // Asegúrate de que este valor sea el correcto según tu API.
    });

    var ruta =''
    switch (tipo) {
      case 1:
        ruta = 'exportSiembra'
        break;
      case 2:
        ruta = 'exportPoda'
        break;
      case 3:
        ruta = 'exportTala'
        break;
      default:
    }
    return this.http
      .get(`${this.apiUrl}/api/${this.endpoint}/${ruta}`, {
        headers,
        responseType: 'blob' as 'json',
        context: checkToken(),
      })
      .pipe(
        map((res: any) => {
          return new Blob([res], { type: 'text/xlsx; charset=utf-8' });
        })
      );
  }


  getShapefileZip(): Observable<Blob> {
    return this.http.get(`${this.apiUrl}/api/CensoArboreo/exportShape`, {
      responseType: 'blob', // Ajuste aquí
      context: checkToken(),
    }) as Observable<Blob>; // Asegúrate de que la respuesta se maneje como un Blob
  }


}

---------------------------------------
module.service.ts
************
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';
import { ModulesDto } from '../models/modules-dto';

@Injectable({
  providedIn: 'root'
})
export class ModulesService extends GenericService<ModulesDto> {
    protected override endpoint = 'modules';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
modules-service.ts
************
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { GenericService } from "./generic-service";
import { TokenService } from "./token.service";
import { ModulesDto } from "../models/modules-dto";

@Injectable({
  providedIn: 'root'
})
export class ModuleService extends GenericService<ModulesDto> {
    protected override endpoint = 'modules';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
renew-token.service.mock.ts
************
// src/app/mocks/user.service.mock.ts
import { Observable, of } from 'rxjs';
import { AuthUser } from '../models/auth-user.model';
import { ResponseLogin } from '../models/auth.model';

export class RenewTokenServiceMock  {

  mockUser: AuthUser = { id:'1', name:'Sancho Panza', email:'usuario@yopmail.com', avatar:'', authToken:'token_123', refreshToken: 'refresh_123' };
  mockResponse: ResponseLogin = { authToken:'', refreshToken:'', userId:0, userName : '', permisos:[] };

  RenewToken(authToken: string, refreshToken:string): Observable<ResponseLogin> {
    //TODO: perform implementation.
    return of(this.mockResponse);
  }

}

---------------------------------------
renew-token.service.ts
************
// src/app/mocks/user.service.mock.ts
import { Observable, of } from 'rxjs';
import { AuthUser } from '../models/auth-user.model';

export class RenewTokenService  {

  mockUser: AuthUser = { id:'1', name:'Oscar Rueda', email:'usuario@yopmail.com', avatar:'', authToken:'token_123', refreshToken: 'refresh_123' };

  RenewToken(authToken: string, refreshToken:string): Observable<AuthUser> {
    //TODO: perform implementation.
    return of(this.mockUser);
  }

}

---------------------------------------
roles-modules-service.ts
************
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { UserDto } from "../models/user-dto.model";
import { GenericService } from "./generic-service";
import { TokenService } from "./token.service";
import { RolesDto } from "../models/roles-dto";
import { RolModuleDto } from "../models/rol-module-dto";

@Injectable({
  providedIn: 'root'
})
export class RolModuleService extends GenericService<RolModuleDto> {
    protected override endpoint = 'rolModule';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
roles-service.ts
************
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { UserDto } from "../models/user-dto.model";
import { GenericService } from "./generic-service";
import { TokenService } from "./token.service";
import { RolesDto } from "../models/roles-dto";

@Injectable({
  providedIn: 'root'
})
export class RolesService extends GenericService<RolesDto> {
    protected override endpoint = 'roles';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
security.model.ts
************
import { UserDto } from "../models/user-dto.model";

export class SecurityDto {
  id: number;
  fullName: string;
  email: string;
  userName: string;
  password: string;
  fechaCreacion: Date;
  ultimaActualizacion?: Date;
  PersonId: number;
  Person: UserDto;
}

---------------------------------------
security.service.ts
************
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { SecurityDto } from './security.model';
import { GenericService } from './generic-service';

@Injectable({
  providedIn: 'root'
})
export class SecurityService extends GenericService<SecurityDto> {
    protected override endpoint = 'security';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
sweet-alert.service.ts
************
import { Injectable } from '@angular/core';
import Swal from 'sweetalert2';

@Injectable({
  providedIn: 'root',
})
export class SweetAlertService {
  showConfirmationCallback(title: string,text: string, callback: () => void, errorCallback: () => void) {
    Swal.fire({
      title: title,
      text: text,
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Si, cambiar!',
    }).then((result) => {
      if (result.isConfirmed) {
        callback(); // Llamar a la función de devolución de llamada
      } else {
        errorCallback(); // Llamar a la función de devolución de llamada de error si se cancela la confirmación
      }
    });
  }
}

---------------------------------------
token.service.ts
************
import { Injectable } from '@angular/core';
import { getCookie, setCookie, removeCookie } from 'typescript-cookie';
import jwt_decode, { JwtPayload } from "jwt-decode";
import { catchError, of, tap } from 'rxjs';
import { environment } from 'src/environments/environment';
import { HttpClient } from '@angular/common/http';
import { ResponseLogin } from '../models/auth.model';
import { PermisosDto } from '../models/permisos-dto';

@Injectable({
  providedIn: 'root'
})
export class TokenService {

  apiUrl = environment.API_URL;

  constructor(private http: HttpClient) { }

  savePermisos(token: PermisosDto[]) {
   
    const tokenString = JSON.stringify(token);
    setCookie('tran-arbo-permisos', tokenString,{ expires: 365, path: '/' });
  }

  getPermisos(): PermisosDto[] {
    const tokenString = getCookie('tran-arbo-permisos');
    if (tokenString) {
      return JSON.parse(tokenString);
    }
    return null;
  }

  saveToken(token: string) {
    setCookie('tran-arbo-token', token, { expires: 365, path: '/' });
  }

  getToken() {
    const token = getCookie('tran-arbo-token');
    return token;
  }

  removeToken() {
    removeCookie('tran-arbo-token');
  }

  saveRefreshToken(token?: string) {
    setCookie('refresh-tran-arbo-token', token, { expires: 365, path: '/' });
  }

  getRefreshToken() {
    const token = getCookie('refresh-tran-arbo-token');
    return token;
  }

  removeRefreshToken() {
    removeCookie('refresh-tran-arbo-token');
  }

  saveTokenId(token: number) {
    setCookie('tran-arbo-tokenId', token, { expires: 365, path: '/' });
  }

  getTokenId() {
    const token = getCookie('tran-arbo-tokenId');
    return token;
  }

  removeTokenId() {
    removeCookie('tran-arbo-tokenId');
  }

  saveTokenUserName(token: string) {
    setCookie('tran-arbo-token-UserName', token, { expires: 365, path: '/' });
  }

  getTokenUserName() {
    const token = getCookie('tran-arbo-token-UserName');
    return token;
  }

  removeTokenUserName() {
    removeCookie('tran-arbo-token-UserName');
  }

  isValidToken() {
    const token = this.getToken();
    if (!token) {
      return false;
    }
    const decodeToken = jwt_decode<JwtPayload>(token);
    if (decodeToken && decodeToken?.exp) {
       const expirationTime = new Date(decodeToken.exp * 1000);
       const today = new Date();
       return expirationTime > today;
     }
     return false;
  }

  isValidRefreshToken() {
    const token = this.getRefreshToken();
    if (!token) {
      return false;
    }

    return true;
  }

removeAllTokens(){
        this.removeToken();
        this.removeRefreshToken();
        this.removeTokenId();
        this.removeTokenUserName();
}

  refreshToken() {

    const accessToken = this.getToken();
    const  refreshToken = this.getRefreshToken();

    return this.http.post<ResponseLogin>(`${this.apiUrl}Token/RenewToken`, {
      accessToken,
      refreshToken
    })
    .pipe(
      tap(response => {
        this.saveToken(response.authToken);
        this.saveRefreshToken(response.refreshToken);
      }),
      catchError(error => {
        console.log('Ha ocurrido un error:', error);
        this.removeAllTokens();
        return of([]);
      })
    );

  }



}

---------------------------------------
user-in-roles-service.ts
************
import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { GenericService } from "./generic-service";
import { TokenService } from "./token.service";
import { UserInRolesDto } from "../models/user-in-roles-dto";
import { checkToken } from "../Interceptor/token-interceptor";
import { CustomApiResponse } from "../models/api-response";

@Injectable({
  providedIn: 'root'
})
export class UserInRolesService extends GenericService<UserInRolesDto> {
    protected override endpoint = 'userInRoles';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }

  getAllById(userId: string) {
    return this.http.get<CustomApiResponse<UserInRolesDto[]>>(`${this.apiUrl}/api/${this.endpoint}/getAll?userId=${userId}`, { context: checkToken() });
  }

}

---------------------------------------
usuario.service.ts
************
import { UserDto } from './../models/user-dto.model';
import { TokenService } from './token.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { GenericService } from './generic-service';

@Injectable({
  providedIn: 'root'
})
export class UsuarioService extends GenericService<UserDto> {
    protected override endpoint = 'user';  // Aquí estableces el endpoint específico para UserDto

  constructor(http: HttpClient, tokenService: TokenService) {
    super(http, tokenService);
  }
}

---------------------------------------
dropdown-menu.component.html
************
<!-- <button type="button" class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700" aria-controls="dropdown-example" data-collapse-toggle="dropdown-example">
  <svg aria-hidden="true" class="flex-shrink-0 w-6 h-6 text-gray-500 transition duration-75 group-hover:text-gray-900 dark:text-gray-400 dark:group-hover:text-white" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 2a4 4 0 00-4 4v1H5a1 1 0 00-.994.89l-1 9A1 1 0 004 18h12a1 1 0 00.994-1.11l-1-9A1 1 0 0015 7h-1V6a4 4 0 00-4-4zm2 5V6a2 2 0 10-4 0v1h4zm-6 3a1 1 0 112 0 1 1 0 01-2 0zm7-1a1 1 0 100 2 1 1 0 000-2z" clip-rule="evenodd"></path></svg>
  <span class="flex-1 ml-3 text-left whitespace-nowrap">E-commerce</span>
  <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
</button>
<ul id="dropdown-example" class="hidden py-2 space-y-2">
  <li>
     <a href="#" class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Products</a>
  </li>
  <li>
     <a href="#" class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Billing</a>
  </li>
  <li>
     <a href="#" class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Invoice</a>
  </li>
</ul> -->
<button
  type="button"
  class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700"
  (click)="toggleDropdown()"
  [attr.aria-controls]="dropdownId"
  [class.active]="isDropdownOpen"
>

  <svg aria-hidden="true" class="flex-shrink-0 w-6 h-6 text-gray-500 transition duration-75 group-hover:text-gray-900 dark:text-gray-400 dark:group-hover:text-white" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 2a4 4 0 00-4 4v1H5a1 1 0 00-.994.89l-1 9A1 1 0 004 18h12a1 1 0 00.994-1.11l-1-9A1 1 0 0015 7h-1V6a4 4 0 00-4-4zm2 5V6a2 2 0 10-4 0v1h4zm-6 3a1 1 0 112 0 1 1 0 01-2 0zm7-1a1 1 0 100 2 1 1 0 000-2z" clip-rule="evenodd"></path></svg>
  <span class="flex-1 ml-3 text-left whitespace-nowrap">{{ label }}</span>
  <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
</button>

<ul
  [id]="dropdownId"
  class="hidden py-2 space-y-2"
  [class.hidden]="!isDropdownOpen"
>
  <ng-content></ng-content>
</ul>

---------------------------------------
dropdown-menu.component.scss
************

---------------------------------------
dropdown-menu.component.ts
************
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-dropdown-menu',
  templateUrl: './dropdown-menu.component.html',
  styleUrls: ['./dropdown-menu.component.scss']
})
export class DropdownMenuComponent {
  @Input() label: string;
  @Input() dropdownId: string;

  isDropdownOpen = false;

  toggleDropdown() {
    this.isDropdownOpen = !this.isDropdownOpen;
  }
}

---------------------------------------
footer.component.html
************
<!-- Put footer here if needed -->

---------------------------------------
footer.component.scss
************

---------------------------------------
footer.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-footer',
  templateUrl: './footer.component.html',
  styleUrls: ['./footer.component.scss']
})
export class FooterComponent {

}

---------------------------------------
header.component.html
************
<nav class="fixed top-0  w-full bg-white border-b border-gray-200 dark:bg-gray-800 dark:border-gray-700">
  <div class="px-3 py-3 lg:px-5 lg:pl-3">
    <div class="flex items-center justify-between">
      <div class="flex items-center justify-start">
        <button data-drawer-target="logo-sidebar" data-drawer-toggle="logo-sidebar" aria-controls="logo-sidebar"
          type="button"
          class="inline-flex items-center p-2 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600">
          <span class="sr-only">Open sidebar</span>
          <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" fill-rule="evenodd"
              d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z">
            </path>
          </svg>

        </button>
        <a class="flex ml-2 md:mr-24">
          <img src="../../../../assets/img/arbol.png" class="h-8 mr-3" alt="FlowBite Logo" />
          <span class="self-center text-xl font-semibold sm:text-2xl whitespace-nowrap dark:text-white">Gestión del
            árbol urbano y periurbano</span>
        </a>
      </div>
      <div class="flex items-center">
        <div class="relative">
          <div>
            <div class="btn-back">
              <button onclick="window.history.back()">
                <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="30.000000pt" height="10.000000pt"
                  viewBox="0 0 1280.000000 640.000000" preserveAspectRatio="xMidYMid meet">
                  <g transform="translate(0.000000,640.000000) scale(0.100000,-0.100000)" fill="#FFFFFF" stroke="none">
                    <path d="M3600 6163 c-51 -36 -3566 -2867 -3577 -2882 -24 -30 -27 -63 -8 -95
             9 -17 92 -92 183 -167 92 -74 889 -727 1772 -1450 883 -723 1616 -1322 1630
             -1332 37 -26 92 -22 121 9 l24 26 3 694 2 694 4481 0 c4886 0 4536 -4 4559 55
             13 35 14 2934 0 2969 -5 14 -23 32 -39 41 -27 13 -486 15 -4515 15 l-4486 0
             -2 694 -3 694 -24 26 c-29 31 -84 35 -121 9z" />
                  </g>
                </svg>
              </button>
            </div>
            <button (click)="toggleUserMenu()" type="button"
              class="btn btn-back2 flex text-sm bg-gray-800 focus:ring-4 focus:ring-gray-300 dark:focus:ring-gray-600"
              aria-expanded="false" data-dropdown-toggle="dropdown-user">
              <span class="sr-only">Open user menu</span>
              <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 448 512" fill="white">
                <path
                  d="M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3z" />
              </svg>
            </button>
          </div>

          <div *ngIf="openUserMenu"
            class="absolute right-0 mt-2 text-base list-none bg-white divide-y divide-gray-100 rounded shadow dark:bg-gray-700 dark:divide-gray-600"
            id="dropdown-user">
            <div class="px-4 py-3" role="none">
              <p class="text-sm text-gray-900 dark:text-white" role="none">
                {{userLogged}}
              </p>
            </div>
            <ul class="py-1" role="none">
              <li>
                <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-600 dark:hover:text-white"
                  role="menuitem">Dashboard</a>
              </li>
              <li>
                <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-600 dark:hover:text-white"
                  role="menuitem">Settings</a>
              </li>
              <li>
                <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-600 dark:hover:text-white"
                  role="menuitem">Earnings</a>
              </li>
              <li>
                <a (click)="SignOut()"
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-600 dark:hover:text-white cursor-pointer"
                  role="menuitem">Sign out</a>
              </li>
            </ul>
          </div>
        </div>
      </div>

    </div>
  </div>
</nav>

<button data-drawer-target="logo-sidebar" data-drawer-toggle="logo-sidebar" aria-controls="logo-sidebar" type="button"
  class="inline-flex items-center p-2 text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600">
  <span class="sr-only">Open sidebar</span>
  <svg class="w-6 h-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
    <path clip-rule="evenodd" fill-rule="evenodd"
      d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z">
    </path>
  </svg>
</button>
<!-- Sidebar -->
<aside id="logo-sidebar"
  class="fixed top-0 left-0  w-64 h-screen pt-20 transition-transform -translate-x-full bg-white border-r border-gray-200 sm:translate-x-0 dark:bg-gray-800 dark:border-gray-700"
  aria-label="Sidebar">
  <div class="h-full px-3 pb-4 overflow-y-auto bg-white dark:bg-gray-800">
    <ul class="space-y-2 font-medium">
      <li>
        <a href="#/app/home"
          class="flex items-center p-2 text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700">
          <svg aria-hidden="true"
            class="w-6 h-6 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white"
            fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z"></path>
            <path d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z"></path>
          </svg>
          <span class="ml-3">Dashboard</span>
        </a>
      </li>
      <li>
        <app-dropdown-menu label="Administracion" [dropdownId]="'001'">
      <li>
        <a *ngIf="menuusuario" href="#/app/usuarios"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Usuarios</a>
      </li>
      <li>
        <a *ngIf="menuroles" href="#/app/roles"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Roles</a>
      </li>
      <li>
        <a *ngIf="menupermisos" href="#/app/permisos"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Permisos</a>
      </li>
      <li>
        <a *ngIf="menumodules" href="#/app/modules"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Modulos</a>
      </li>

      </app-dropdown-menu>
      </li>
      <li>
        <app-dropdown-menu label="Configuraciones" [dropdownId]="'004'">
      <li>
        <a *ngIf="menumaestra" href="#/app/maestra"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Maestra</a>
      </li>
      <li>
        <a href="#/app/detalle/by/0475362b-ab82-4d1e-8a32-cbfc0f5bd942"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Tipo
          de individuo (forestal, arbusto, palma, frutal, bambú y guadua)</a>
      </li>
      <li>
        <a href="#/app/detalle/by/08bc8ed9-870a-4973-9908-4360702fff55"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Características
          edáficas o del suelo</a>
      </li>
      <li>
        <a href="#/app/detalle/by/1bbd9baf-b6c1-46a8-b175-c9ad299646ee"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Infraestructura
          afectada</a>
      </li>
      <li>
        <a href="#/app/detalle/by/3600546b-7820-4384-b05f-c0d77d17932c"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Tipo
          de emplazamiento</a>
      </li>
      <li>
        <a href="#/app/detalle/by/3bb50b22-9b46-4662-876d-6bbcdacce005"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Distanciamiento
          de siembra</a>
      </li>
      <li>
        <a href="#/app/detalle/by/5ed945fe-351d-4315-8c46-aeed0b730f4a"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Especies
          potenciales para siembra (Al menos tres opciones)</a>
      </li>
      <li>
        <a href="#/app/detalle/by/77dcb515-3652-4387-8952-9070642aa296"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Estado
          de madurez</a>
      </li>
      <li>
        <a href="#/app/detalle/by/7e60de52-ff90-4ab0-a379-0633bda93618"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Pendiente
          del terreno</a>
      </li>
      <li>
        <a href="#/app/detalle/by/961d1612-d404-4fc0-b951-93552ee10b88"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Poda
          sanitaria</a>
      </li>
      <li>
        <a href="#/app/detalle/by/a6207503-a3bd-460d-8b2c-d9e7360f68cc"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Estado
          fitosanitario</a>
      </li>
      <li>
        <a href="#/app/detalle/by/abe3625e-670d-4c49-851c-2b5c6555d6de"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Recomendaciones
          para manejo silvicultural</a>
      </li>
      <li>
        <a href="#/app/detalle/by/b0bb7f80-7997-4130-9ad4-301101b4f6ea"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Alturas
          potenciales de árboles</a>
      </li>
      <li>
        <a href="#/app/detalle/by/b4f84511-f07a-412e-9fa0-f68180daf435"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Estructuras
          cercanas (Tipo de emplazamiento)</a>
      </li>
      <li>
        <a href="#/app/detalle/by/e2b9fb66-ecc8-45e6-96dc-2bcde2267d76"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Limpieza</a>
      </li>
      <li>
        <a href="#/app/detalle/by/e34711a0-b522-429f-af9b-307c9eead211"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Forma
          de copa</a>
      </li>




      <li>
        <a href="#/app/basictable/Orden"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Orden</a>
      </li>
      <li>
        <a href="#/app/basictable/Familia"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Familia</a>
      </li>
      <li>
        <a href="#/app/basictable/Genero"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Genero</a>
      </li>
      <li>
        <a href="#/app/basictable/Especie"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Especie</a>
      </li>
      <li>
        <a href="#/app/basictable/Comuna"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Comuna</a>
      </li>
      <li>
        <a href="#/app/basictable/Barrio"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Barrio</a>
      </li>
      </app-dropdown-menu>
      </li>
      <li>
        <app-dropdown-menu label="Arborización" [dropdownId]="'002'">
      <li>
        <a *ngIf="menucenso" href="#/app/censo"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Censo
          arboreo</a>
      </li>
      <li>
        <a *ngIf="menuespacios" href="#/app/espacios"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Espacios</a>
      </li>
      </app-dropdown-menu>
      </li>
      <li>
        <app-dropdown-menu label="Actividades Silviculturales" [dropdownId]="'003'">

      <li>
        <a href="#/app/actividades/lista/Siembra"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Actividades
          de Siembra</a>
      </li>
      <li>
        <a href="#/app/actividades/lista/Poda"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Actividades
          de Poda</a>
      </li>
      <li>
        <a href="#/app/actividades/lista/Tala"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Actividades
          de Tala</a>
      </li>
      <li>
        <a href="#/app/actividades/intervenciones/Solicitada"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Actividades
          Solicitada</a>
      </li>
      <li>
        <a href="#/app/actividades/intervenciones/Aprobada"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Actividades
          Aprobada</a>
      </li>
      <li>
        <a href="#/app/actividades/intervenciones/Ejecutada"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Actividades
          Ejecutada</a>
      </li>
      <li>
        <a href="#/app/actividades/intervenciones/Rechazada"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Actividades
          Rechazada</a>
      </li>

      </app-dropdown-menu>
      </li>
      <li>
        <app-dropdown-menu label="Reportes" [dropdownId]="'003'">

          <!-- <li>
        <a  *ngIf="reportes" href="#/app/reportes"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Censo Arboleo</a>
      </li> -->
      <li>
        <a href="#/app/reportes/masreportes"
          class="flex items-center w-full p-2 text-gray-900 transition duration-75 rounded-lg pl-11 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700">Reportes</a>
      </li>
      </app-dropdown-menu>
      </li>

    </ul>
  </div>
</aside>

---------------------------------------
header.component.scss
************
.btn-back {
    display: inline-block;
    margin-right: 16px;
    background-color: #ffcc00;
    border-radius: 5px;
  }
  .btn-back2 {
    display: inline-block;
    margin-right: 16px;
    border-radius: 5px;
  }
  .btn-back:hover {
    box-shadow: 0 4px 8px 0 rgba(255, 255, 255, 0.2);
  }
    
  
---------------------------------------
header.component.ts
************
import { Component, ElementRef, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { AuthUser } from 'src/app/core/models/auth-user.model';
import { TokenService } from 'src/app/core/services/token.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';


@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss']
})
export class HeaderComponent implements OnInit{

  userLogged:string;
  openUserMenu:Boolean = false;
  mostraList: boolean = false;
  menuusuario: boolean = false;
  menuactividades: boolean = false;
  menupermisos: boolean = false;
  menumaestra: boolean = false;
  menuhome: boolean = false;
  menudetalle: boolean = false;
  menumodules: boolean = false;
  menuespacios: boolean = false;
  menubasicTable: boolean = false;
  menucredenciales: boolean = false;
  menuroles: boolean = false;
  menucenso: boolean = false;
  reportes: boolean = false;
  constructor(private tokenService: TokenService,
    private router: Router,
    private elementRef: ElementRef,
    private habilitaracciones: Habilitaracciones){

  }

  showDropdown = false;

  toggleDropdown() {
    this.showDropdown = !this.showDropdown;
  }

  toggleUserMenu()
  {
    console.log(this.openUserMenu)
    this.openUserMenu= !this.openUserMenu;
  }

  ngOnInit(): void {
    this.userLogged = this.tokenService.getTokenUserName();
    document.addEventListener('click', this.handleClickOutside.bind(this));
    //recorremos los modulos
    const resultados = this.habilitaracciones.MostrarBotones('');
    if (resultados.length > 0) {
      resultados.forEach(resultado => {
          if (resultado.module) {
                  
                  switch (resultado.module) {
                    case 'Actividades':
                      this.menuactividades = resultado.listed;
                   
                      break;
                    case 'Maestra':
                      this.menumaestra = resultado.listed;
                      
                      break;
                    case 'Permisos':
                      this.menupermisos= resultado.listed;
                      
                      break;
                    case 'Home':
                      this.menuhome= resultado.listed;
                     
                      break;
                    case 'Detalle':
                      this.menudetalle= resultado.listed;
                      break;
                    case 'Modules':
                      this.menumodules= resultado.listed;
                      
                      break;
                    case 'Espacios':
                      this.menuespacios= resultado.listed;
                    
                      break;
                    case 'Roles':
                      this.menuroles= resultado.listed;
                      
                      break;
                    case 'Usuarios':
                      this.menuusuario = resultado.listed;
                      
                      break;
                    case 'Censo':
                      this.menucenso = resultado.listed;
                     
                      break;
                    case 'Credenciales':
                      this.menucredenciales = resultado.listed;
                    
                      break;
                    case 'BasicTable':
                      this.menubasicTable= resultado.listed;
                     
                      break;
                      case 'Reportes':
                        this.reportes= resultado.listed;
                       
                        break;
                    default:
                    
                      break;
                  }
                
          } 
      });
  }
  }

  SignOut()
  {
    this.tokenService.removeToken();
    this.router.navigate(['/login']);
  }

  handleClickOutside(event: Event) {
    if (
      this.openUserMenu &&
      !this.elementRef.nativeElement.contains(event.target)
    ) {
      // Cerrar el menú si está abierto y se hizo clic fuera de él
      this.openUserMenu = false;
    }
  }

}

---------------------------------------
layout-routing.module.ts
************
import { PermisosModule } from './../modules/permisos/permisos.module';
import { WorkspaceComponent } from './pages/workspace/workspace.component';
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthGuard } from '../core/guards/auth.guard';

const routes: Routes = [
  {
    path: '',
    component: WorkspaceComponent,
    children: [
      {
        path: '',
        redirectTo: 'home',
        pathMatch: 'full'
      },
      {
        path: 'home',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/home/home.module').then((m) => m.HomeModule),
      },
      {
        path: 'reportes',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/reportes/reportes.module').then((m) => m.ReportesModule),
      },
      {
        path: 'usuarios',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/usuarios/usuarios.module').then((m) => m.UsuariosModule),
      },
      {
        path: 'roles',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/roles/roles.module').then((m) => m.RolesModule),
      },
      {
        path: 'modules',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/module/module.module').then((m) => m.ModuleModule),
      },
      {
        path: 'permisos',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/permisos/permisos.module').then((m) => m.PermisosModule),
      },
      {
        path: 'maestra',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/maestra/maestra.module').then((m) => m.MaestraModule),
      },
      {
        path: 'detalle',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/detalle/detalle.module').then((m) => m.DetalleModule),
      },
      {
        path: 'actividades',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/actividadessilviculturales/actividades-silviculturales.module').then((m) => m.ActividadesSilviculturalesModule),
      },
      {
        path: 'censo',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/censoarboreo/censoarboreo.module').then((m) => m.CensoArboreoModule),
      },
      {
        path: 'espacios',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/espaciopotenciales/espaciospotenciales.module').then((m) => m.EspaciosPotencialesModule),
      },

      {
        path: 'basictable',
        canActivate: [ AuthGuard ],
        loadChildren: () =>
          import('../modules/basic-table/basic-table.module').then((m) => m.BasicTableModule),
      }

    ],
  },
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class LayoutRoutingModule { }

---------------------------------------
layout.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { LayoutRoutingModule } from './layout-routing.module';
import { WorkspaceComponent } from './pages/workspace/workspace.component';
import { HeaderComponent } from './components/header/header.component';
import { FooterComponent } from './components/footer/footer.component';
import { DropdownMenuComponent } from './components/dropdown-menu/dropdown-menu.component';


@NgModule({
  declarations: [
    WorkspaceComponent,
    HeaderComponent,
    FooterComponent,
    DropdownMenuComponent
  ],
  imports: [
    CommonModule,
    LayoutRoutingModule
  ]
})
export class LayoutModule { }

---------------------------------------
workspace.component.html
************
<app-header></app-header>

<div class="p-4 sm:ml-64">
  <div class="p-4 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700 mt-14">

    <router-outlet></router-outlet>
  </div>
</div>




---------------------------------------
workspace.component.scss
************

---------------------------------------
workspace.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-workspace',
  templateUrl: './workspace.component.html',
  styleUrls: ['./workspace.component.scss']
})
export class WorkspaceComponent {

}

---------------------------------------
actividades-silviculturales-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { AuthGuard } from 'src/app/core/guards/auth.guard';
import { ListaActividadesSilviculturalesComponent } from './components/lista-actividadessilviculturales/lista-actividadessilviculturales.component';
import { ActividadesSilviculturalesComponent } from './containers/actividadessilviculturales/actividadessilviculturales.component';
import { ListaActividadesSilviculturalesPendientesComponent } from './components/lista-actividadessilviculturalespendientes/lista-actividadessilviculturalespendientes.component';
import { ActividadesSilviculturalesProcesamientoComponent } from './containers/actividadessilviculturalesprocesamiento/actividades-silviculturalesprocesamiento.component';





const routes: Routes = [
  {
    path: 'lista/:tipoActividad',
    canActivate: [ AuthGuard ],
    component: ListaActividadesSilviculturalesComponent
  },
  {
    path: 'intervenciones/:type',
    canActivate: [ AuthGuard ],
    component: ListaActividadesSilviculturalesPendientesComponent
  },
  {
    path: 'procesar/:tipoActividad/:id',
    canActivate: [ AuthGuard ],
    component: ActividadesSilviculturalesProcesamientoComponent
  },


  {
    path: 'create/:tipoActividad',
    canActivate: [ AuthGuard ],
    component: ActividadesSilviculturalesComponent
  },
  {
    path: 'edit/:tipoActividad/:id',
    canActivate: [ AuthGuard ],
    component: ActividadesSilviculturalesComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule,
  ]
})
export class ActividadesSilviculturalesRoutingModule { }

---------------------------------------
actividades-silviculturales.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { ReactiveFormsModule } from '@angular/forms';

import { SharedModule } from 'src/app/shared/shared.module';
import { ActividadesSilviculturalesRoutingModule } from './actividades-silviculturales-routing.module';
import { FormularioActividadesSilviculturalesComponent } from './components/formulario-actividadessilviculturales/formulario-actividadessilviculturales.component';
import { ListaActividadesSilviculturalesComponent } from './components/lista-actividadessilviculturales/lista-actividadessilviculturales.component';
import { ListaActividadesSilviculturalesPendientesComponent } from './components/lista-actividadessilviculturalespendientes/lista-actividadessilviculturalespendientes.component';
import { ProcesamientoActividadesSilviculturalesComponent } from './components/procesamiento-actividadessilviculturales/procesamiento-actividadessilviculturales.component';
import { ActividadesSilviculturalesComponent } from './containers/actividadessilviculturales/actividadessilviculturales.component';
import { ActividadesSilviculturalesProcesamientoComponent } from './containers/actividadessilviculturalesprocesamiento/actividades-silviculturalesprocesamiento.component';
import { CensoArboreoModule } from '../censoarboreo/censoarboreo.module';
import { BuscarArbolNoCampoComponent } from '../censoarboreo/components/buscar-arbol-nocampo/buscar-arbol-nocampo.component';

import { CargarManualActividadesComponent } from '../censoarboreo/components/cargar-manual-actividades/cargar-manual-actividades.component';


@NgModule({
  declarations: [
    ListaActividadesSilviculturalesComponent,
    ListaActividadesSilviculturalesPendientesComponent,
    FormularioActividadesSilviculturalesComponent,
    ActividadesSilviculturalesComponent,
    ActividadesSilviculturalesProcesamientoComponent,
    ProcesamientoActividadesSilviculturalesComponent,
    BuscarArbolNoCampoComponent,
    CargarManualActividadesComponent
  ],
  imports: [
    CommonModule,
    ActividadesSilviculturalesRoutingModule,
    ReactiveFormsModule,
    SharedModule,
    CensoArboreoModule
  ],
  exports : [BuscarArbolNoCampoComponent]
})
export class ActividadesSilviculturalesModule { }

---------------------------------------
formulario-actividadessilviculturales.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Actividades Silviculturales</h1>
</div>
<br>
<form [formGroup]="form" >


  <div class="card mb-2 {{ClassFormGroup}}" *ngIf="isNew">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información Individuo
	  </div>
        <div class="p-6">
          <app-buscar-arbol-nocampo #buscarArbolLista [isActividadPlantula]="isActividadPlantulaBusqueda">

          </app-buscar-arbol-nocampo>
        </div>
      </div>
  </div>
  <div class="card mb-2 {{ClassFormGroup}}" *ngIf="!isNew">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información Individuo
	  </div>
        <div class="p-6">

          <div>
            <label for="idCensoArboreo" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Id individuo:</label>
            <input type="text" formControlName="idCensoArboreo" id="idCensoArboreo" readonly="readonly"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="idCensoArboreo"  />
          </div>

          <div>
            <label for="numeroArbolEnCampo" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Numero de arbol en campo:</label>
            <input type="text" formControlName="numeroArbolEnCampo" id="numeroArbolEnCampo" readonly="readonly"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="numeroArbolEnCampo"  />
          </div>

        </div>
      </div>
  </div>

  <div class="card mb-2 {{ClassFormGroup}}" *ngIf="isSiembra" >
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Siembra
	    </div>
        <div class="p-6">
          <div class="grid gap-6 mb-6 md:grid-cols-4">



            <div>
              <label for="responsable" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Responsable:</label>
              <input type="text" formControlName="responsable" id="responsable"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Responsable" [ngClass]="{
                  required:
                    form.get('responsable').invalid &&
                    form.get('responsable').touched
                }" />
            </div>

            <div>
              <label for="estructurasCercanasTipoEmplazamiento"
                class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Estructuras cercanas (Tipo de
                emplazamiento):</label>

                <ng-select
                  [items]="tipoEmplazamientoList" bindLabel="nombre" bindValue="nombre" formControlName="estructurasCercanasTipoEmplazamiento"
                  placeholder="Estructuras cercanas (Tipo de emplazamiento)"
                  [ngClass]="{required: form.get('estructurasCercanasTipoEmplazamiento').invalid && form.get('estructurasCercanasTipoEmplazamiento').touched}"
                  >
                </ng-select>

            </div>


          </div>
        </div>
      </div>
  </div>


  <div class="card mb-2 {{ClassFormGroup}}" *ngIf="isPoda" >
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Poda
	    </div>
        <div class="p-6">
          <div class="grid gap-6 mb-6 md:grid-cols-4">




            <div>
              <label for="nuevaIntervencion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nueva
                Intervencion:</label>
              <input type="Date" formControlName="nuevaIntervencion" id="nuevaIntervencion"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Nueva Intervencion" [ngClass]="{
                          required: form.get('nuevaIntervencion').invalid && form.get('nuevaIntervencion').touched
                        }" />
            </div>




            <div>
              <label for="podaCorreccion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda de
                Corrección:</label>
              <input type="checkbox" formControlName="podaCorreccion" id="podaCorreccion"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de Corrección" [ngClass]="{
                  required:
                    form.get('podaCorreccion').invalid &&
                    form.get('podaCorreccion').touched
                }" />


            </div>


            <div>
              <label for="podaFormacion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda de
                Formación:</label>
              <input type="checkbox" formControlName="podaFormacion" id="podaFormacion"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de Formación" [ngClass]="{
                  required:
                    form.get('podaFormacion').invalid &&
                    form.get('podaFormacion').touched
                }" />
            </div>


            <div>
              <label for="podaRealceR" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda de
                realce - R:</label>
              <input type="checkbox" formControlName="podaRealceR" id="podaRealceR"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de realce - R"
                [ngClass]="{'required': form.get('podaRealceR').invalid && form.get('podaRealceR').touched}">
            </div>
            <div>
              <label for="podaEstabilidadE" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda
                de estabilidad - E:</label>
              <input type="checkbox" formControlName="podaEstabilidadE" id="podaEstabilidadE"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de estabilidad - E"
                [ngClass]="{'required': form.get('podaEstabilidadE').invalid && form.get('podaEstabilidadE').touched}">
            </div>
            <div>
              <label for="podaMantenimientoM" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda
                de mantenimiento -M:</label>
              <input type="checkbox" formControlName="podaMantenimientoM" id="podaMantenimientoM"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de mantenimiento -M"
                [ngClass]="{'required': form.get('podaMantenimientoM').invalid && form.get('podaMantenimientoM').touched}">
            </div>

            <div>
              <label for="cortesNuevos" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cortes
                nuevos:</label>
              <input type="checkbox" formControlName="cortesNuevos" id="cortesNuevos"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Cortes nuevos"
                [ngClass]="{'required': form.get('cortesNuevos').invalid && form.get('cortesNuevos').touched}">
            </div>
            <div>
              <label for="cortesViejos" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cortes
                viejos:</label>
              <input type="checkbox" formControlName="cortesViejos" id="cortesViejos"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Cortes viejos"
                [ngClass]="{'required': form.get('cortesViejos').invalid && form.get('cortesViejos').touched}">
            </div>
            <div>
              <label for="cortesEnfermos" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cortes
                enfermos:</label>
              <input type="checkbox" formControlName="cortesEnfermos" id="cortesEnfermos"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Cortes enfermos"
                [ngClass]="{'required': form.get('cortesEnfermos').invalid && form.get('cortesEnfermos').touched}">
            </div>
            <div>
              <label for="podaRaices" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda de
                raíces:</label>
              <input type="checkbox" formControlName="podaRaices" id="podaRaices"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de raíces"
                [ngClass]="{'required': form.get('podaRaices').invalid && form.get('podaRaices').touched}">
            </div>



            <div>
              <label for="limpieza"
                class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Limpieza:</label>


                <ng-select
                  [items]="limpiezaList" bindLabel="nombre" bindValue="nombre" formControlName="limpieza"
                  placeholder="Limpieza"
                  [ngClass]="{required: form.get('limpieza').invalid && form.get('limpieza').touched}"
                  >
                </ng-select>

            </div>




            <div>
              <label for="podaSanitaria" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda
                sanitaria:</label>

                <ng-select
                  [items]="podaSanitariaList" bindLabel="nombre" bindValue="nombre" formControlName="podaSanitaria"
                  placeholder="Poda Sanitaria"
                  [ngClass]="{required: form.get('podaSanitaria').invalid && form.get('podaSanitaria').touched}"
                  >
                </ng-select>

            </div>



            <div>
              <label for="inmediataI" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Inmediata
                -I:</label>
              <input type="checkbox" formControlName="inmediataI" id="inmediataI"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Inmediata -I"
                [ngClass]="{'required': form.get('inmediataI').invalid && form.get('inmediataI').touched}">
            </div>
            <div>
              <label for="cortoPlazoC" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">corto plazo
                -C:</label>
              <input type="checkbox" formControlName="cortoPlazoC" id="cortoPlazoC"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="corto plazo -C"
                [ngClass]="{'required': form.get('cortoPlazoC').invalid && form.get('cortoPlazoC').touched}">
            </div>
            <div>
              <label for="largoPlazoL" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">largo plazo
                - L:</label>
              <input type="checkbox" formControlName="largoPlazoL" id="largoPlazoL"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="largo plazo - L"
                [ngClass]="{'required': form.get('largoPlazoL').invalid && form.get('largoPlazoL').touched}">
            </div>
            <div>
              <label for="trasplante"
                class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Trasplante:</label>
              <input type="checkbox" formControlName="trasplante" id="trasplante"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Trasplante"
                [ngClass]="{'required': form.get('trasplante').invalid && form.get('trasplante').touched}">
            </div>







          </div>
        </div>
      </div>
  </div>


  <div class="card mb-2 {{ClassFormGroup}}" *ngIf="isTala" >
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Tala
	    </div>
        <div class="p-6">
          <div class="grid gap-6 mb-6 md:grid-cols-4">


            <div>
              <label for="numAutorizationCdmb" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Num. Autorization CDMB</label>
              <input type="text" formControlName="numAutorizationCdmb" id="numAutorizationCdmb"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Num. Autorization CDMB" [ngClass]="{
                  required:
                    form.get('numAutorizationCdmb').invalid &&
                    form.get('numAutorizationCdmb').touched
                }" />
            </div>

            <div>
              <label for="usoDeMadera" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Uso de la madera:</label>
              <input type="text" formControlName="usoDeMadera" id="usoDeMadera"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Uso de la madera" [ngClass]="{
                  required:
                    form.get('usoDeMadera').invalid &&
                    form.get('usoDeMadera').touched
                }" />
            </div>


            <div>
              <label for="expedicionPermiso" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nueva
                Intervencion:</label>
              <input type="Date" formControlName="expedicionPermiso" id="expedicionPermiso"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Nueva Intervencion" [ngClass]="{
                          required: form.get('expedicionPermiso').invalid && form.get('expedicionPermiso').touched
                        }" />
            </div>



          </div>
        </div>
      </div>
  </div>



  <div class="card mb-2 {{ClassFormGroup}}">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del actividades silviculturales
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">

          <div>
            <label for="actor" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Actor:</label>
            <input type="text" formControlName="actor" id="actor"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Actor" [ngClass]="{
                required:
                  form.get('actor').invalid &&
                  form.get('actor').touched
              }" />
          </div>


          <div>
            <label for="operador" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Operador:</label>
            <input type="text" formControlName="operador" id="operador"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Operador" [ngClass]="{
                required:
                  form.get('operador').invalid &&
                  form.get('operador').touched
              }" />
          </div>



          <div>
            <label for="observacion"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Observación:</label>

              <textarea type="text" formControlName="observacion" id="observacion"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Observación"
              [ngClass]="{'required': form.get('observacion').invalid && form.get('observacion').touched}">
            </textarea>

          </div>

          <div>
            <label for="estado" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Estado:</label>
            <input type="text" formControlName="estado" id="estado" readonly="readonly"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Estado" [ngClass]="{'required': form.get('estado').invalid && form.get('estado').touched}">
          </div>


        </div>
      </div>
    </div>
  </div>

  <div class="card mb-2 {{ClassFormGroup}}">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Foto Antes
	  </div>
        <div class="p-6">
          <app-registrofotografico #registroFotograficoAntes [dataForm]="onlyRegistroFotograficoAntes" [multiple] ="isMultipleMode"></app-registrofotografico>
        </div>
      </div>
  </div>

  <div class="card mb-2 {{ClassFormGroup}}">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Foto Durante
	  </div>
        <div class="p-6">
          <app-registrofotografico #registroFotograficoDurante [dataForm]="onlyRegistroFotograficoDurante" [maxFotos] ="2"></app-registrofotografico>
        </div>
      </div>
  </div>

  <div class="card mb-2 {{ClassFormGroup}}">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Foto despues
	  </div>
        <div class="p-6">
          <app-registrofotografico #registroFotograficoDespues [dataForm]="onlyRegistroFotograficoDespues" [multiple]="isMultipleMode"></app-registrofotografico>
        </div>
      </div>
  </div>

  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el actividades silviculturales.
  </div>
  <div *ngIf="isFormInValid" class="alert alert-danger" role="alert">
    Hay campos que faltan por llenar.
   </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br>
  <div class="flex justify-end space-x-4 {{ClassFormGroup}}">

    <app-btn *ngIf="!isNew && mostraDelete " typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
      (click)="mostrarConfirmacion()">Borrar</app-btn>

    <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Guardar()">Guardar</app-btn>

    <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Actualizar()">Actualizar</app-btn>
  </div>

</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>

---------------------------------------
formulario-actividadessilviculturales.component.scss
************


.disabled-div {
    pointer-events: none; /* Evita eventos de ratón y teclado */
    opacity: 0.6; /* Reduce la opacidad para indicar que está deshabilitado */
    background-color: #eee; /* Cambia el color de fondo para indicar deshabilitación */
    /* Otros estilos de deshabilitación */
  }
---------------------------------------
formulario-actividadessilviculturales.component.ts
************
import { formatDate } from '@angular/common';
import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Params } from '@angular/router';
import { ActividadesSilviculturalesDto, Estado } from 'src/app/core/models/actividadessilviculturales-dto.model';
import { CensoArboreoDto, RegistroFotograficoCensoDto } from 'src/app/core/models/censoarboreo-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import { BuscarArbolNoCampoComponent } from 'src/app/modules/censoarboreo/components/buscar-arbol-nocampo/buscar-arbol-nocampo.component';
import { RegistroFotograficoComponent } from 'src/app/modules/sharedcomponent/registrofotografico/registrofotografico.component';

import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
import { DetalleService } from 'src/app/core/services/detalle.service';
import { MaestraDetalleCombo } from 'src/app/core/models/maestradetalle.mode';
import { DetalleDto } from 'src/app/core/models/detalle-dto.model';
@Component({
  selector: 'app-formulario-actividadesSilviculturales',
  templateUrl: './formulario-actividadesSilviculturales.component.html',
  styleUrls: ['./formulario-actividadesSilviculturales.component.scss'],
})
export class FormularioActividadesSilviculturalesComponent implements OnInit {
  statusDetail: RequestStatus = 'init';
  form: FormGroup;
  isNew: boolean = false;
  userNameRequired: boolean = false;
  passwordRequired: boolean = false;
  actividadessilviculturalesDto: ActividadesSilviculturalesDto;
  individuoSeleccionado: CensoArboreoDto = null;
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  isMultipleMode: boolean = false;
  tipoActividad: string = '';

  isSiembra: boolean = false;
  isPoda: boolean = false;
  isTala: boolean = false;

  isActividadPlantulaBusqueda : boolean = false;

  limpiezaList : DetalleDto[];
  podaSanitariaList : DetalleDto[];
  tipoEmplazamientoList : DetalleDto[];

  onlyRegistroFotograficoAntes: RegistroFotograficoCensoDto[] =
    new Array<RegistroFotograficoCensoDto>();

  onlyRegistroFotograficoDurante: RegistroFotograficoCensoDto[] =
    new Array<RegistroFotograficoCensoDto>();

  onlyRegistroFotograficoDespues: RegistroFotograficoCensoDto[] =
    new Array<RegistroFotograficoCensoDto>();

    ClassFormGroup: string = "";
    //ClassFormGroup: string = "borde-rojo";

  @ViewChild('buscarArbolLista')
  buscarArbolLista: BuscarArbolNoCampoComponent;

  @ViewChild('registroFotograficoAntes')
  registroFotograficoAntes: RegistroFotograficoComponent;

  @ViewChild('registroFotograficoDurante')
  registroFotograficoDurante: RegistroFotograficoComponent;

  @ViewChild('registroFotograficoDespues')
  registroFotograficoDespues: RegistroFotograficoComponent;

  @Input()
  set dataForm(data: ActividadesSilviculturalesDto) {
    console.log(data);
    if (data) {
      this.isNew = false;

      this.form.patchValue(data);

      if (data.nuevaIntervencion) {
        const fechaCorteString = formatDate(
          data.nuevaIntervencion,
          'yyyy-MM-dd',
          'en-US'
        );
        this.form.patchValue({ nuevaIntervencion: fechaCorteString });
      }

      if (data.expedicionPermiso) {
        const fechaCorteString = formatDate(
          data.expedicionPermiso,
          'yyyy-MM-dd',
          'en-US'
        );
        this.form.patchValue({ expedicionPermiso: fechaCorteString });
      }

      let estadoLocal = Number(data.estado);
      let estadoString = this.translateStateIntToString(estadoLocal);
      if(estadoLocal != 0) {
        this.ClassFormGroup = "disabled-div";
      }
      this.form.patchValue({ estado: estadoString });
      this.form.markAllAsTouched();
      this.actividadessilviculturalesDto = data;

      let fotosAntes = new RegistroFotograficoCensoDto();
      fotosAntes.nombre = data.fotoAntes;
      this.onlyRegistroFotograficoAntes.push(fotosAntes);

      
      ;
      if(data.fotoDuranteUno) {
        let fotosDuranteUno = new RegistroFotograficoCensoDto();
        fotosDuranteUno.nombre = data.fotoDuranteUno;
        this.onlyRegistroFotograficoDurante.push(fotosDuranteUno);
      }
      if(data.fotoDuranteDos) {
        let fotosDuranteDos = new RegistroFotograficoCensoDto();
        fotosDuranteDos.nombre = data.fotoDuranteDos;
        this.onlyRegistroFotograficoDurante.push(fotosDuranteDos);
      }



      let fotosDespues = new RegistroFotograficoCensoDto();
      fotosDespues.nombre = data.fotoDespues;
      this.onlyRegistroFotograficoDespues.push(fotosDespues);


    } else {
      this.isNew = true;
      this.actividadessilviculturalesDto = new ActividadesSilviculturalesDto();
      this.form.patchValue({ estado: Estado.Solicitada.toString() });
    }
  }
  @Input()
  set status(data: RequestStatus) {
    if (data) {
      this.statusDetail = data;
    }
  }

  @Output() create = new EventEmitter();
  @Output() update = new EventEmitter();
  @Output() delete = new EventEmitter();

  constructor(
    private formbuilder: FormBuilder,
    private habilitaracciones: Habilitaracciones,
    private sweetAlertService: SweetAlertService,
    private activatedRoute: ActivatedRoute,
    private detallesService: DetalleService,
  ) {
    this.loadNgSelectData();
    this.activatedRoute.params.subscribe((params: Params) => {
      this.tipoActividad = params['tipoActividad'];

      if (this.tipoActividad) {
        if (this.tipoActividad == 'Siembra') {
          this.isSiembra = true;
          this.isActividadPlantulaBusqueda = true;
        } else if (this.tipoActividad == 'Poda') {
          this.isPoda = true;
          
        } else if (this.tipoActividad == 'Tala') {
          this.isTala = true;
        }
        this.BuildForm(this.tipoActividad);
      }
    });
  }

  loadNgSelectData() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.Limpieza).subscribe(
      result => {
        this.limpiezaList = result.data
        this.statusDetail = 'init';
      }
    );
    this.detallesService.getByMaestra(MaestraDetalleCombo.PodaSanitaria).subscribe(
      result => {
        this.podaSanitariaList = result.data
        this.statusDetail = 'init';
      }
    );
    this.detallesService.getByMaestra(MaestraDetalleCombo.TipoEmplazamiento).subscribe(
      result => {
        this.tipoEmplazamientoList = result.data
        this.statusDetail = 'init';
      }
    );
  }


  ngOnInit(): void {
    const resultados = this.habilitaracciones.MostrarBotones('Actividades');

    if (resultados.length > 0) {
      resultados.forEach((resultado) => {
        this.mostraDelete = resultado.eliminar;
        this.mostraUpdate = resultado.editar;
      });
    }
  }

  /*selected(individuo)
  {
    this.individuoSeleccionado = individuo;
    this.form.patchValue({idCensoArboreo: individuo.id});
  }*/

  private BuildForm(tipoActividad: string) {
    if (tipoActividad == 'Siembra') {
      this.form = this.formbuilder.group({
        responsable: ['', [Validators.required]],
        actor: ['', [Validators.required]],
        operador: ['', [Validators.required]],

        podaRealceR: [false, []],
        podaEstabilidadE: [false, []],
        podaMantenimientoM: [false, []],
        cortesNuevos: [false, []],
        cortesViejos: [false, []],
        cortesEnfermos: [false, []],
        podaRaices: [false, []],
        estructurasCercanasTipoEmplazamiento: ['', []],
        limpieza: ['', []],
        podaSanitaria: ['', []],
        inmediataI: [false, []],
        cortoPlazoC: [false, []],
        largoPlazoL: [false, []],
        trasplante: [false, []],
        observacion: ['', [Validators.required]],
        estado: ['', []],
        idCensoArboreo: ['00000000-0000-0000-0000-000000000000', []],
        numeroArbolEnCampo: ['', []],
      });
    } else if (tipoActividad == 'Poda') {
      this.form = this.formbuilder.group({
        actor: ['', [Validators.required]],
        operador: ['', [Validators.required]],

        nuevaIntervencion: ['', [Validators.required]],
        podaCorreccion: [false, []],
        podaFormacion: [false, []],

        //responsable:['', [Validators.required]],

        podaRealceR: [false, []],
        podaEstabilidadE: [false, []],
        podaMantenimientoM: [false, []],
        cortesNuevos: [false, []],
        cortesViejos: [false, []],
        cortesEnfermos: [false, []],
        podaRaices: [false, []],
        //estructurasCercanasTipoEmplazamiento: ['', [Validators.required]],
        limpieza: ['', [Validators.required]],
        podaSanitaria: ['', [Validators.required]],
        inmediataI: [false, []],
        cortoPlazoC: [false, []],
        largoPlazoL: [false, []],
        trasplante: [false, []],
        observacion: ['', [Validators.required]],
        estado: ['', []],
        idCensoArboreo: ['00000000-0000-0000-0000-000000000000', []],
        numeroArbolEnCampo: ['', []],
      });
    } else if (tipoActividad == 'Tala') {
      this.form = this.formbuilder.group({

        actor: ['', [Validators.required]],
        operador: ['', [Validators.required]],

        numAutorizationCdmb: ['', [Validators.required]],
        usoDeMadera: ['', [Validators.required]],
        expedicionPermiso: ['', [Validators.required]],

        //responsable:['', [Validators.required]],

        podaRealceR: [false, []],
        podaEstabilidadE: [false, []],
        podaMantenimientoM: [false, []],
        cortesNuevos: [false, []],
        cortesViejos: [false, []],
        cortesEnfermos: [false, []],
        podaRaices: [false, []],
        estructurasCercanasTipoEmplazamiento: ['', []],
        limpieza: ['', []],
        podaSanitaria: ['', []],
        inmediataI: [false, []],
        cortoPlazoC: [false, []],
        largoPlazoL: [false, []],
        trasplante: [false, []],
        observacion: ['', [Validators.required]],
        estado: ['', []],
        idCensoArboreo: ['00000000-0000-0000-0000-000000000000', []],
        numeroArbolEnCampo: ['', []],
      });
    }
  }

  Guardar() {
    ;
    if (
      this.form.invalid ||
      this.buscarArbolLista.getCrossBuscarArbol().length == 0
    ) {
      this.form.markAllAsTouched();
      return;
    }

    ///%%%%%%%%%
    this.form.value['isSiembra'] = this.isSiembra;
    this.form.value['isPoda'] = this.isPoda;
    this.form.value['isTala'] = this.isTala;

    

    const formData = new FormData();

    const filesAntes = this.registroFotograficoAntes.getFilesLoaded();
    for (let i = 0; i < filesAntes.length; i++) {
      formData.append('files', filesAntes[i]);
    }

    const filesDurante = this.registroFotograficoDurante.getFilesLoaded();
    for (let i = 0; i < filesDurante.length; i++) {
      formData.append('files', filesDurante[i]);
    }

    const filesDespues = this.registroFotograficoDespues.getFilesLoaded();
    for (let i = 0; i < filesDespues.length; i++) {
      formData.append('files', filesDespues[i]);
    }


    let whichOne: string[] = new Array<string>();
    let rotationAntes = this.registroFotograficoAntes.getRotationLoaded();
    if(rotationAntes.rotation.length != 0) {
      whichOne.push("FotoAntes");
    }

    let rotationDurante = this.registroFotograficoDurante.getRotationLoaded();
    ;
    if(rotationDurante.rotation.length != 0) {
      rotationAntes.rotation.push(rotationDurante.rotation[0]);
      whichOne.push("FotoDuranteUno");
      if(rotationDurante.rotation.length > 1) {
        rotationAntes.rotation.push(rotationDurante.rotation[1]);
        whichOne.push("FotoDuranteDos");
      }
    }


    let rotationDespues = this.registroFotograficoDespues.getRotationLoaded();
    if(rotationDespues.rotation.length != 0){
      whichOne.push("FotoDespues");
      rotationAntes.rotation.push(rotationDespues.rotation[0]);
    }

    let infoFotos = {
      'rotation'  : rotationAntes.rotation,
      'destino' : whichOne
    };
    formData.append('fullobject', JSON.stringify(this.form.value));
    formData.append('infofotos', JSON.stringify(infoFotos));
    formData.append(
      'multi',
      JSON.stringify(this.buscarArbolLista.getCrossBuscarArbol())
    );
    formData.append('skip', JSON.stringify(false));

    this.create.emit(formData);
  }

  Actualizar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }

    

    this.form.value['isSiembra'] = this.isSiembra;
    this.form.value['isPoda'] = this.isPoda;
    this.form.value['isTala'] = this.isTala;

    

    const formData = new FormData();

    const filesAntes = this.registroFotograficoAntes.getFilesLoaded();
    for (let i = 0; i < filesAntes.length; i++) {
      formData.append('files', filesAntes[i]);
    }

    const filesDurante = this.registroFotograficoDurante.getFilesLoaded();
    for (let i = 0; i < filesDurante.length; i++) {
      formData.append('files', filesDurante[i]);
    }

    const filesDespues = this.registroFotograficoDespues.getFilesLoaded();
    for (let i = 0; i < filesDespues.length; i++) {
      formData.append('files', filesDespues[i]);
    }


    let whichOne: string[] = new Array<string>();
    let rotationAntes = this.registroFotograficoAntes.getRotationLoaded();

    ;
    if(this.registroFotograficoAntes.getCurrentFotos().length == 0) {
      this.form["fotoAntes"] = null;
    } else {
      this.form.value["fotoAntes"] = this.actividadessilviculturalesDto.fotoAntes;
      
    }

    if(rotationAntes.rotation.length != 0) {
      whichOne.push("FotoAntes");
    }

    let rotationDurante = this.registroFotograficoDurante.getRotationLoaded();


    if(this.registroFotograficoDurante.getCurrentFotos().length == 0) {
      this.form["fotoDuranteUno"] = null;
      this.form["fotoDuranteDos"] = null;
    } else {
      if(this.registroFotograficoDurante.getCurrentFotos().length == 1) {
        this.form.value["fotoDuranteUno"] = this.actividadessilviculturalesDto.fotoDuranteUno;
        this.form.value["fotoDuranteDos"] = null;
      } else {
        this.form.value["fotoDuranteUno"] = this.actividadessilviculturalesDto.fotoDuranteUno;
        this.form.value["fotoDuranteDos"] = this.actividadessilviculturalesDto.fotoDuranteDos;
      }
    }

    
    if(rotationDurante.rotation.length != 0) {
      rotationAntes.rotation.push(rotationDurante.rotation[0]);
      whichOne.push("FotoDuranteUno");
      if(rotationDurante.rotation.length > 1) {
        rotationAntes.rotation.push(rotationDurante.rotation[1]);
        whichOne.push("FotoDuranteDos");
      }
    }


    let rotationDespues = this.registroFotograficoDespues.getRotationLoaded();

    if(this.registroFotograficoDespues.getCurrentFotos().length == 0) {
      this.form.value["fotoDespues"] = null;
    } else {
      this.form.value["fotoDespues"] = this.actividadessilviculturalesDto.fotoDespues;
    }

    if(rotationDespues.rotation.length != 0){
      whichOne.push("FotoDespues");
      rotationAntes.rotation.push(rotationDespues.rotation[0]);
    }



    let infoFotos = {
      'rotation'  : rotationAntes.rotation,
      'destino' : whichOne
    };

    formData.append('fullobject', JSON.stringify(this.form.value));
    formData.append('infofotos', JSON.stringify(infoFotos));
    //formData.append('multi', JSON.stringify(this.buscarArbolLista.getCrossBuscarArbol()));   

    this.update.emit(formData);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del actividadessilviculturales';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(
      TitleUp,
      TitleDonw,
      () => {
        //ejecuto el llamado a la funcion Borrar
        this.Borrar();
      },
      () => {
        //en caso de usar cancelacion
      }
    );
  }

  Borrar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit();
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
    return {
      get: () => this.form.get(name),
      isValid: () => this.form.get(name).touched && this.form.get(name).valid,
    };
  }

  public translateStateIntToString(estado: number): string {
    switch (estado) {
      case 0:
        return 'Solicitada';
        break;
      case 1:
        return 'Aprobada';
        break;
      case 2:
        return 'Rechazada';
        break;
      case 3:
        return 'Ejecutada';
        break;
      default:
        return 'EMPTY';
        break;
    }
  }
}

---------------------------------------
lista-actividadessilviculturales.component.html
************
<div class="flex justify-between items-center mb-4">
  <h1 class="text-lg font-semibold">Actividades Silviculturales - {{tipoActividad}}</h1>
  <div class="flex items-center space-x-2">
    <app-cargar-manual-actividades></app-cargar-manual-actividades>
         <app-btn (click)="Descargar()" typeBtn="submit" color="green" [customIcon]="'faShareFromSquare'" >Descargar Actividades</app-btn>      
        <app-btn *ngIf="mostrarCreate" typeBtn="submit" color="primary"  [customIcon]="'faPlus'" [routerLink]="routeAdd">Agregar</app-btn>      
      </div>
 </div>

<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50" type="text" />
    </div>
  </div>
</form>

  <p-table   [value]="dataList"
  [paginator]="true"
  [rows]="this.pageSize"
  [showCurrentPageReport]="true"
  [tableStyle]="{ 'min-width': '50rem' }"
  [lazy]="true"
  [totalRecords]="collectionSize" (onLazyLoad)="refreshGrid($event)"
  [rowsPerPageOptions]="[5, 10, 15, 20]">
    <ng-template pTemplate="header">
        <tr class="bg-gray-50">
          

          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda de realce - R</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda de estabilidad - E</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda de mantenimiento -M</th>
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cortes nuevos</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cortes viejos</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cortes enfermos</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda de raíces</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estructuras cercanas (Tipo de emplazamiento)</th>
          
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Limpieza</th>
          
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda sanitaria</th>
          
          
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Inmediata -I</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">corto plazo -C</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">largo plazo - L</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trasplante</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Observación</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
          


            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
        </tr>
    </ng-template>
    <ng-template pTemplate="body" let-rowData let-rowIndex="rowIndex">
        <tr [class.bg-gray-200]="rowIndex % 2 === 0">
          

          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaRealceR}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaEstabilidadE}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaMantenimientoM}}</td>
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cortesNuevos}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cortesViejos}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cortesEnfermos}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaRaices}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.estructurasCercanasTipoEmplazamiento}}</td>
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.limpieza}}</td>
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaSanitaria}}</td>
          
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.inmediataI}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cortoPlazoC}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.largoPlazoL}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.trasplante}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.observacion}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{translateStateIntToString(rowData.estado)}} </td>
          
            <td class="px-6 py-4 whitespace-nowrap w-64">
                <a [routerLink]="[editPath, rowData.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
            </td>
        </tr>
    </ng-template>
  </p-table>


---------------------------------------
lista-actividadessilviculturales.component.scss
************

---------------------------------------
lista-actividadessilviculturales.component.ts
************
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Params } from '@angular/router';
import { ActividadesSilviculturalesDto, Estado } from 'src/app/core/models/actividadessilviculturales-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';

import { ActividadesSilviculturalesService } from 'src/app/core/services/actividadessilviculturales.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';

@Component({
  selector: 'app-lista-actividadesSilviculturales',
  templateUrl: './lista-actividadesSilviculturales.component.html',
  styleUrls: ['./lista-actividadesSilviculturales.component.scss']
})
export class ListaActividadesSilviculturalesComponent implements OnInit {

  dataList: ActividadesSilviculturalesDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  tipoActividad : string;
  editPath : string;
  isSiembra: boolean = false;
  isPoda: boolean = false;
  isTala: boolean = false;
  mostrarCreate: boolean = false;

  routeAdd : string = "/app/actividades/create/";

  constructor(private formbuilder: FormBuilder,
    private actividadessilviculturalesService: ActividadesSilviculturalesService,
    private activatedRoute: ActivatedRoute,
    private habilitaracciones: Habilitaracciones
    ) {
    
    

  }

  ngOnInit(): void {

    this.activatedRoute.params.subscribe((params: Params) => {
      ;
      this.tipoActividad = params['tipoActividad'];
      this.routeAdd = "/app/actividades/create/" + this.tipoActividad;
      this.editPath = '/app/actividades/edit/'+ this.tipoActividad + "/";
    const resultados = this.habilitaracciones.MostrarBotones('Actividades');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostrarCreate=resultado.editar;
            
        });
    }

    

      this.isSiembra = false;
      this.isPoda = false;
      this.isTala = false;
      if(this.tipoActividad == "Siembra"){
        this.isSiembra = true;
      } else if(this.tipoActividad == "Poda"){
        this.isPoda = true;
      } else if(this.tipoActividad == "Tala"){
        this.isTala = true;
      }

      this.BuildForm();
      this.getCredentials();
    });

    
    

  }

  private getCredentials() {
    
    this.actividadessilviculturalesService.getListaBySiembraPodaTala(this.isSiembra,this.isPoda,this.isTala, this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';

      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.actividadessilviculturalesService.getListaBySiembraPodaTala(this.isSiembra,this.isPoda,this.isTala,this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.actividadessilviculturalesService.getListaBySiembraPodaTala(this.isSiembra,this.isPoda,this.isTala,this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }


  Descargar() {
    this.statusDetail = 'loading';
    console.log("descargar")
    this.actividadessilviculturalesService.getDescargas().subscribe(
      response => {
        this.statusDetail = 'init';
        this.downloadFile(response);
      },
      error => {
        console.error('Download error:', error);
        this.statusDetail = 'error';
      }
    );
  }

  private downloadFile(data: Blob) {
    const blob = new Blob([data], { type: 'text/csv; charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = 'actividades.csv';  // El nombre del archivo que se descargará.
    anchor.click();

    // Cleanup
    window.URL.revokeObjectURL(url);
  }

  public translateStateIntToString(estado: number): string {
    switch (estado) {
      case 0:
        return 'Solicitada';
        break;
      case 1:
        return 'Aprobada';
        break;
      case 2:
        return 'Rechazada';
        break;
      case 3:
        return 'Ejecutada';
        break;
      default:
        return 'EMPTY';
        break;
    }
  }

  
}

---------------------------------------
lista-actividadessilviculturalespendientes.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Actividades Silviculturales - {{type}}</h1>
  <div class="flex items-center space-x-2">
  <app-btn (click)="Descargar()" typeBtn="submit" color="green" [customIcon]="'faShareFromSquare'" >Descargar Actividades</app-btn>
  <app-cargar-manual-actividades></app-cargar-manual-actividades>
</div>
</div>
<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50" type="text" />
    </div>
  </div>
</form>

  <p-table   [value]="dataList"
  [paginator]="true"
  [rows]="this.pageSize"
  [showCurrentPageReport]="true"
  [tableStyle]="{ 'min-width': '50rem' }"
  [lazy]="true"
  [totalRecords]="collectionSize" (onLazyLoad)="refreshGrid($event)"
  [rowsPerPageOptions]="[5, 10, 15, 20]">
    <ng-template pTemplate="header">
        <tr class="bg-gray-50">
          

          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda de realce - R</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda de estabilidad - E</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda de mantenimiento -M</th>
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cortes nuevos</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cortes viejos</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cortes enfermos</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda de raíces</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estructuras cercanas (Tipo de emplazamiento)</th>
          
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Limpieza</th>
          
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Poda sanitaria</th>
          
          
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Inmediata -I</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">corto plazo -C</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">largo plazo - L</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trasplante</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Observación</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>
          


            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
        </tr>
    </ng-template>
    <ng-template pTemplate="body" let-rowData let-rowIndex="rowIndex">
        <tr [class.bg-gray-200]="rowIndex % 2 === 0">
          

          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaRealceR}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaEstabilidadE}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaMantenimientoM}}</td>
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cortesNuevos}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cortesViejos}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cortesEnfermos}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaRaices}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.estructurasCercanasTipoEmplazamiento}}</td>
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.limpieza}}</td>
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.podaSanitaria}}</td>
          
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.inmediataI}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cortoPlazoC}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.largoPlazoL}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.trasplante}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.observacion}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{translateStateIntToString(rowData.estado)}}</td>
          
            <td class="px-6 py-4 whitespace-nowrap w-64">
                <a *ngIf="rowData.isSiembra" [routerLink]="['/app/actividades/procesar/Siembra', rowData.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Ver Siembra</a>
                <a *ngIf="rowData.isPoda" [routerLink]="['/app/actividades/procesar/Poda', rowData.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Ver Poda</a>
                <a *ngIf="rowData.isTala" [routerLink]="['/app/actividades/procesar/Tala', rowData.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Ver Tala</a>
            </td>
        </tr>
    </ng-template>
  </p-table>


---------------------------------------
lista-actividadessilviculturalespendientes.component.scss
************

---------------------------------------
lista-actividadessilviculturalespendientes.component.ts
************
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Params } from '@angular/router';
import { ActividadesSilviculturalesDto, Estado } from 'src/app/core/models/actividadessilviculturales-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';

import { ActividadesSilviculturalesService } from 'src/app/core/services/actividadessilviculturales.service';


@Component({
  selector: 'app-lista-actividadesSilviculturalespendientes',
  templateUrl: './lista-actividadesSilviculturalespendientes.component.html',
  styleUrls: ['./lista-actividadesSilviculturalespendientes.component.scss']
})
export class ListaActividadesSilviculturalesPendientesComponent implements OnInit {

  type : string;
  dataList: ActividadesSilviculturalesDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';


  constructor(private activatedRoute: ActivatedRoute,
    private formbuilder: FormBuilder,
    private actividadessilviculturalesService: ActividadesSilviculturalesService) {

  }

  ngOnInit(): void {
    
    this.activatedRoute.params.subscribe((params: Params) => {
      
      this.type = params['type'];
      this.BuildForm();
      this.getCredentials();
    });
    

  }

  private getCredentials() {
    this.actividadessilviculturalesService.getByType(this.filterField, this.page, this.pageSize,this.type).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';

      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.actividadessilviculturalesService.getByType(this.filterField, this.page, this.pageSize,this.type).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.actividadessilviculturalesService.getByType(this.filterField, this.page, this.pageSize,this.type).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }

  Descargar() {
    this.statusDetail = 'loading';
    console.log("descargar")
    this.actividadessilviculturalesService.getDescargas().subscribe(
      response => {
        this.statusDetail = 'init';
        this.downloadFile(response);
      },
      error => {
        console.error('Download error:', error);
        this.statusDetail = 'error';
      }
    );
  }

  private downloadFile(data: Blob) {
    const blob = new Blob([data], { type: 'text/csv; charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = 'actividades.csv';  // El nombre del archivo que se descargará.
    anchor.click();

    // Cleanup
    window.URL.revokeObjectURL(url);
  }

  public translateStateIntToString(estado: number): string {
    switch (estado) {
      case 0:
        return 'Solicitada';
        break;
      case 1:
        return 'Aprobada';
        break;
      case 2:
        return 'Rechazada';
        break;
      case 3:
        return 'Ejecutada';
        break;
      default:
        return 'EMPTY';
        break;
    }
  }
}

---------------------------------------
procesamiento-actividadessilviculturales.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Actividades Silviculturales - {{tipoActividad}}</h1>
</div>
<br>
<form [formGroup]="form" >

  <div class="card mb-2 disabled-div" *ngIf="!isNew">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información Individuo
	  </div>
        <div class="p-6">

          <div>
            <label for="idCensoArboreo" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Id individuo:</label>
            <input type="text" formControlName="idCensoArboreo" id="idCensoArboreo" readonly="readonly"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="idCensoArboreo"  />
          </div>
          <div>
            <label for="numeroArbolEnCampo" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Numero de arbol en campo:</label>
            <input type="text" formControlName="numeroArbolEnCampo" id="numeroArbolEnCampo" readonly="readonly"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="numeroArbolEnCampo"  />
          </div>

        </div>
      </div>
  </div>

  <div class="card mb-2 disabled-div" *ngIf="isSiembra" >
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Siembra
	    </div>
        <div class="p-6">
          <div class="grid gap-6 mb-6 md:grid-cols-4">



            <div>
              <label for="responsable" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Responsable:</label>
              <input type="text" formControlName="responsable" id="responsable"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Responsable" [ngClass]="{
                  required:
                    form.get('responsable').invalid &&
                    form.get('responsable').touched
                }" />
            </div>
            <div>
              <label for="estructurasCercanasTipoEmplazamiento"
                class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Estructuras cercanas (Tipo de
                emplazamiento):</label>
              <input type="text" formControlName="estructurasCercanasTipoEmplazamiento"
                id="estructurasCercanasTipoEmplazamiento" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Estructuras cercanas (Tipo de emplazamiento)"
                >
            </div>

          </div>
        </div>
      </div>
  </div>


  <div class="card mb-2 disabled-div" *ngIf="isPoda" >
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Poda
	    </div>
        <div class="p-6">
          <div class="grid gap-6 mb-6 md:grid-cols-4">



            <div>
              <label for="actor" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Actor:</label>
              <input type="text" formControlName="actor" id="actor"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Actor" [ngClass]="{
                  required:
                    form.get('actor').invalid &&
                    form.get('actor').touched
                }" />
            </div>


            <div>
              <label for="operador" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Operador:</label>
              <input type="text" formControlName="operador" id="operador"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Operador" [ngClass]="{
                  required:
                    form.get('operador').invalid &&
                    form.get('operador').touched
                }" />
            </div>






            <div>
              <label for="nuevaIntervencion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nueva
                Intervencion:</label>
              <input type="Date" formControlName="nuevaIntervencion" id="nuevaIntervencion"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Nueva Intervencion" [ngClass]="{
                          required: form.get('nuevaIntervencion').invalid && form.get('nuevaIntervencion').touched
                        }" />
            </div>




            <div>
              <label for="podaCorreccion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda de
                Corrección:</label>
              <input type="text" formControlName="podaCorreccion" id="podaCorreccion"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de Corrección" [ngClass]="{
                  required:
                    form.get('podaCorreccion').invalid &&
                    form.get('podaCorreccion').touched
                }" />
            </div>


            <div>
              <label for="podaFormacion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda de
                Formación:</label>
              <input type="text" formControlName="podaFormacion" id="podaFormacion"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de Formación" [ngClass]="{
                  required:
                    form.get('podaFormacion').invalid &&
                    form.get('podaFormacion').touched
                }" />
            </div>



            <div>
              <label for="podaRealceR" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda de
                realce - R:</label>
              <input type="checkbox" formControlName="podaRealceR" id="podaRealceR"  [disabled]="true"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                >
            </div>
            <div>
              <label for="podaEstabilidadE" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda
                de estabilidad - E:</label>
              <input type="checkbox" formControlName="podaEstabilidadE" id="podaEstabilidadE" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de estabilidad - E"
                >
            </div>
            <div>
              <label for="podaMantenimientoM" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda
                de mantenimiento -M:</label>
              <input type="checkbox" formControlName="podaMantenimientoM" id="podaMantenimientoM" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de mantenimiento -M"
                >
            </div>

            <div>
              <label for="cortesNuevos" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cortes
                nuevos:</label>
              <input type="checkbox" formControlName="cortesNuevos" id="cortesNuevos" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Cortes nuevos"
                >
            </div>
            <div>
              <label for="cortesViejos" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cortes
                viejos:</label>
              <input type="checkbox" formControlName="cortesViejos" id="cortesViejos" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Cortes viejos"
                >
            </div>
            <div>
              <label for="cortesEnfermos" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cortes
                enfermos:</label>
              <input type="checkbox" formControlName="cortesEnfermos" id="cortesEnfermos" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Cortes enfermos"
                >
            </div>
            <div>
              <label for="podaRaices" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda de
                raíces:</label>
              <input type="checkbox" formControlName="podaRaices" id="podaRaices" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda de raíces"
                >
            </div>



            <div>
              <label for="limpieza"
                class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Limpieza:</label>
              <input type="text" formControlName="limpieza" id="limpieza" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Limpieza"
                >
            </div>




            <div>
              <label for="podaSanitaria" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Poda
                sanitaria:</label>
              <input type="text" formControlName="podaSanitaria" id="podaSanitaria" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Poda sanitaria"
                >
            </div>



            <div>
              <label for="inmediataI" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Inmediata
                -I:</label>
              <input type="checkbox" formControlName="inmediataI" id="inmediataI" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Inmediata -I"
                >
            </div>
            <div>
              <label for="cortoPlazoC" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">corto plazo
                -C:</label>
              <input type="checkbox" formControlName="cortoPlazoC" id="cortoPlazoC" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="corto plazo -C"
                >
            </div>
            <div>
              <label for="largoPlazoL" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">largo plazo
                - L:</label>
              <input type="checkbox" formControlName="largoPlazoL" id="largoPlazoL" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="largo plazo - L"
                >
            </div>
            <div>
              <label for="trasplante"
                class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Trasplante:</label>
              <input type="checkbox" formControlName="trasplante" id="trasplante" readonly="readonly"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Trasplante"
                >
            </div>

          </div>
        </div>
      </div>
  </div>


  <div class="card mb-2 disabled-div" *ngIf="isTala" >
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Tala
	    </div>
        <div class="p-6">
          <div class="grid gap-6 mb-6 md:grid-cols-4">


            <div>
              <label for="numAutorizationCdmb" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Num. Autorization CDMB</label>
              <input type="text" formControlName="numAutorizationCdmb" id="numAutorizationCdmb"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Num. Autorization CDMB" />
            </div>

            <div>
              <label for="usoDeMadera" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Uso de la madera:</label>
              <input type="text" formControlName="usoDeMadera" id="usoDeMadera"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Uso de la madera"  />
            </div>


            <div>
              <label for="expedicionPermiso" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nueva
                Intervencion:</label>
              <input type="Date" formControlName="expedicionPermiso" id="expedicionPermiso"
                class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                placeholder="Nueva Intervencion"  />
            </div>



          </div>
        </div>
      </div>
  </div>

  <div class="card mb-2 disabled-div">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del actividades silviculturales
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">



          <div>
            <label for="estado" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Estado:</label>
            <input type="text" formControlName="estado" id="estado" readonly="readonly"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Estado" >
          </div>


        </div>
      </div>
    </div>
  </div>

  <div class="card mb-2 disabled-div">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Foto Antes
	  </div>
        <div class="p-6">
          <app-registrofotografico #registroFotograficoAntes [dataForm]="onlyRegistroFotograficoAntes" [multiple] ="isMultipleMode"></app-registrofotografico>
        </div>
      </div>
  </div>

  <div class="card mb-2 disabled-div">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Foto despues
	  </div>
        <div class="p-6">
          <app-registrofotografico #registroFotograficoDespues [dataForm]="onlyRegistroFotograficoDespues" [multiple]="isMultipleMode"></app-registrofotografico>
        </div>
      </div>
  </div>

  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Foto Antes
	  </div>
        <div class="p-6">
          <div>
            <label for="observacion"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Observación:</label>
            <textarea  formControlName="observacion" id="observacion"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Observación" > </textarea>
          </div>
        </div>
      </div>
  </div>

  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el actividades silviculturales.
  </div>
  <div *ngIf="isFormInValid" class="alert alert-danger" role="alert">
    Hay campos que faltan por llenar.
   </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br>
  <div class="flex justify-center space-x-4" *ngIf ="actividadessilviculturalesDto.estado=='Solicitada'">
    <app-btn typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
      (click)="CambiarEstado(2)" >Rechazar</app-btn>

    <app-btn typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="CambiarEstado(1)">Aprobar</app-btn>
  </div>
  <div class="flex justify-center space-x-4" *ngIf ="actividadessilviculturalesDto.estado=='Aprobada'">
    <app-btn typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
      (click)="CambiarEstado(3)" >Ejecutar</app-btn>
  </div>



</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">

    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>

---------------------------------------
procesamiento-actividadessilviculturales.component.scss
************
.disabled-div {
    pointer-events: none; /* Evita eventos de ratón y teclado */
    opacity: 0.6; /* Reduce la opacidad para indicar que está deshabilitado */
    background-color: #eee; /* Cambia el color de fondo para indicar deshabilitación */
    /* Otros estilos de deshabilitación */
  }
---------------------------------------
procesamiento-actividadessilviculturales.component.ts
************
import { formatDate } from '@angular/common';
import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Params } from '@angular/router';
import { ActividadesSilviculturalesDto, Estado } from 'src/app/core/models/actividadessilviculturales-dto.model';
import { CensoArboreoDto, RegistroFotograficoCensoDto } from 'src/app/core/models/censoarboreo-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import { BuscarArbolNoCampoComponent } from 'src/app/modules/censoarboreo/components/buscar-arbol-nocampo/buscar-arbol-nocampo.component';
import { RegistroFotograficoComponent } from 'src/app/modules/sharedcomponent/registrofotografico/registrofotografico.component';

@Component({
  selector: 'app-procesamiento-actividadesSilviculturales',
  templateUrl: './procesamiento-actividadesSilviculturales.component.html',
  styleUrls: ['./procesamiento-actividadesSilviculturales.component.scss']
})
export class ProcesamientoActividadesSilviculturalesComponent implements OnInit {

  statusDetail: RequestStatus = 'init';
  form:FormGroup;
  isNew:boolean = false;
  userNameRequired:boolean = false;
  passwordRequired:boolean = false;
  actividadessilviculturalesDto : ActividadesSilviculturalesDto;
  individuoSeleccionado: CensoArboreoDto = null;
  isMultipleMode : boolean = false;
  tipoActividad : string = "";

  isSiembra: boolean = false;
  isPoda: boolean = false;
  isTala: boolean = false;

  onlyRegistroFotograficoAntes: RegistroFotograficoCensoDto[] = new Array<RegistroFotograficoCensoDto>();
  onlyRegistroFotograficoDespues: RegistroFotograficoCensoDto[] = new Array<RegistroFotograficoCensoDto>();

  @ViewChild('buscarArbolLista')
  buscarArbolLista: BuscarArbolNoCampoComponent;

  @ViewChild('registroFotograficoAntes')
  registroFotograficoAntes: RegistroFotograficoComponent;
  
  @ViewChild('registroFotograficoDespues')
  registroFotograficoDespues: RegistroFotograficoComponent;
  @Input()
  set dataForm(data:ActividadesSilviculturalesDto)
  {
    console.log(data)
    ;
    if(data)
    {
      this.isNew = false;

      this.form.patchValue(data);

      if (data.nuevaIntervencion) {
        const fechaCorteString = formatDate(data.nuevaIntervencion, 'yyyy-MM-dd', 'en-US');
        this.form.patchValue({ nuevaIntervencion: fechaCorteString });
      }

      if (data.expedicionPermiso) {
        const fechaCorteString = formatDate(data.expedicionPermiso, 'yyyy-MM-dd', 'en-US');
        this.form.patchValue({ expedicionPermiso: fechaCorteString });
      }

      let estadoLocal  = Number(data.estado);
      this.form.patchValue({estado : estadoLocal == 0 ? "Solicitada" : estadoLocal == 1 ? "Aprobada" : "Rechazada" })
      this.form.markAllAsTouched();
      this.actividadessilviculturalesDto = data;
      this.actividadessilviculturalesDto.estado = this.numeroAEstado(Number(this.actividadessilviculturalesDto.estado));
      let fotosAntes = new RegistroFotograficoCensoDto();
      fotosAntes.nombre = data.fotoAntes;
      this.onlyRegistroFotograficoAntes.push(fotosAntes); 

      let fotosDespues = new RegistroFotograficoCensoDto();
      fotosDespues.nombre = data.fotoDespues;
      this.onlyRegistroFotograficoDespues.push(fotosDespues); 
    } else {
      this.isNew = true;
      this.actividadessilviculturalesDto = new ActividadesSilviculturalesDto();
      this.form.patchValue({estado: Estado.Solicitada.toString()});
    }
  };
  @Input()
  set status(data:RequestStatus)
  {
    if(data)
    {
      this.statusDetail = data;
    }
  };
  
  numeroAEstado(numero: number): Estado  {
    switch (numero) {
      case 0:
        return Estado.Solicitada;
      case 1:
        return Estado.Aprobada;
      case 2:
        return Estado.Rechazada;
      case 3:
        return Estado.Ejecutada;
      default:
        return Estado.Solicitada;
    }
    
  }

  @Output() create= new EventEmitter();
  @Output() update= new EventEmitter();
  @Output() delete= new EventEmitter();

  constructor( private formbuilder:FormBuilder,
    private sweetAlertService: SweetAlertService,
    private activatedRoute: ActivatedRoute
  ){
    this.activatedRoute.params.subscribe((params: Params) => {
      this.tipoActividad = params['tipoActividad'];
      
      if(this.tipoActividad)
      {
        if(this.tipoActividad == "Siembra"){
        this.isSiembra = true;
      } else if(this.tipoActividad == "Poda"){
        this.isPoda = true;
      } else if(this.tipoActividad == "Tala"){
        this.isTala = true;
      }
        this.BuildForm(this.tipoActividad);
      }
    });
  }

  ngOnInit(): void {

  }

  private BuildForm(tipoActividad : string) {


    
    if(tipoActividad == "Siembra") {
      this.form = this.formbuilder.group({
        responsable: ['', [Validators.required]],

        podaRealceR: [false, []],
        podaEstabilidadE: [false, []],
        podaMantenimientoM: [false, []],
        cortesNuevos: [false, []],
        cortesViejos: [false, []],
        cortesEnfermos: [false, []],
        podaRaices: [false, []],
        estructurasCercanasTipoEmplazamiento: ['', []],
        limpieza: ['', []],
        podaSanitaria: ['', []],
        inmediataI: [false, []],
        cortoPlazoC: [false, []],
        largoPlazoL: [false, []],
        trasplante: [false, []],
        observacion: ['', [Validators.required]],
        estado: ['', []],
        idCensoArboreo: ['00000000-0000-0000-0000-000000000000', []],
        numeroArbolEnCampo: ['', []],
      });
    
  } else if(tipoActividad == "Poda") {
    this.form = this.formbuilder.group({
      actor: ['', [Validators.required]],
        operador: ['', [Validators.required]],
        nuevaIntervencion: ['', [Validators.required]],
        podaCorreccion: ['', [Validators.required]],
        podaFormacion: ['', [Validators.required]],

        //responsable:['', [Validators.required]],

        podaRealceR: [false, []],
        podaEstabilidadE: [false, []],
        podaMantenimientoM: [false, []],
        cortesNuevos: [false, []],
        cortesViejos: [false, []],
        cortesEnfermos: [false, []],
        podaRaices: [false, []],
        //estructurasCercanasTipoEmplazamiento: ['', [Validators.required]],
        limpieza: ['', [Validators.required]],
        podaSanitaria: ['', [Validators.required]],
        inmediataI: [false, []],
        cortoPlazoC: [false, []],
        largoPlazoL: [false, []],
        trasplante: [false, []],
        observacion: ['', [Validators.required]],
        estado: ['', []],
        idCensoArboreo: ['00000000-0000-0000-0000-000000000000', []],
        numeroArbolEnCampo: ['', []],
    })
    
  } else if(tipoActividad == "Tala"){
    this.form = this.formbuilder.group({
      numAutorizationCdmb: ['', [Validators.required]],
        usoDeMadera: ['', [Validators.required]],
        expedicionPermiso: ['', [Validators.required]],

        //responsable:['', [Validators.required]],

        podaRealceR: [false, []],
        podaEstabilidadE: [false, []],
        podaMantenimientoM: [false, []],
        cortesNuevos: [false, []],
        cortesViejos: [false, []],
        cortesEnfermos: [false, []],
        podaRaices: [false, []],
        estructurasCercanasTipoEmplazamiento: ['', []],
        limpieza: ['', []],
        podaSanitaria: ['', []],
        inmediataI: [false, []],
        cortoPlazoC: [false, []],
        largoPlazoL: [false, []],
        trasplante: [false, []],
        observacion: ['', [Validators.required]],
        estado: ['', []],
        idCensoArboreo: ['00000000-0000-0000-0000-000000000000', []],
        numeroArbolEnCampo: ['', []],
    })
  }

  


}


  public CambiarEstado(estado:number){

    let estadoEnum = this.numeroAEstado(estado);
    this.Actualizar(estadoEnum);
  }
 

  Guardar()
  {
    if(this.form.invalid)
    {

      this.form.markAllAsTouched();
      return;
    }


    this.create.emit(this.form.value);
  }

  Actualizar(nuevoEstado : Estado)
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.form.value.estado = nuevoEstado;
    this.update.emit(this.form.value);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del actividadessilviculturales';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(TitleUp,TitleDonw, () => {
      //ejecuto el llamado a la funcion Borrar
      this.Borrar();
    }, () => {
         //en caso de usar cancelacion
    });
  }

  Borrar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit()
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
      return {
          get: () => this.form.get(name),
          isValid: () => this.form.get(name).touched && this.form.get(name).valid
      };
  }

}

---------------------------------------
actividadessilviculturales.component.html
************
<app-formulario-actividadesSilviculturales
[dataForm]="actividadessilviculturales"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-actividadesSilviculturales>

---------------------------------------
actividadessilviculturales.component.scss
************

---------------------------------------
actividadessilviculturales.component.ts
************
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { ActividadesSilviculturalesDto } from 'src/app/core/models/actividadessilviculturales-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { ActividadesSilviculturalesService } from 'src/app/core/services/actividadessilviculturales.service';

@Component({
  selector: 'app-actividadesSilviculturales',
  templateUrl: './actividadesSilviculturales.component.html',
  styleUrls: ['./actividadesSilviculturales.component.scss']
})
export class ActividadesSilviculturalesComponent implements OnInit {

  tipoActividad : string = "";
  id: string;
  statusDetail: RequestStatus;
  actividadessilviculturales:ActividadesSilviculturalesDto

constructor(private activatedRoute: ActivatedRoute,
  private actividadessilviculturalesService: ActividadesSilviculturalesService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      this.tipoActividad = params['tipoActividad'];
      if(this.id)
      {
        this.actividadessilviculturalesService.getById(this.id)
        .subscribe(actividadessilviculturales => {
          this.actividadessilviculturales = actividadessilviculturales.data;
        });
      }
    });

  }

  Guardar(data)
  {
    this.actividadessilviculturalesService.createWFiles(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/actividades/lista/'+this.tipoActividad]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    this.actividadessilviculturalesService.updateWFile(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/actividades/lista/'+this.tipoActividad]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.actividadessilviculturalesService.delete( this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/actividades/lista/'+this.tipoActividad]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
actividades-silviculturalesprocesamiento.component.html
************
<app-procesamiento-actividadesSilviculturales
[dataForm]="actividadessilviculturales"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-procesamiento-actividadesSilviculturales>

---------------------------------------
actividades-silviculturalesprocesamiento.component.scss
************

---------------------------------------
actividades-silviculturalesprocesamiento.component.ts
************
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { ActividadesSilviculturalesDto, ActividadesSilviculturalesEstadoDto, Estado } from 'src/app/core/models/actividadessilviculturales-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { ActividadesSilviculturalesService } from 'src/app/core/services/actividadessilviculturales.service';

@Component({
  selector: 'app-actividadesSilviculturales-procesamiento',
  templateUrl: './actividades-Silviculturalesprocesamiento.component.html',
  styleUrls: ['./actividades-Silviculturalesprocesamiento.component.scss']
})
export class ActividadesSilviculturalesProcesamientoComponent implements OnInit {

  id: string;
  statusDetail: RequestStatus;
  actividadessilviculturales:ActividadesSilviculturalesDto

constructor(private activatedRoute: ActivatedRoute,
  private actividadessilviculturalesService: ActividadesSilviculturalesService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.actividadessilviculturalesService.getById(this.id)
        .subscribe(actividadessilviculturales => {
          this.actividadessilviculturales = actividadessilviculturales.data;
        });
      }
    });

  }

  Guardar(data)
  {
    this.actividadessilviculturalesService.create(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/actividades/pendientes']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    let dataCast : ActividadesSilviculturalesDto = data;

    ;
    let actSilviculturalesEstado : ActividadesSilviculturalesEstadoDto = new ActividadesSilviculturalesEstadoDto();
    
    actSilviculturalesEstado.estado = dataCast.estado;
    actSilviculturalesEstado.id = this.id;
    actSilviculturalesEstado.observacion = dataCast.observacion;
    
    this.actividadessilviculturalesService.updateProcesamientoEstado(this.id, actSilviculturalesEstado).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/actividades/intervenciones/'+this.toReturn(dataCast.estado)]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }
  
  toReturn(current : Estado) : Estado{
    if(current == Estado.Aprobada || current == Estado.Rechazada){
      return Estado.Solicitada;
    }

    if(current == Estado.Ejecutada){
      return Estado.Aprobada;
    }

    return Estado.Solicitada;

  }
  Borrar(data)
  {
    console.log("borrar")
    this.actividadessilviculturalesService.delete( this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/actividades/pendientes']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
basic-table-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { AuthGuard } from 'src/app/core/guards/auth.guard';
import { ListaBasicTableComponent } from './components/lista-basic-table/lista-basic-table.component';
import { BasicTableComponent } from './containers/basic-table/basic-table.component';

const routes: Routes = [
  {
    path: ':tabla',
    canActivate: [ AuthGuard ],
    component: ListaBasicTableComponent
  },
  {
    path: 'create/:tabla',
    canActivate: [ AuthGuard ],
    component: BasicTableComponent
  },
  {
    path: 'edit/:tabla/:id',
    canActivate: [ AuthGuard ],
    component: BasicTableComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule,
  ]
})
export class BasicTableRoutingModule { }

---------------------------------------
basic-table.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { SharedModule } from 'src/app/shared/shared.module';
import { ListaBasicTableComponent } from './components/lista-basic-table/lista-basic-table.component';
import { FormularioBasicTableComponent } from './components/formulario-basic-table/formulario-basic-table.component';
import { BasicTableComponent } from './containers/basic-table/basic-table.component';
import { BasicTableRoutingModule } from './basic-table-routing.module';








@NgModule({
  declarations: [
    ListaBasicTableComponent,
    FormularioBasicTableComponent,
    BasicTableComponent    
  ],
  imports: [
    CommonModule,
    BasicTableRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class BasicTableModule { }

---------------------------------------
formulario-basic-table.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">{{tabla}}</h1>
</div>
<br>
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del {{tabla}}
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">

          <div *ngIf="padre != null">
            <label for="predecesorId" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{padre}}:</label>

             

          <ng-select            
            [items]="padres" bindLabel="descripcion" bindValue="id" formControlName="predecesorId" 
            placeholder="Forma de la copa"
            [ngClass]="{
              required:
                form.get('predecesorId').invalid && form.get('predecesorId').touched
            }"
            >
          </ng-select>


          </div>


          <div>
            <label for="descripcion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Descripcion:</label>
            <input type="text" formControlName="descripcion" id="descripcion"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="descripcion" [ngClass]="{'required': form.get('descripcion').invalid && form.get('descripcion').touched}">
            </div>
        </div>
      </div>
    </div>
  </div>

  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el basicTable.
  </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br>
  <div class="flex justify-end space-x-4">

    <app-btn *ngIf="!isNew && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
      (click)="mostrarConfirmacion()">Borrar</app-btn>

    <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Guardar()">Guardar</app-btn>

    <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Actualizar()">Actualizar</app-btn>
  </div>

</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>
---------------------------------------
formulario-basic-table.component.scss
************

---------------------------------------
formulario-basic-table.component.ts
************
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { GenericPredecesorSucesorTableDto } from 'src/app/core/models/generic-predecesor-sucesor-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { BasicTableService } from 'src/app/core/services/basictable.service';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-formulario-basic-table',
  templateUrl: './formulario-basic-table.component.html',
  styleUrls: ['./formulario-basic-table.component.scss'],
})
export class FormularioBasicTableComponent implements OnInit {
  tabla: string;
  padre: string;

  statusDetail: RequestStatus = 'init';
  form: FormGroup;
  isNew: boolean = false;
  userNameRequired: boolean = false;
  passwordRequired: boolean = false;
  basicTable: GenericPredecesorSucesorTableDto;
  padres: GenericPredecesorSucesorTableDto[];
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  @Input()
  set dataForm(data: GenericPredecesorSucesorTableDto) {
    if (data) {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.basicTable = data;
    } else {
      this.isNew = true;
    }
  }
  @Input()
  set status(data: RequestStatus) {
    if (data) {
      this.statusDetail = data;
    }
  }

  @Input()
  set basicTableName(data: string) {
    if (data) {
      this.tabla = data;
    }
  }

  @Output() create = new EventEmitter();
  @Output() update = new EventEmitter();
  @Output() delete = new EventEmitter();

  constructor(
    private formbuilder: FormBuilder,
    private sweetAlertService: SweetAlertService,
    private basicTableService :BasicTableService,
    private habilitaracciones: Habilitaracciones
  ) {
    
  }

  ngOnInit(): void {

      
    let antecesor = this.basicTableService.getAntecesor(this.tabla);
    this.padre  = antecesor;
    if(this.padre != null){
      this.basicTableService.getByTable(antecesor).subscribe(
        (response) => {
          
          this.padres = response.data;
          
        },
        (errorMsg) => {
          
        }
      );
    }
    this.BuildForm(this.padre ==null ? 0 : 1 );
    this.ValidarBotones();
  }
  private ValidarBotones() {

    const resultados = this.habilitaracciones.MostrarBotones('BasicTable');
    
        if (resultados.length > 0) {
            resultados.forEach(resultado => {
                 this.mostraDelete=resultado.eliminar;
                 this.mostraUpdate=resultado.editar;
                
            });
        }
     }
  private BuildForm(modo : number) {
    if(modo == 0){
      
      this.form = this.formbuilder.group({
        descripcion: ['', [Validators.required]]        
      });

    } else if (modo == 1){
      
      this.form = this.formbuilder.group({
        descripcion: ['', [Validators.required]],
        predecesorId : ['', [Validators.required]]
      });
      
    }
    
  }

  Guardar() {
    
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }

    this.create.emit(this.form.value);
  }

  Actualizar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.update.emit(this.form.value);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del basicTable';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(
      TitleUp,
      TitleDonw,
      () => {
        //ejecuto el llamado a la funcion Borrar
        this.Borrar();
      },
      () => {
        //en caso de usar cancelacion
      }
    );
  }

  Borrar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit();
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
    return {
      get: () => this.form.get(name),
      isValid: () => this.form.get(name).touched && this.form.get(name).valid,
    };
  }


  
}

---------------------------------------
lista-basic-table.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">{{tabla}}</h1>
  <app-btn *ngIf="mostrarCreate" typeBtn="submit" color="primary"  [customIcon]="'faPlus'" routerLink="/app/basictable/create/{{tabla}}">Agregar</app-btn>
</div>
<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50" type="text" />
    </div>
  </div>
</form>
<div>
  <p-table   [value]="dataList"
  [paginator]="true"
  [rows]="this.pageSize"
  [showCurrentPageReport]="true"
  [tableStyle]="{ 'min-width': '50rem' }"
  [lazy]="true"
  [totalRecords]="collectionSize" (onLazyLoad)="refreshGrid($event)"
  [rowsPerPageOptions]="[5, 10, 15, 20]">
    <ng-template pTemplate="header">
        <tr class="bg-gray-50">
            <th *ngIf="padre!= null" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">{{padre}}</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Descripcion</th>  
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>          
        </tr>
    </ng-template>
    <ng-template pTemplate="body" let-row let-rowIndex="rowIndex">
        <tr [class.bg-gray-200]="rowIndex % 2 === 0">

            <td *ngIf="padre!= null" class="px-6 py-4 whitespace-nowrap w-64">{{row.predecesor.descripcion}}</td>

            <td class="px-6 py-4 whitespace-nowrap w-64">{{row.descripcion}}</td>
            
            <td class="px-6 py-4 whitespace-nowrap w-64">
                <a [routerLink]="['/app/basictable/edit/'+tabla, row.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
            </td>
        </tr>
    </ng-template>
  </p-table>
</div>

---------------------------------------
lista-basic-table.component.scss
************

---------------------------------------
lista-basic-table.component.ts
************
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { GenericPredecesorSucesorTableDto } from 'src/app/core/models/generic-predecesor-sucesor-dto.model';

import { RequestStatus } from 'src/app/core/models/request-status.model';
import { BasicTableService } from 'src/app/core/services/basictable.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';

@Component({
  selector: 'app-lista-basic-table',
  templateUrl: './lista-basic-table.component.html',
  styleUrls: ['./lista-basic-table.component.scss']
})
export class ListaBasicTableComponent implements OnInit {

  tabla: string;
  padre: string;
  dataList: GenericPredecesorSucesorTableDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  mostrarCreate: boolean = false;

  constructor(private formbuilder: FormBuilder,
    private basicTableService: BasicTableService,
    private activatedRoute: ActivatedRoute,
    private habilitaracciones: Habilitaracciones) {
      
  }

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.tabla = params['tabla'];
      this.padre = this.basicTableService.getAntecesor(this.tabla);
      this.BuildForm();
      this.getCredentials();
    });
    this.ValidarBotones();

  }
  private ValidarBotones() {
    const resultados = this.habilitaracciones.MostrarBotones('BasicTable');
    
        if (resultados.length > 0) {
            resultados.forEach(resultado => {
                 this.mostrarCreate=resultado.editar;
                
            });
        }
     }
  private getCredentials() {
    this.basicTableService.getPagesByTable(this.tabla, this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';

      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.basicTableService.getPagesByTable(this.tabla, this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.basicTableService.getPagesByTable(this.tabla, this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }

}

---------------------------------------
basic-table.component.html
************
<app-formulario-basic-table
[dataForm]="basicTable"
[status]="statusDetail"
[basicTableName]="tabla"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-basic-table>

---------------------------------------
basic-table.component.scss
************

---------------------------------------
basic-table.component.ts
************
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { GenericPredecesorSucesorTableDto } from 'src/app/core/models/generic-predecesor-sucesor-dto.model';

import { RequestStatus } from 'src/app/core/models/request-status.model';
import { BasicTableService } from 'src/app/core/services/basictable.service';


@Component({
  selector: 'app-basicTable',
  templateUrl: './basic-table.component.html',
  styleUrls: ['./basic-table.component.scss']
})
export class BasicTableComponent implements OnInit {

  id: string;
  tabla: string;
  statusDetail: RequestStatus;
  basicTable:GenericPredecesorSucesorTableDto;

constructor(private activatedRoute: ActivatedRoute,
  private basicTableService: BasicTableService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      this.tabla = params['tabla']
      if(this.id)
      {
        this.basicTableService.getByTableById(this.tabla,this.id)
        .subscribe(basicTable => {
          this.basicTable = basicTable.data;
        });
      }
    });

  }

  Guardar(data)
  {
    
    this.basicTableService.createByTabla(this.tabla, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/basictable/'+this.tabla]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    this.basicTableService.updateByTabla(this.tabla, this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/basictable/'+this.tabla]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.basicTableService.deleteByTabla(this.tabla, this.id , data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/basictable/'+this.tabla]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
censoarboreo-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ImpresionCensoArboreoComponent } from './containers/impresioncensoarboreo/impresioncensoarboreo.component';
import { ListaCensoArboreoComponent } from './components/lista-censoarboreo/lista-censoarboreo.component';
import { CensoArboreoComponent } from './containers/censoarboreo/censoarboreo.component';
import { AuthGuard } from 'src/app/core/guards/auth.guard';

const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ListaCensoArboreoComponent
  },
  {
    path: 'create',
    canActivate: [ AuthGuard ],
    component: CensoArboreoComponent
  },
  {
    path: 'edit/:id',
    canActivate: [ AuthGuard ],
    component: CensoArboreoComponent
  },
  {
    path: 'print/:id',
    canActivate: [ AuthGuard ],
    component: ImpresionCensoArboreoComponent
  },
  
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule,
  ]
})
export class CensoArboreoRoutingModule { }

---------------------------------------
censoarboreo.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { CensoArboreoRoutingModule } from './censoarboreo-routing.module';
import { ReactiveFormsModule } from '@angular/forms';

import { SharedModule } from 'src/app/shared/shared.module';

import { FormularioCensoArboreoComponent } from './components/formulario-censoarboreo/formulario-censoarboreo.component';
import { ListaCensoArboreoComponent } from './components/lista-censoarboreo/lista-censoarboreo.component';
import { CensoArboreoComponent } from './containers/censoarboreo/censoarboreo.component';
import { ImpresionCensoArboreoComponent } from './containers/impresioncensoarboreo/impresioncensoarboreo.component';
import { NumberInputDirective } from 'src/app/core/directives/number-input.directive';
import { BuscarArbolComponent } from './components/buscar-arbol/buscar-arbol.component';
import { CargarManualComponent } from './components/cargar-manual/cargar-manual.component';
import { ImpresionfCensoArboreoComponent } from './components/impresion-censoarboreo/impresion-censoarboreo.component';


@NgModule({
  declarations: [
    ListaCensoArboreoComponent,
    FormularioCensoArboreoComponent,
    CensoArboreoComponent,
    BuscarArbolComponent,
    CargarManualComponent,
    ImpresionfCensoArboreoComponent,
    ImpresionCensoArboreoComponent
  ],
  imports: [
    CommonModule,
    CensoArboreoRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ],
  exports:[BuscarArbolComponent]
})
export class CensoArboreoModule { }

---------------------------------------
buscar-arbol.component.html
************
<div>
  <form [formGroup]="form" class="flex items-center">
    <div class="mb-4">
      <div class="mb-1">
        <label class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Individuo: </label>
      </div>
      <div class="flex items-center border border-gray-300 rounded" (click)="toggleModal()">
        <input id="nombre_destinatario" formControlName="nombreComun" type="text" class="px-2 py-1 text-xs text-gray-700 bg-gray-100 border-0 rounded-l cursor-pointer" placeholder="Buscar" maxlength="120" readonly="readonly" value="" autocomplete="off" title="">
        <span class="flex items-center justify-center px-2 py-1 text-xs text-gray-500 bg-gray-200 border-l border-gray-300 rounded-r cursor-pointer">
          <fw-custom-icons
          [iconName]="'faMagnifyingGlass'">
          </fw-custom-icons>
        </span>
      </div>
    </div>
  </form>
</div>
<div *ngIf="showModal" class="overflow-x-hidden overflow-y-auto fixed inset-0  outline-none focus:outline-none justify-center items-center flex">
  <div class="relative w-auto my-6 mx-auto max-w-6xl">
    <!--content-->
    <div class="border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none">
      <!--header-->
      <div class="flex items-start justify-between p-5 border-b border-solid border-slate-200 rounded-t">
        <h3 class="text-3xl font-semibold">
          Buscar Individuo
        </h3>
        <button class="p-1 ml-auto bg-transparent border-0 text-black  float-right opacity-3 text-3xl leading-none font-semibold outline-none focus:outline-none" (click)="toggleModal()">
          <span class="bg-transparent text-black opacity-3 h-6 w-6 text-2xl block outline-none focus:outline-none">
            x
          </span>
        </button>
      </div>
      <!--body-->
      <div class="relative p-6 flex-auto">
        <p class="my-4 text-slate-500 text-lg leading-relaxed">
          <form [formGroup]="form">
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-5 gap-4">
                <div>
                  <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
                  <input id="table-filtering-search" formControlName="filter" class="mt-1 text-xs block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50" type="text" />
                </div>
                <div class="flex flex-col justify-end text-xs">
                  <app-btn typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'" [customIcon]="'faMagnifyingGlass'" (click)="Buscar()">Buscar</app-btn>
                </div>
              <div>
            </div>
          </div>
          <p-table [value]="dataList" [paginator]="true" [rows]="this.pageSize" [showCurrentPageReport]="true"
    [tableStyle]="{ 'min-width': '50rem' }" [lazy]="true" [totalRecords]="collectionSize"
    (onLazyLoad)="refreshGrid($event)" [rowsPerPageOptions]="[5, 10, 15, 20]">
    <ng-template pTemplate="header">
      <tr class="bg-gray-50">
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Numero de individuo - ID</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre común</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre científico</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Orden</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Familia</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Género</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Especie</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
      </tr>
    </ng-template>
    <ng-template pTemplate="body" let-rowData let-rowIndex="rowIndex">
      <tr [class.bg-gray-200]="rowIndex % 2 === 0">
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.numeroIndividuoId}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.nombreComun}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.nombreCientifico}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.orden}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.familia}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.genero}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.especie}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">
          <a (click)="Seleccionar(rowData)"
            class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 cursor-pointer">Seleccionar</a>
        </td>
      </tr>
    </ng-template>
  </p-table>
          </form>
      </div>
      <br>
      <!--footer-->
      <div class="flex items-center justify-end p-6 border-t border-solid border-slate-200 rounded-b space-x-4">
        <app-btn  typeBtn="submit"
        color="red"
        [loading]="statusDetail === 'loading'"
        (click)="toggleModal()">Cerrar</app-btn>
      </div>
    </div>
  </div>
</div>
<div *ngIf="showModal" class="opacity-25 fixed inset-0  bg-black"></div>

---------------------------------------
buscar-arbol.component.scss
************

---------------------------------------
buscar-arbol.component.ts
************
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { CensoArboreoDto } from 'src/app/core/models/censoarboreo-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';

@Component({
  selector: 'app-buscar-arbol',
  templateUrl: './buscar-arbol.component.html',
  styleUrls: ['./buscar-arbol.component.scss']
})
export class BuscarArbolComponent {
  showModal = false;
  dataList: CensoArboreoDto[] =[];
  seleccionado: CensoArboreoDto = null;
  form:FormGroup;
  pageSize:number = 5;
  page:number= 1;
  collectionSize: number =1
  statusDetail: RequestStatus = 'init';
  isActividadPlantulaBusqueda : boolean = false;
  @Output() selected= new EventEmitter();

  @Input()
  set isActividadPlantula (param : boolean) {
    
    this.isActividadPlantulaBusqueda = param;      
  };

constructor(
  private formbuilder:FormBuilder,
  private service  : CensoArboreoService){

    this.BuildForm();
    this.getCenso();
}

private getCenso(){
  this.statusDetail = 'loading';
  ;
  if(this.isActividadPlantulaBusqueda) {
    this.service.getFilterPlantula(this.field("filter").get().value, this.page ,this.pageSize ).subscribe(
      respuesta => {
        this.dataList = respuesta.data
        this.collectionSize = respuesta.meta.totalCount;
        this.pageSize =this.pageSize;
        this.statusDetail = 'init';
      }
    );
  } else {
    this.service.get(this.field("filter").get().value, this.page ,this.pageSize ).subscribe(
      respuesta => {
        this.dataList = respuesta.data
        this.collectionSize = respuesta.meta.totalCount;
        this.pageSize =this.pageSize;
        this.statusDetail = 'init';
      }
    );
  }
  
}

  private BuildForm(){
    this.form = this.formbuilder.group({
      filter:['', []],
      nombreComun:['', []]
    })
  }

  Seleccionar(afiliado:CensoArboreoDto)
  {
    this.seleccionado = afiliado;
    this.form.patchValue(afiliado);
    this.selected.emit(this.seleccionado);
    this.toggleModal();
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;

    if(this.isActividadPlantulaBusqueda) {
      this.service.getFilterPlantula(this.field("filter").get().value, this.page, this.pageSize).subscribe(
        response => {
          this.dataList = response.data
          this.collectionSize = response.meta.totalCount;
          this.pageSize = response.meta.pageSize;
          this.statusDetail = 'init';
        }
      );
    } else {
      this.service.get(this.field("filter").get().value, this.page, this.pageSize).subscribe(
        response => {
          this.dataList = response.data
          this.collectionSize = response.meta.totalCount;
          this.pageSize = response.meta.pageSize;
          this.statusDetail = 'init';
        }
      );
    }

  }

  Buscar(){
    if(this.field("filter").get().value =="")
      this.getCenso();

    this.statusDetail = 'loading';
    ; 
    if(this.isActividadPlantulaBusqueda) {
      this.service.getFilterPlantula(this.field("filter").get().value, this.page ,this.pageSize ).subscribe(
        afiliados => {
          this.dataList = afiliados.data
          this.collectionSize = afiliados.meta.totalCount;
          this.pageSize = afiliados.meta.pageSize;
          this.statusDetail = 'init';
        }
      );
    } else {
      this.service.get(this.field("filter").get().value, this.page ,this.pageSize ).subscribe(
        afiliados => {
          this.dataList = afiliados.data
          this.collectionSize = afiliados.meta.totalCount;
          this.pageSize = afiliados.meta.pageSize;
          this.statusDetail = 'init';
        }
      );
    }
    
  }

  toggleModal(){
    this.showModal = !this.showModal;
  }

  field(name: string) {
    return {
        get: () => this.form.get(name),
        isValid: () => this.form.get(name).touched && this.form.get(name).valid
    };
}

}

---------------------------------------
buscar-arbol-nocampo.component.html
************
<form>
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">

      <app-buscar-arbol (selected)="Seleccionar($event)" [isActividadPlantula]="isActividadPlantulaBusqueda">

      </app-buscar-arbol>
      <div class="p-1">
        <div class="grid gap-2 mb-2 md:grid-cols-2">

          <p-table [value]="crossSilviculturales">
            <ng-template pTemplate="header">
              <tr>
                <th>Numero de individuo - ID</th>
                <th>Numero de arbol a campo</th>

              </tr>
            </ng-template>
            <ng-template pTemplate="body" let-product let-rowIndex="rowIndex">
              <tr>
                <td>{{ product.numeroIndividuoId }}</td>
                <td>
                  <input pInputText type="text" id="numeroArbolCampo-{{rowIndex}}" name="numeroArbolCampo-{{rowIndex}}" [(ngModel)]="product.numeroArbolCampo" /> 
                </td>
              </tr>
            </ng-template>
          </p-table>
        </div>
      </div>
    </div>
  </div>
---------------------------------------
buscar-arbol-nocampo.component.scss
************

---------------------------------------
buscar-arbol-nocampo.component.ts
************
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder } from '@angular/forms';

import { CrossActividadesSilviculturalesDto } from 'src/app/core/models/cross-actividades-silviculturales-dto.model';

import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';

@Component({
  selector: 'app-buscar-arbol-nocampo',
  templateUrl: './buscar-arbol-nocampo.component.html',
  styleUrls: ['./buscar-arbol-nocampo.component.scss'],
})
export class BuscarArbolNoCampoComponent {
  crossSilviculturales: CrossActividadesSilviculturalesDto[] =
    new Array<CrossActividadesSilviculturalesDto>();

    isActividadPlantulaBusqueda : boolean = false;

  @Input()
  set isActividadPlantula (param : boolean) {
    
    this.isActividadPlantulaBusqueda = param;      
  };

  constructor(
    private formbuilder: FormBuilder,
    private service: CensoArboreoService
  ) {}

  Seleccionar(event) {
        
    let item = new CrossActividadesSilviculturalesDto();
    item.censoArboreoId = event.id;    
    item.numeroIndividuoId = event.numeroIndividuoId;
    item.numeroArbolCampo = (this.crossSilviculturales.length +1)+ "";
    this.crossSilviculturales.push(item);
  }

  getCrossBuscarArbol(){
    return this.crossSilviculturales;
  }

  public isValid() : boolean {
    return this.crossSilviculturales.length == 0;
  }
}

---------------------------------------
cargar-manual.component.html
************
<app-btn
color="green"
(click)="toggleModal()"> Cargar Censo Arboreo </app-btn>

<app-modal [titulo]="'Cargue Manual de Censo Arboreo'" [botonModal]="'Cargar Censo'" [ShowModal]="showModal" (cerrarModalEvent)="cerrarModal($event)">
  <section class="my-4 text-slate-500 text-lg leading-relaxed">
    <form [formGroup]="form">
      <p class="my-4 text-slate-500 text-lg leading-relaxed">
        Debes seleccionar un archivo de censo arboreo valido para realizar la carga de manera exitosa.
      </p>
      <section>
        <a class="flex justify-end" href="assets/CargarCensos.csv" download>Descargar Plantilla</a>
      </section>
        <section>
          <app-file-upload (fileUploaded)="onFileUploaded($event)"></app-file-upload>
          <label *ngIf="selectedFile">Archivo preparado: {{selectedFile.name}}</label>
        </section>
        <br>
        <section>
          <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
            Ha ocurrido un error al cargar.
          </div>
          <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
            La operacion se ha realizado con exito.
          </div>
          <div *ngIf="isFormInValid" class="alert alert-danger" role="alert">
            <ul>
            </ul>
          </div>
        </section>
        <br>
        <div class="flex justify-end space-x-4">
          <app-btn  typeBtn="submit"
          *ngIf="selectedFile"
          color="primary"
          [loading]="statusDetail === 'loading'"
          (click)="cargarArchivo()">Cargar Archivo</app-btn>
        </div>
    </form>

  </section>
</app-modal>

---------------------------------------
cargar-manual.component.scss
************

---------------------------------------
cargar-manual.component.ts
************
//import { LecturasComponent } from './../../containers/lecturas/lecturas.component';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';

@Component({
  selector: 'app-cargar-manual',
  templateUrl: './cargar-manual.component.html',
  styleUrls: ['./cargar-manual.component.scss']
})
export class CargarManualComponent {

  form:FormGroup;
  selectedFile: File = null;
  statusDetail: RequestStatus = 'init';
  @Output() cargarLecturasEvent= new EventEmitter();

  constructor(private formbuilder:FormBuilder,
    private service: CensoArboreoService){
    this.BuildForm();
  }



  cargarArchivo()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }

    this.statusDetail = "loading";
    const fd = new FormData();
    fd.append('File', this.selectedFile, this.selectedFile.name);

    this.service.uploadFile(fd,this.selectedFile.size).subscribe(
      (res) => {
        //console.log(res);
        this.statusDetail = "success";
      },
      (err) => {
        //console.log(err);
        this.statusDetail = "error";
      }
    );
  }

  /*Codigo para Modal*/
  @Input() showModal: boolean = false;

  toggleModal()
  {
    this.showModal = !this.showModal;
  }

  cerrarModal(data)
  {
    this.showModal = data;
  }
  /* Fin Codigo para Modal*/

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  private BuildForm(){
    this.form = this.formbuilder.group({
    })
  }

  onFileUploaded(file: File) {
    this.selectedFile = file;
  }
}

---------------------------------------
cargar-manual-actividades.component.html
************
<app-btn
color="green"
(click)="toggleModal()"> Cargar Actividades </app-btn>

<app-modal [titulo]="'Cargue Manual de Actividades'" [botonModal]="'Cargar Censo'" [ShowModal]="showModal" (cerrarModalEvent)="cerrarModal($event)">
  <section class="my-4 text-slate-500 text-lg leading-relaxed">
    <form [formGroup]="form">
      <p class="my-4 text-slate-500 text-lg leading-relaxed">
        Debes seleccionar un archivo de Actividades valido para realizar la carga de manera exitosa.
      </p>
      <section>
        <a class="flex justify-end" href="assets/Actividades.csv" download>Descargar Plantilla</a>
      </section>
        <section>
          <app-file-upload (fileUploaded)="onFileUploaded($event)"></app-file-upload>
          <label *ngIf="selectedFile">Archivo preparado: {{selectedFile.name}}</label>
        </section>
        <br>
        <section>
          <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
            Ha ocurrido un error al cargar.
          </div>
          <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
            La operacion se ha realizado con exito.
          </div>
          <div *ngIf="isFormInValid" class="alert alert-danger" role="alert">
            <ul>
            </ul>
          </div>
        </section>
        <br>
        <div class="flex justify-end space-x-4">
          <app-btn  typeBtn="submit"
          *ngIf="selectedFile"
          color="primary"
          [loading]="statusDetail === 'loading'"
          (click)="cargarArchivo()">Cargar Archivo</app-btn>
        </div>
    </form>

  </section>
</app-modal>

---------------------------------------
cargar-manual-actividades.component.scss
************

---------------------------------------
cargar-manual-actividades.component.ts
************
//import { LecturasComponent } from './../../containers/lecturas/lecturas.component';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { ActividadesSilviculturalesService } from 'src/app/core/services/actividadessilviculturales.service';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';

@Component({
  selector: 'app-cargar-manual-actividades',
  templateUrl: './cargar-manual-actividades.component.html',
  styleUrls: ['./cargar-manual-actividades.component.scss']
})
export class CargarManualActividadesComponent {

  form:FormGroup;
  selectedFile: File = null;
  statusDetail: RequestStatus = 'init';
  @Output() cargarLecturasEvent= new EventEmitter();

  constructor(private formbuilder:FormBuilder,
    private service: ActividadesSilviculturalesService){
    this.BuildForm();
  }



  cargarArchivo()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }

    this.statusDetail = "loading";
    const fd = new FormData();
    fd.append('File', this.selectedFile, this.selectedFile.name);

    this.service.uploadFile(fd,this.selectedFile.size).subscribe(
      (res) => {
        //console.log(res);
        this.statusDetail = "success";
      },
      (err) => {
        //console.log(err);
        this.statusDetail = "error";
      }
    );
  }

  /*Codigo para Modal*/
  @Input() showModal: boolean = false;

  toggleModal()
  {
    this.showModal = !this.showModal;
  }

  cerrarModal(data)
  {
    this.showModal = data;
  }
  /* Fin Codigo para Modal*/

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  private BuildForm(){
    this.form = this.formbuilder.group({
    })
  }

  onFileUploaded(file: File) {
    this.selectedFile = file;
  }
}

---------------------------------------
cargar-manual-espacios.component.html
************
<app-btn
color="green"
(click)="toggleModal()"> Cargar Espacios Potenciales </app-btn>

<app-modal [titulo]="'Cargue Manual de Espacios Potenciales'" [botonModal]="'Cargar Censo'" [ShowModal]="showModal" (cerrarModalEvent)="cerrarModal($event)">
  <section class="my-4 text-slate-500 text-lg leading-relaxed">
    <form [formGroup]="form">
      <p class="my-4 text-slate-500 text-lg leading-relaxed">
        Debes seleccionar un archivo de Espacios Potenciales valido para realizar la carga de manera exitosa.
      </p>
      <section class="mt-4 text-right">
        <a class="inline-block bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-3 rounded" href="assets/EspaciosPotenciales.csv" download>Descargar Plantilla</a>
      </section>
      
      

        <section>
          <app-file-upload (fileUploaded)="onFileUploaded($event)"></app-file-upload>
          <label *ngIf="selectedFile">Archivo preparado: {{selectedFile.name}}</label>
        </section>
        <br>
        <section>
          <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
            Ha ocurrido un error al cargar.
          </div>
          <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
            La operacion se ha realizado con exito.
          </div>
          <div *ngIf="isFormInValid" class="alert alert-danger" role="alert">
            <ul>
            </ul>
          </div>
        </section>
        <br>
        <div class="flex justify-end space-x-4">
          <app-btn  typeBtn="submit"
          *ngIf="selectedFile"
          color="primary"
          [loading]="statusDetail === 'loading'"
          (click)="cargarArchivo()">Cargar Archivo</app-btn>
        </div>
    </form>

  </section>
</app-modal>

---------------------------------------
cargar-manual-espacios.component.scss
************

---------------------------------------
cargar-manual-espacios.component.ts
************
//import { LecturasComponent } from './../../containers/lecturas/lecturas.component';
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';
import { EspaciosPotencialesService } from 'src/app/core/services/espaciospotenciales.service';

@Component({
  selector: 'app-cargar-manual-espacios',
  templateUrl: './cargar-manual-espacios.component.html',
  styleUrls: ['./cargar-manual-espacios.component.scss']
})
export class CargarManualEspaciosComponent {

  form:FormGroup;
  selectedFile: File = null;
  statusDetail: RequestStatus = 'init';
  @Output() cargarLecturasEvent= new EventEmitter();

  constructor(private formbuilder:FormBuilder,
    private service: EspaciosPotencialesService){
    this.BuildForm();
  }



  cargarArchivo()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }

    this.statusDetail = "loading";
    const fd = new FormData();
    fd.append('File', this.selectedFile, this.selectedFile.name);

    this.service.uploadFile(fd,this.selectedFile.size).subscribe(
      (res) => {
        //console.log(res);
        this.statusDetail = "success";
      },
      (err) => {
        //console.log(err);
        this.statusDetail = "error";
      }
    );
  }

  /*Codigo para Modal*/
  @Input() showModal: boolean = false;

  toggleModal()
  {
    this.showModal = !this.showModal;
  }

  cerrarModal(data)
  {
    this.showModal = data;
  }
  /* Fin Codigo para Modal*/

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  private BuildForm(){
    this.form = this.formbuilder.group({
    })
  }

  onFileUploaded(file: File) {
    this.selectedFile = file;
  }
}

---------------------------------------
formulario-censoarboreo.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">CensoArboreo</h1>
</div>
<div class="flex justify-end space-x-4">
  <app-btn *ngIf="!isNew && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
    (click)="mostrarConfirmacion()">Borrar</app-btn>

  <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
    (click)="Guardar()">Guardar</app-btn>

  <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
    (click)="Actualizar()">Actualizar</app-btn>
</div>
<br />
<form [formGroup]="form">
  <div class="card mb-4">
    <div class="bg-white rounded-lg shadow-md">
      <div class="bg-gray-500 text-white px-4 py-2">
        Información del individuo
        <span class="font-bold" *ngIf="censoArboreo && censoArboreo.id">{{
          censoArboreo.id
          }}</span>
      </div><br><br><br><br>
      <div class="flex justify-center items-center" style="height: 300px;">

          <div class="bg-green-200 p-2 rounded-lg shadow-lg"><br>
            <label for="coordenadasGeograficasYPlanas"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Coordenadas geográficas y
              planas:</label>
            <app-coordenada-xy #coordenadasComponent [dataForm]="onlyCoordenadas"></app-coordenada-xy>
          </div>

      </div><br><br><br>  <hr class="border-b-2 border-green-500">
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="numeroIndividuoId"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Número de individuo ID:</label>
            <input type="text" formControlName="numeroIndividuoId" id="numeroIndividuoId"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Número de individuo ID" [ngClass]="{
                required:
                  form.get('numeroIndividuoId').invalid &&
                  form.get('numeroIndividuoId').touched
              }" />
          </div>
          <div>
            <label for="alturaTotal" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Altura
              total:</label>
            <input type="text" appNumberInput formControlName="alturaTotal" id="alturaTotal"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Altura total" [ngClass]="{
                required:
                  form.get('alturaTotal').invalid &&
                  form.get('alturaTotal').touched
              }" />
          </div>
          <div>
            <label for="alturaComercial"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Altura comercial:</label>
            <input type="text" appNumberInput formControlName="alturaComercial" id="alturaComercial"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Altura comercial" [ngClass]="{
                required:
                  form.get('alturaComercial').invalid &&
                  form.get('alturaComercial').touched
              }" />
          </div>
          <div>
            <label for="cuadrilla"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cuadrilla:</label>
            <input type="text" formControlName="cuadrilla" id="cuadrilla"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Cuadrilla" [ngClass]="{
                required:
                  form.get('cuadrilla').invalid && form.get('cuadrilla').touched
              }" />
          </div>
          <div>
            <label for="formaCopa" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Forma de la copa:</label>


            <ng-select
              [items]="formaCopa" bindLabel="nombre" bindValue="nombre" formControlName="formaCopa"
              placeholder="Forma de la copa"
              [ngClass]="{
                required:
                  form.get('formaCopa').invalid && form.get('formaCopa').touched
              }"
              >
            </ng-select>


        </div>
          <div>
            <label for="diametroCopa" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Diámetro
              de la copa:</label>
            <input type="text" appNumberInput formControlName="diametroCopa" id="diametroCopa"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Diámetro de la copa" [ngClass]="{
                required:
                  form.get('diametroCopa').invalid &&
                  form.get('diametroCopa').touched
              }" />
          </div>
          <div>
            <label for="alturaCopa" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Altura de la
              copa:</label>
            <input type="text" appNumberInput formControlName="alturaCopa" id="alturaCopa"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Altura de la copa" [ngClass]="{
                required:
                  form.get('alturaCopa').invalid &&
                  form.get('alturaCopa').touched
              }" />
          </div>
          <div>
            <label for="observacionCopa"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Observación de la copa:</label>

            <textarea type="text" formControlName="observacionCopa" id="observacionCopa"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Observación de la copa" [ngClass]="{
                required:
                  form.get('observacionCopa').invalid &&
                  form.get('observacionCopa').touched
              }"> </textarea>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="card mb-4">
    <div class="bg-white rounded-lg shadow-md">
      <div class="bg-gray-500 text-white px-4 py-2">DAP</div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="dap" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">DAP:</label>
            <input type="text" appNumberInput formControlName="dap" id="dap"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="DAP" [ngClass]="{
                required: form.get('dap').invalid && form.get('dap').touched
              }" />
          </div>
          <div>
            <label for="dap2" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">DAP 2:</label>
            <input type="text" appNumberInput formControlName="dap2" id="dap2"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="DAP 2" [ngClass]="{
                required: form.get('dap2').invalid && form.get('dap2').touched
              }" />
          </div>
          <div>
            <label for="dap3" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">DAP 3:</label>
            <input type="text" appNumberInput formControlName="dap3" id="dap3"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="DAP 3" [ngClass]="{
                required: form.get('dap3').invalid && form.get('dap3').touched
              }" />
          </div>
          <div>
            <label for="dap4" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">DAP 4:</label>
            <input type="text" appNumberInput formControlName="dap4" id="dap4"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="DAP 4" [ngClass]="{
                required: form.get('dap4').invalid && form.get('dap4').touched
              }" />
          </div>
          <div>
            <label for="ndaptotal" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">NDAP
              total:</label>
            <input type="text" appNumberInput formControlName="ndaptotal" id="ndaptotal"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="NDAP total" [ngClass]="{
                required:
                  form.get('ndaptotal').invalid && form.get('ndaptotal').touched
              }" />
          </div>
          <div>
            <label for="daptotal" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">DAP
              total:</label>
            <input type="text" appNumberInput formControlName="daptotal" id="daptotal" readonly
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="DAP total" [ngClass]="{
                required:
                  form.get('daptotal').invalid && form.get('daptotal').touched
              }" />
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="card mb-4">
    <div class="bg-white rounded-lg shadow-md ">
      <div class="bg-gray-500 text-white px-4 py-2">Clasificacion</div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div style="display: none;">
            <label for="numeroFustes" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Número de
              fustes:</label>
            <input type="text" appNumberInput formControlName="numeroFustes" id="numeroFustes"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Número de fustes" [ngClass]="{
                required:
                  form.get('numeroFustes').invalid &&
                  form.get('numeroFustes').touched
              }" />
          </div>
          <div>
            <label for="nombreComun" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nombre
              común:</label>
            <input readonly type="text" formControlName="nombreComun" id="nombreComun"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Nombre común" [ngClass]="{
                required:
                  form.get('nombreComun').invalid &&
                  form.get('nombreComun').touched
              }" />
          </div>
          <div>
            <label for="nombreCientifico" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nombre
              científico:</label>
            <input readonly type="text" formControlName="nombreCientifico" id="nombreCientifico"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Nombre científico" [ngClass]="{
                required:
                  form.get('nombreCientifico').invalid &&
                  form.get('nombreCientifico').touched
              }" />
          </div>
          <div>
            <label for="orden" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Orden:</label>
            <input readonly type="text" formControlName="orden" id="orden"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Orden" [ngClass]="{
                required: form.get('orden').invalid && form.get('orden').touched
              }" />
          </div>
          <div>
            <label for="familia"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Familia:</label>
            <input readonly type="text" formControlName="familia" id="familia"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Familia" [ngClass]="{
                required:
                  form.get('familia').invalid && form.get('familia').touched
              }" />
          </div>
          <div>
            <label for="genero" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Género:</label>
            <input readonly type="text" formControlName="genero" id="genero"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Género" [ngClass]="{
                required:
                  form.get('genero').invalid && form.get('genero').touched
              }" />
          </div>
          <div>
            <label for="especie"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Especie:</label>
            <input readonly type="text" formControlName="especie" id="especie"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Especie" [ngClass]="{
                required:
                  form.get('especie').invalid && form.get('especie').touched
              }" />
          </div>
          <div>
            <label for="clasificado" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Clasificacion:</label>
           <ng-select
              [items]="clasificado" bindLabel="etiqueta" bindValue="id" formControlName="clasificacionId"
              placeholder=""
              (change)="escucharCambios($event)"
              [ngClass]="{
                required:
                !field('clasificacionId').isValid()
              }"
              >
            </ng-select>
        </div>
        </div>
      </div>
    </div>
  </div>

  <div class="card mb-4">
    <div class="bg-white rounded-lg shadow-md">
      <div class="bg-gray-500 text-white px-4 py-2">Información General</div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="altitudASNM" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Altitud
              ASNM:</label>
            <input type="text" appNumberInput formControlName="altitudASNM" id="altitudASNM"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Altitud ASNM" [ngClass]="{
                required:
                  form.get('altitudASNM').invalid &&
                  form.get('altitudASNM').touched
              }" />
          </div>
          <div>
            <label for="estadoFitosanitario"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Estado fitosanitario:</label>

            <ng-select
              [items]="estadosFito" bindLabel="nombre" bindValue="nombre" formControlName="estadoFitosanitario" [multiple]="true" >
            </ng-select>


          </div>
          <div>
            <label for="estadoMadurez" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Estado de
              madurez:</label>
            <ng-select
              [items]="madurez" bindLabel="nombre" bindValue="nombre" formControlName="estadoMadurez"
              placeholder="Forma de la copa"
              [ngClass]="{
                required:
                  form.get('estadoMadurez').invalid && form.get('estadoMadurez').touched
              }"
              >
            </ng-select>
          </div>
          <div>
            <label for="tipoIndividuoForestal"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Tipo de individuo
              forestal:</label>


          <ng-select
              [items]="tipoIndividuo" bindLabel="nombre" bindValue="nombre" formControlName="tipoIndividuoForestal"
              placeholder="Forma de la copa"
              [ngClass]="{
                required:
                  form.get('tipoIndividuoForestal').invalid && form.get('tipoIndividuoForestal').touched
              }"
              >
            </ng-select>


          </div>
          <div>
            <label for="departamento"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Departamento:</label>
            <input type="text" formControlName="departamento" id="departamento"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Departamento" [ngClass]="{
                required:
                  form.get('departamento').invalid &&
                  form.get('departamento').touched
              }" />
          </div>
          <div>
            <label for="ciudad" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Ciudad:</label>
            <input type="text" formControlName="ciudad" id="ciudad"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Ciudad" [ngClass]="{
                required:
                  form.get('ciudad').invalid && form.get('ciudad').touched
              }" />
          </div>
          <div>
            <label for="tipoAglomeracion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Tipo
              de aglomeración:</label>
            <input type="text" formControlName="tipoAglomeracion" id="tipoAglomeracion"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Tipo de aglomeración" [ngClass]="{
                required:
                  form.get('tipoAglomeracion').invalid &&
                  form.get('tipoAglomeracion').touched
              }" />
          </div>

          <div>
            <label for="comuna" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Comuna:</label>
              <ng-select
                [items]="Comunas" bindLabel="descripcion" bindValue="descripcion" formControlName="comuna"
                placeholder="Comuna"
                (change)="changeLeagueOwner($event)"
                [ngClass]="{
                  required:
                    form.get('comuna').invalid && form.get('comuna').touched
                }"
                >
              </ng-select>
          </div>
          <div>
            <label for="barrio" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Barrio:</label>
          <ng-select
            [items]="Barrios" bindLabel="descripcion" bindValue="descripcion" formControlName="barrio"
            placeholder="Barrio"
            [ngClass]="{
              required:
                form.get('barrio').invalid && form.get('barrio').touched
            }"
            >
          </ng-select>



          </div>
          <div>
            <label for="tipoEmplazamiento" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Tipo
              de emplazamiento:</label>


              <ng-select
                [items]="tipoEmpla" bindLabel="nombre" bindValue="nombre" formControlName="tipoEmplazamiento"
                placeholder="Tipode emplazamiento:"
                [ngClass]="{
                  required:
                    form.get('tipoEmplazamiento').invalid && form.get('tipoEmplazamiento').touched
                }"
                >
              </ng-select>

          </div>
          <div>
            <label for="observacionTipoEmplazamiento"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Observación del tipo de
              emplazamiento:</label>
            <textarea type="text" formControlName="observacionTipoEmplazamiento" id="observacionTipoEmplazamiento"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Observación del tipo de emplazamiento" [ngClass]="{
                required:
                  form.get('observacionTipoEmplazamiento').invalid &&
                  form.get('observacionTipoEmplazamiento').touched
              }"> </textarea>
          </div>
          <div>
            <label for="infraestructuraAfectada"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Infraestructura afectada:</label>

              <ng-select
                [items]="infraAfec" bindLabel="nombre" bindValue="nombre" formControlName="infraestructuraAfectada" [multiple]="true"
                placeholder="Infraestructura afectada:"
                [ngClass]="{
                  required:
                    form.get('infraestructuraAfectada').invalid && form.get('infraestructuraAfectada').touched
                }"
                >
              </ng-select>

          </div>
          <div>
            <label for="observacionInfraestructuraAfectada"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Observación de la infraestructura
              afectada:</label>
            <textarea type="text" formControlName="observacionInfraestructuraAfectada"
              id="observacionInfraestructuraAfectada"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Observación de la infraestructura afectada" [ngClass]="{
                required:
                  form.get('observacionInfraestructuraAfectada').invalid &&
                  form.get('observacionInfraestructuraAfectada').touched
              }"> </textarea>
          </div>
          <div>
            <label for="apendiceCites" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Apéndice
              CITES:</label>
            <input type="checkbox" formControlName="apendiceCites" id="apendiceCites"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Apéndice CITES" [ngClass]="{
                required:
                  form.get('apendiceCites').invalid &&
                  form.get('apendiceCites').touched
              }" />
          </div>
          <div>
            <label for="categoriaUicn" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Categoría
              UICN:</label>
            <input type="checkbox" formControlName="categoriaUicn" id="categoriaUicn"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Categoría UICN" [ngClass]="{
                required:
                  form.get('categoriaUicn').invalid &&
                  form.get('categoriaUicn').touched
              }" />
          </div>
          <div>
            <label for="categoriaMinisterioResolucion01922014"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Categoría Ministerio Resolución
              019/2014:</label>
            <input type="checkbox" formControlName="categoriaMinisterioResolucion01922014"
              id="categoriaMinisterioResolucion01922014"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Categoría Ministerio Resolución 019/2014" [ngClass]="{
                required:
                  form.get('categoriaMinisterioResolucion01922014').invalid &&
                  form.get('categoriaMinisterioResolucion01922014').touched
              }" />
          </div>
          <div>
            <label for="especieEndemica" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Especie
              endémica:</label>
            <input type="checkbox" formControlName="especieEndemica" id="especieEndemica"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Especie endémica" [ngClass]="{
                required:
                  form.get('especieEndemica').invalid &&
                  form.get('especieEndemica').touched
              }" />
          </div>
          <div>
            <label for="origen" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Origen:</label>
            <ng-select
                [items]="origenes" bindLabel="nombre" bindValue="nombre" formControlName="origen"
                placeholder="Origen"
                [ngClass]="{
                  required:
                    form.get('origen').invalid && form.get('origen').touched
                }"
                >
              </ng-select>
          </div>
          <div>
            <label for="isGuadua" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Es Guadua:</label>
            <input type="checkbox" formControlName="isGuadua" id="isGuadua"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Es guadua" [ngClass]="{
                required:
                  form.get('isGuadua').invalid &&
                  form.get('isGuadua').touched
              }" />
          </div>


        </div>
      </div>
    </div>
  </div>
  <div class="card mb-4">
    <div class="bg-white rounded-lg shadow-md">
      <div class="bg-gray-500 text-white px-4 py-2">Observaciones</div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="observacion"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Observación:</label>
            <textarea type="text" formControlName="observacion" id="observacion"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Observación" [ngClass]="{
                required:
                  form.get('observacion').invalid &&
                  form.get('observacion').touched
              }"> </textarea>
          </div>
          <div>
            <label for="fecha" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Fecha:</label>
            <input type="Date" formControlName="fecha" id="fecha"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Fecha" [ngClass]="{
                required: form.get('fecha').invalid && form.get('fecha').touched
              }" />
          </div>
          <div>
            <label for="recomendacionesParaManejoSilvicultural"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Recomendaciones para el manejo
              silvicultural:</label>


          <ng-select
              [items]="recomendacionesParaManejoSilviculturalLista" bindLabel="nombre" bindValue="nombre" formControlName="recomendacionesParaManejoSilvicultural"
              placeholder="Recomendaciones para el manejo silvicultural" [multiple]="true"
              [ngClass]="{
                required:
                  form.get('recomendacionesParaManejoSilvicultural').invalid && form.get('recomendacionesParaManejoSilvicultural').touched
              }"
              >
            </ng-select>

          </div>


        </div>
      </div>
    </div>
  </div>
  <div class="card mb-4">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Registro Fotografico</div>
      <div class="p-12">
        <div class="grid gap-6 mb-6 md:grid-cols-1">



            <label for="registroFotografico"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Registro fotográfico:</label>
            <app-registrofotografico #registroFotografico [dataForm]="onlyRegistroFotografico"></app-registrofotografico>


		  </div></div></div></div>
  <br />
  <div *ngIf="statusDetail === 'error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el censoArboreo.
  </div>
  <div *ngIf="isFormInValid" class="alert alert-danger" role="alert">
   Hay campos que faltan por llenar.
  </div>
  <div *ngIf="statusDetail === 'success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br />
  <div class="flex justify-end space-x-4">
    <app-btn *ngIf="!isNew  && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'" style="display: none;"
      (click)="mostrarConfirmacion()">Borrar</app-btn>

    <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Guardar()">Guardar</app-btn>

    <app-btn *ngIf="!isNew  && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Actualizar()">Actualizar</app-btn>
  </div>
</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">
      No
    </button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">
      Si
    </button>
  </div>
</ng-template>

---------------------------------------
formulario-censoarboreo.component.scss
************
.fixed-container {
  height: 400px;
  width: 300px;
}
---------------------------------------
formulario-censoarboreo.component.ts
************
import { ClasificacionDto } from './../../../../core/models/clasificacion.model';
import { formatDate } from '@angular/common';
import { Component, EventEmitter, Input, OnInit, Output, ViewChild, } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CensoArboreoDto, CoordenadaDto, RegistroFotograficoCensoDto, } from 'src/app/core/models/censoarboreo-dto.model';
import { DetalleDto } from 'src/app/core/models/detalle-dto.model';
import { MaestraDetalleCombo } from 'src/app/core/models/maestradetalle.mode';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { DetalleService } from 'src/app/core/services/detalle.service';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import { CoordenadaComponent } from 'src/app/modules/sharedcomponent/coordenada/coordenada.component';
import { RegistroFotograficoComponent } from 'src/app/modules/sharedcomponent/registrofotografico/registrofotografico.component';
import { Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
import { EsriMapService } from 'src/app/core/services/EsriMap.service';
import { ClasificacionService } from 'src/app/core/services/clasificacion-service';
import { BasicTableService } from 'src/app/core/services/basictable.service';
import { GenericPredecesorSucesorTableDto } from 'src/app/core/models/generic-predecesor-sucesor-dto.model';
@Component({
  selector: 'app-formulario-censoArboreo',
  templateUrl: './formulario-censoArboreo.component.html',
  styleUrls: ['./formulario-censoArboreo.component.scss'],
})
export class FormularioCensoArboreoComponent implements OnInit {
  @ViewChild('coordenadasComponent')
  coordenadas: CoordenadaComponent;

  @ViewChild('registroFotografico')
  registroFotosComponent: RegistroFotograficoComponent;

  statusDetail: RequestStatus = 'init';
  form: FormGroup;
  isNew: boolean = false;
  userNameRequired: boolean = false;
  passwordRequired: boolean = false;
  censoArboreo: CensoArboreoDto;
  formaCopa: DetalleDto[];
  estadosFito: DetalleDto[];
  madurez: DetalleDto[];
  tipoIndividuo: DetalleDto[];
  tipoEmpla: DetalleDto[];
  infraAfec: DetalleDto[];
  origenes: DetalleDto[];
  clasificado:ClasificacionDto[];

  Comunas:GenericPredecesorSucesorTableDto[];
  Barrios:GenericPredecesorSucesorTableDto[];

  recomendacionesParaManejoSilviculturalLista :DetalleDto[];
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  coordenadasList: CoordenadaDto[] = [];

  coordsList: CoordenadaDto[] = [
    { id: "", latitud: 7.147551442, longitud: -73.12981657, altitud: 'not specified', norte: 'not specified', este: 'not specified' },
    { id: "", latitud: 7.1150, longitud: -73.1100, altitud: 'not specified', norte: 'not specified', este: 'not specified' },
    { id: "", latitud: 7.1200, longitud: -73.1140, altitud: 'not specified', norte: 'not specified', este: 'not specified' },
    { id: "", latitud: 7.1250, longitud: -73.1220, altitud: 'not specified', norte: 'not specified', este: 'not specified' },
    { id: "", latitud: 7.1100, longitud: -73.1180, altitud: 'not specified', norte: 'not specified', este: 'not specified' }
  ];

  onlyCoordenadas: CoordenadaDto = new CoordenadaDto();
  onlyRegistroFotografico: RegistroFotograficoCensoDto[] = new Array<RegistroFotograficoCensoDto>();

  @Input()
  set dataForm(data: CensoArboreoDto) {
    console.log(data);
    if (data) {
      this.isNew = false;

      this.form.patchValue(data);
      if (data.fecha) {
        const fechaCorteString = formatDate(data.fecha, 'yyyy-MM-dd', 'en-US');
        this.form.patchValue({ fecha: fechaCorteString });
      }

      //repairDAP
      this.form.patchValue({ dap2: data["daP2"] });
      this.form.patchValue({ dap3: data["daP3"] });
      this.form.patchValue({ dap4: data["daP4"] });
      try {
        this.form.patchValue({ estadoFitosanitario: JSON.parse(data["estadoFitosanitario"]) });
        this.form.patchValue({ recomendacionesParaManejoSilvicultural: JSON.parse(data["recomendacionesParaManejoSilvicultural"]) });
        this.form.patchValue({ infraestructuraAfectada: JSON.parse(data["infraestructuraAfectada"]) });
      } catch (error) {

      }


      this.form.markAllAsTouched();

      this.censoArboreo = data;
      this.onlyCoordenadas = this.censoArboreo.coordenada;

      this.onlyRegistroFotografico = this.censoArboreo.fotos;
    } else {
      this.initializedObj(data);
      this.isNew = true;
    }
  }

  private initializedObj(data: CensoArboreoDto) {
    if (!data) {
      data = new CensoArboreoDto();
    }
    if (!data.coordenada) {
      data.coordenada = new CoordenadaDto();
    }
  }

  @Input()
  set status(data: RequestStatus) {
    if (data) {
      this.statusDetail = data;
    }
  }

  @Output() create = new EventEmitter();
  @Output() update = new EventEmitter();
  @Output() delete = new EventEmitter();

  constructor(
    private formbuilder: FormBuilder,
    private sweetAlertService: SweetAlertService,
    private detallesService: DetalleService,
    private habilitaracciones: Habilitaracciones,
    private clasificacionService: ClasificacionService,
    private basicTableService: BasicTableService,

  ) {
    this.BuildForm();
    this.getFormaCopa();
    this.getEstadoFito();
    this.getMadurez();
    this.getTipoIndividuo();
    this.getTipoEmpla();
    this.getInfraAfec();
    this.getClasificacion();
    this.getComunas();
  }

  ngOnInit(): void {
    this.origenes = new Array<DetalleDto>();
    let nativa = new DetalleDto();
    nativa.codigo = "Nativa";
    nativa.nombre = "Nativa";
    let introducida = new DetalleDto();
    introducida.codigo = "Introducida";
    introducida.nombre = "Introducida";
    this.origenes.push(nativa);
    this.origenes.push(introducida);


    this.recomendacionesParaManejoSilviculturalLista = new Array<DetalleDto>();
    this.recomendacionesParaManejoSilviculturalLista.push(new DetalleDto('Poda'));
    this.recomendacionesParaManejoSilviculturalLista.push(new DetalleDto('Fertilizacion'));
    this.recomendacionesParaManejoSilviculturalLista.push(new DetalleDto('Tala'));
    this.recomendacionesParaManejoSilviculturalLista.push(new DetalleDto('Traslado'));

  }


  escucharCambios(data: ClasificacionDto) {
      console.log("seleccionado");
      this.form.patchValue({ orden: data.orden.descripcion });
      this.form.patchValue({ familia: data.familia.descripcion });
      this.form.patchValue({ especie: data.especie.descripcion });
      this.form.patchValue({ genero: data.genero.descripcion });
      this.form.patchValue({ nombreComun: data.nombreComun });
      this.form.patchValue({ nombreCientifico: data.nombreCientifico });
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      numeroIndividuoId: ['', [Validators.required]],
      alturaTotal: ['', [Validators.required]],
      alturaComercial: ['', [Validators.required]],
      cuadrilla: ['', [Validators.required]],
      formaCopa: ['', [Validators.required]],
      diametroCopa: ['', [Validators.required]],
      alturaCopa: ['', [Validators.required]],
      observacionCopa: ['', [Validators.required]],
      dap: ['0', [Validators.required]],
      dap2: ['0', [Validators.required]],
      dap3: ['0', [Validators.required]],
      dap4: ['0', [Validators.required]],
      ndaptotal: ['', [Validators.required]],
      daptotal: ['', [Validators.required]],
      numeroFustes: ['0', []],
      nombreComun: ['', []],
      nombreCientifico: ['', []],
      orden: ['', []],
      familia: ['', []],
      genero: ['', []],
      especie: ['', []],
      altitudASNM: ['', [Validators.required]],
      estadoFitosanitario: ['', [Validators.required]],
      estadoMadurez: ['', [Validators.required]],
      tipoIndividuoForestal: ['', [Validators.required]],
      departamento: ['Santander', [Validators.required]],
      ciudad: ['Bucaramanga', [Validators.required]],
      tipoAglomeracion: ['', [Validators.required]],
      barrio: ['', [Validators.required]],
      comuna: ['', [Validators.required]],
      tipoEmplazamiento: ['', [Validators.required]],
      observacionTipoEmplazamiento: ['', [Validators.required]],
      infraestructuraAfectada: ['', [Validators.required]],
      observacionInfraestructuraAfectada: ['', [Validators.required]],
      apendiceCites: [false, [Validators.required]],
      categoriaUicn: [false, [Validators.required]],
      categoriaMinisterioResolucion01922014: [false, [Validators.required]],
      especieEndemica: [false, [Validators.required]],
      origen: ['', [Validators.required]],
      observacion: ['', [Validators.required]],
      fecha: ['', [Validators.required]],
      recomendacionesParaManejoSilvicultural: ['', [Validators.required]],
      isGuadua: [false, [Validators.required]],
      clasificacionId: ['', [Validators.required]],
    });

    this.form.get('dap').valueChanges.subscribe(() => this.actualizarDapTotal());
    this.form.get('dap2').valueChanges.subscribe(() => this.actualizarDapTotal());
    this.form.get('dap3').valueChanges.subscribe(() => this.actualizarDapTotal());
    this.form.get('dap4').valueChanges.subscribe(() => this.actualizarDapTotal());


    const resultados = this.habilitaracciones.MostrarBotones('Censo');

    if (resultados.length > 0) {
      resultados.forEach(resultado => {
        this.mostraDelete = resultado.eliminar;
        this.mostraUpdate = resultado.editar;

      });
    }

  }

  private actualizarDapTotal() {

    const dap = this.form.get('dap').value;
    const dap2 = this.form.get('dap2').value;
    const dap3 = this.form.get('dap3').value;
    const dap4 = this.form.get('dap4').value;

    let dapTotalSuma = Number(dap)+  Number(dap2) + Number(dap3) +Number(dap4);

    // Actualizar el valor de dapTotal en el formulario
    this.form.patchValue({ daptotal : dapTotalSuma });
  }

  changeLeagueOwner(event:any){
    ;
    this.basicTableService.getByTableByIdPredecesor("Barrio",event.id).subscribe(
      result => {
        ;
        this.form.patchValue({ barrio: '' });
        this.Barrios = result.data;
      }
    );
  }

  getFormaCopa() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.FormaCopa).subscribe(
      result => {
        this.formaCopa = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getClasificacion() {
    this.statusDetail = 'loading';
    this.clasificacionService.getAll().subscribe(
      result => {
        this.clasificado = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getComunas() {
    this.statusDetail = 'loading';
    this.basicTableService.getByTable('Comuna').subscribe(
      result => {
        this.Comunas = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getEstadoFito() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.EstadoFitosanitario).subscribe(
      result => {
        this.estadosFito = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getMadurez() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.EstadoMadurez).subscribe(
      result => {
        this.madurez = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getTipoIndividuo() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.TipoIndividuo).subscribe(
      result => {
        this.tipoIndividuo = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getTipoEmpla() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.TipoEmplazamiento).subscribe(
      result => {
        this.tipoEmpla = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getInfraAfec() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.InfraestructuraAfectada).subscribe(
      result => {
        this.infraAfec = result.data
        this.statusDetail = 'init';
      }
    );
  }


  obtenerCamposRequeridos(): string[] {
    const camposRequeridos: string[] = [];
    Object.keys(this.form.controls).forEach(controlName => {
      const control = this.form.get(controlName);
      if (control.errors ) {
        camposRequeridos.push(controlName);
      }
    });
    return camposRequeridos;
  }

  Guardar() {

    if (this.form.invalid) {
      //alert (JSON.stringify(this.obtenerCamposRequeridos()))
      this.form.markAllAsTouched();
      return;
    }

    let clonForm = this.formbuilder.group(this.form.getRawValue());
    ;
    clonForm.value['coordenada'] = this.coordenadas.getFormValue();
    clonForm.value['fotos'] = new Array<RegistroFotograficoCensoDto>();

    const files = this.registroFotosComponent.getFilesLoaded();
    const formData = new FormData();

    for (let i = 0; i < files.length; i++) {
      formData.append('files', files[i]);
    }

    clonForm.value["estadoFitosanitario"]=JSON.stringify(this.form.value.estadoFitosanitario);
    clonForm.value["recomendacionesParaManejoSilvicultural"]=JSON.stringify(this.form.value.recomendacionesParaManejoSilvicultural);
    clonForm.value["infraestructuraAfectada"]=JSON.stringify(this.form.value.infraestructuraAfectada);

    let infoFotos = {
      'rotation'  : this.registroFotosComponent.getRotationLoaded().rotation,
    };

    formData.append('fullobject', JSON.stringify(clonForm.value));
    formData.append('infofotos', JSON.stringify(infoFotos));
    ;
    this.create.emit(formData);
  }

  Actualizar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }

    this.form.value.coordenada = this.coordenadas.getFormValue();
    this.form.value.fotos = this.registroFotosComponent.getCurrentFotos();

    const files = this.registroFotosComponent.getFilesLoaded();
    const formData = new FormData();

    for (let i = 0; i < files.length; i++) {
      formData.append('files', files[i]);
    }

    this.form.value["estadoFitosanitario"]=JSON.stringify(this.form.value.estadoFitosanitario);
    this.form.value["recomendacionesParaManejoSilvicultural"]=JSON.stringify(this.form.value.recomendacionesParaManejoSilvicultural);
    this.form.value["infraestructuraAfectada"]=JSON.stringify(this.form.value.infraestructuraAfectada);


    let infoFotos = {
      'rotation'  : this.registroFotosComponent.getRotationLoaded().rotation,

    };
    formData.append('fullobject', JSON.stringify(this.form.value));
    formData.append('infofotos', JSON.stringify(infoFotos));

    this.update.emit(formData);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del censoArboreo';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(
      TitleUp,
      TitleDonw,
      () => {
        //ejecuto el llamado a la funcion Borrar
        this.Borrar();
      },
      () => {
        //en caso de usar cancelacion
      }
    );
  }

  Borrar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit();
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
    return {
      get: () => this.form.get(name),
      isValid: () => this.form.get(name).touched && this.form.get(name).valid,
    };
  }
}

---------------------------------------
impresion-censoarboreo.component.html
************

<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" (click)="Imprimir()">
  Imprimir
</button>
<div id="divimprimir"  >
<div class="flex justify-between mb-4">
 
 
</div>
<br />
<div  class=" py-2" aling="center" style="width: 100%;">
  <table style="background-color: white; width: 100%;">
    <tr>
      <td style="padding: 10px;">
        <h1 class="text-3xl font-semibold text-gray-900">Reporte Arboles</h1>
        <h2 class="text-lg font-semibold">Hoja de vida del arbol</h2>
        <p>Generado para la Alcaldía de Bucaramanga</p>
        <p>Fecha del reporte: {{ fechaActual }}</p>

      </td>
      <td>
        <img src="../../../../assets/img/alcaldia.png" class="w-150 h-150 object-cover" alt="logo alcaldia" />

      </td>
    </tr>
  </table>
</div>
<form [formGroup]="form">
  
<div class="bg-white">


   
      <div class="px-4 py-2">
        <span style="font-size: 30px;">Información del individuo</span> <br>
        <span class="font-bold" *ngIf="censoArboreo && censoArboreo.id">{{
          censoArboreo.id
          }}</span>
      </div>
      <hr>
    
      
      
          <div style=" width: 100%;">
          <table  style="border-collapse: separate; border-spacing: 30px 10px; text-align: left;">
            <tbody>
            <tr>
              <td >
                <label><strong>Número de individuo ID:</strong></label>
           
              </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.numeroIndividuoId}}</label>
           
              </td>
              <td>
                <label for="alturaTotal" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900"><strong>Altura
                  total:</strong></label>
              </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.alturaTotal}}</label>
        
              </td>
              <td>
                <label style="font: bold 16px Arial, sans-serif;" for="alturaComercial">Altura comercial:</label>
             
              </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.alturaComercial}}</label>
        
              </td>
              <td>
                <label for="cuadrilla" style="font: bold 16px Arial, sans-serif;" 
                >Cuadrilla:</label>
            
              </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.cuadrilla}}</label>
        
              </td>
            </tr>


            <tr>
              <td>
                <label for="formaCopa" style="font: bold 16px Arial, sans-serif;" >Forma de la copa:</label>
               
               </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.formaCopa}}</label>
            
                 
                
              </td>
              <td>
                <label for="diametroCopa" style="font: bold 16px Arial, sans-serif;" >Diámetro
                  de la copa:</label>
                 
                
                </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.diametroCopa}}</label>
              
              </td>
              <td>
                <label for="alturaCopa" style="font: bold 16px Arial, sans-serif;" >Altura de la
                  copa:</label>
              </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.alturaCopa}}</label>
               </td>
              <td>
                <label for="observacionCopa"
                style="font: bold 16px Arial, sans-serif;" >Observación de la copa:</label>
         
              </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.observacionCopa}}</label>
       
              </td>
            </tr>
          </tbody>
          </table>
        </div>
      </div>
      
      <hr>
    


    <div class="bg-white">
      <div class="px-4 py-2"> <span style="font-size: 30px;"> DAP</span> </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          
            <div style=" width: 100%;">
          <table  style="border-collapse: separate; border-spacing: 30px 10px; text-align: left;">
          
                     <tr>
                       <td>
                        <label for="dap" style="font: bold 16px Arial, sans-serif;" >DAP:</label>
          
                        </td>
                       <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900"></label>
        
                       </td>
                       <td>
                           <label for="dap2" style="font: bold 16px Arial, sans-serif;" >DAP 2:</label>
          
                         </td>
                       <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.dap2}}</label>
        
                       </td>
                       <td>
                        <label for="dap3" style="font: bold 16px Arial, sans-serif;" >DAP 3:</label>
          
                       </td>
                       <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.dap3}}</label>
        
                       </td>
                       <td>
                        <label for="dap4" style="font: bold 16px Arial, sans-serif;" >DAP 4:</label>
          
                       </td>
                       <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.dap4}}</label>
        
                       </td>
                       <td>
                        <label for="ndaptotal" style="font: bold 16px Arial, sans-serif;" >NDAP
                          total:</label>
                      </td>
                      <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.ndaptotal}}</label>
                      </td>
                     </tr>
                     
            </table>
          </div> 
                
        </div>
      </div>
    </div>
 
    <hr>
   
  
     
          <div class="bg-white" style=" width: 100%;">
          <table  style="border-collapse: separate; border-spacing: 30px 10px; text-align: left;">
            <tr>
              <td colspan="3">
               <span style="font-size: 30px;"> Clasificacion</span>
              </td>
            </tr>
            <tr>
              <td>
                <label for="numeroFustes" style="font: bold 16px Arial, sans-serif;" >Número de
                  fustes:</label>
               </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.numeroFustes}}</label>
        
              </td>
              <td>
                <label for="nombreComun" style="font: bold 16px Arial, sans-serif;" >Nombre
                  común:</label>
                </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.nombreComun}}</label>
        
              </td>
              <td>
                <label for="nombreCientifico" style="font: bold 16px Arial, sans-serif;" >Nombre
                  científico:</label>
              </td>
              <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.nombreCientifico}}</label>
        
              </td>
              <td>
                <label for="orden" style="font: bold 16px Arial, sans-serif;" >Orden:</label>
          
              </td>
              <td>
                <label>{{censoArboreo.orden}}</label>
        
              </td>
              </tr>
              <tr>
              <td>
                <label for="familia"
                style="font: bold 16px Arial, sans-serif;" >Familia:</label>
              </td>
             <td>
              <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.familia}}</label>
        
             </td>
             <td>
              <label for="genero" style="font: bold 16px Arial, sans-serif;" >Género:</label>
           
               </td>
             <td>
              <label >{{censoArboreo.genero}}</label>
        
             </td>
             <td>
              <label for="especie"
              style="font: bold 16px Arial, sans-serif;" >Especie:</label>
             </td>
             <td>
              <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.especie}}</label>
        
             </td>
             <td>
              <label for="clasificado" style="font: bold 16px Arial, sans-serif;" >Clasificacion:</label>
              AVERIGUAR
              
             </td>
            
            </tr>
          </table>
        </div>
     
    
 
        <hr>
  <div >
    <div >
     
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div style=" width: 100%;">
            
            <table  style="border-collapse: separate; border-spacing: 30px 10px; text-align: left;">
                        <tr>
                          <td colspan="3">
                           <span style="font-size: 30px;">Información General</span> 
                          </td>
                        </tr>
                        <tr>
                          <td>
                            <label for="altitudASNM" style="font: bold 16px Arial, sans-serif;" >Altitud
                              ASNM:</label>
                           </td>
                          <td>
                              
                                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.altitudASNM}}</label>
        
                          </td>
                          <td>
                            <label for="estadoFitosanitario"
                            style="font: bold 16px Arial, sans-serif;" >Estado fitosanitario:</label>
                         
                            </td>
                          <td>
                            <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.estadoFitosanitario}}</label>
        
                          </td>
                          <td>
                            <label for="estadoMadurez" style="font: bold 16px Arial, sans-serif;" >Estado de
                              madurez:</label>
                          </td>
                          <td>
                                 <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.estadoMadurez}}</label>

                          </td>
                          <td>
                            <label for="tipoIndividuoForestal"
                            style="font: bold 16px Arial, sans-serif;" >Tipo de individuo
                            forestal:</label>
                          </td>
                          <td>
                            <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.tipoIndividuoForestal}}</label>
                         </td>
                         <td>
                          <label for="departamento"
                          style="font: bold 16px Arial, sans-serif;" >Departamento:</label>
                      
                        </td>
                       <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.departamento}}</label>
       
                       </td>
                      </tr>
                      <tr>
                       <td>
                        <label for="ciudad" style="font: bold 16px Arial, sans-serif;" >Ciudad:</label>
           
                         </td>
                        
                      
                       <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.ciudad}}</label>
       
                       </td>
                       <td>
                        <label for="tipoAglomeracion" style="font: bold 16px Arial, sans-serif;" >Tipo
                          de aglomeración:</label>
                       </td>
                       <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.tipoAglomeracion}}</label>
       
                       </td>
                       <td>
                        <label for="barrio" style="font: bold 16px Arial, sans-serif;" >Barrio:</label>
           
                       </td>
                       <td>
                        <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.barrio}}</label>
       
                       </td>
                       <td>
                        <label for="comuna" style="font: bold 16px Arial, sans-serif;" >Comuna:</label>
          
                      </td>
                     <td>
                      <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.comuna}}</label>
           
                     </td>
                     <td>
                      <label for="tipoEmplazamiento" style="font: bold 16px Arial, sans-serif;" >Tipo
                        de emplazamiento:</label>
                       </td>
                     <td>
                      <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.tipoEmplazamiento}}</label>
          
                     </td>
                    </tr>
                    <tr>
                     <td>
                      <label for="infraestructuraAfectada"
                      style="font: bold 16px Arial, sans-serif;" >Infraestructura afectada:</label>
                    
                     </td>
                     
                    
                     <td>
                      <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.infraestructuraAfectada}}</label>
          
                     </td>
                     <td>
                      <label for="apendiceCites" style="font: bold 16px Arial, sans-serif;"> Apéndice
                        CITES:</label>
                     </td>
                     <td>
                      <label  class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.apendiceCites? 'SI' : 'NO'}}</label>
                     
                     </td>
                     <td>
                      <label for="categoriaUicn" style="font: bold 16px Arial, sans-serif;" >Categoría
                        UICN:</label>
                    </td>
                   <td>
                    <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.categoriaUicn? 'SI' : 'NO'}}</label>
          
                   </td>
                   <td>
                    <label for="categoriaMinisterioResolucion01922014"
                    style="font: bold 16px Arial, sans-serif;" >Categoría Ministerio Resolución
                    019/2014:</label>
                     </td>
                   <td>
                    <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.categoriaMinisterioResolucion01922014? 'SI' : 'NO'}}</label>
          
                   </td>
                   <td>
                    <label for="especieEndemica" style="font: bold 16px Arial, sans-serif;" >Especie
                      endémica:</label>
                   </td>
                   <td>
                    <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.especieEndemica? 'SI' : 'NO'}}</label>
          
                   </td>
                  </tr>
                  <tr>
                   <td>
                    <label for="origen" style="font: bold 16px Arial, sans-serif;" >Origen:</label>
           
                   </td>
                  
                   
                   <td>
                    <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.origen}}</label>
          
                   </td>
                   <td>
                    <label for="isGuadua" style="font: bold 16px Arial, sans-serif;" >Es Guadua:</label>
           
                  </td>
                 <td>
                  <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.isGuadua? 'SI' : 'NO'}}</label>
          
                 </td>
                 <td>
                  <label for="observacionTipoEmplazamiento"
                  style="font: bold 16px Arial, sans-serif;" >Observación del tipo de
                  emplazamiento:</label>
                   </td>
                 <td>
                  <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.observacionTipoEmplazamiento}}</label>
       
                 </td>
                 <td>
                  <label for="observacionInfraestructuraAfectada"
                  style="font: bold 16px Arial, sans-serif;">Observación de la infraestructura
                  afectada:</label>
                 </td>
                 <td>
                  <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.observacionInfraestructuraAfectada}}</label>
            
                 </td>
                </tr>
                <tr>
                  <td>
                  <label for="fecha" style="font: bold 16px Arial, sans-serif;" >Fecha:</label>
           
                 </td>
                 
                
                 <td>
                  <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.fecha}}</label>
          
                 </td>
                 <td>
                  <label for="recomendacionesParaManejoSilvicultural"
                  style="font: bold 16px Arial, sans-serif;" >Recomendaciones para el manejo
                  silvicultural:</label>
                </td>
               <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.recomendacionesParaManejoSilvicultural}}</label>
          
               </td>
               <td>
                <label for="observacion"
                style="font: bold 16px Arial, sans-serif;" >Observación:</label>
     
                 </td>
               <td>
                <label class="print:bg-red-100 block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">{{censoArboreo.observacion}}</label>
          
               </td>
              
                        </tr>
               </table>  
              </div>   
        </div>
       
          
            <div>
             
               </div>
      </div>
    </div>
  </div>
  <div >
    <div >
      <div class="px-4 py-2">Observaciones</div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
         
          <div>
            
          </div>
          <div>
           
             
         </div>


        </div>
      </div>
    </div>
             
  </div>
   <br />
   <div class="card mb-4">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
     
      <div class="p-12">
        <div class="grid gap-6 mb-6 md:grid-cols-1">



            <label for="registroFotografico"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Registro fotográfico:</label>
            <app-registrofotografico #registroFotografico [dataForm]="onlyRegistroFotografico"></app-registrofotografico>


		  </div></div></div></div>
      <div class="card mb-4 overflow-auto" >
        <div class="bg-white rounded-lg shadow-md overflow-hidden">
          <div class="bg-gray-500 text-white px-4 py-2">Registro de actividades</div>
          <div class="p-12">
            <div class="grid gap-6 mb-6 md:grid-cols-1">
              <table class="min-w-full divide-y divide-gray-200">
                <thead>
                  <tr>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Poda Realce R</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Poda Estabilidad E</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Poda Mantenimiento M</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Cortes Nuevos</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Cortes Viejos</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Cortes Enfermos</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Poda Raíces</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Limpieza</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Poda Sanitaria</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Inmediata I</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Corto Plazo C</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Largo Plazo L</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Trasplante</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Observación</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Estado</th>
                   
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Actor</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Operador</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Nueva Intervención</th>
                    <th class="px-6 py-3 bg-gray-50 text-left text-xs leading-4 font-medium text-gray-500 uppercase tracking-wider">Poda Corrección</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                  <tr *ngFor="let item of dataList">
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.podaRealceR? 'SI' : 'NO' }}</td>
                    <td>{{ item.podaEstabilidadE? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.podaMantenimientoM? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.cortesNuevos? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.cortesViejos? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.cortesEnfermos? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.podaRaices? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.limpieza }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.podaSanitaria }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.inmediataI? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.cortoPlazoC? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.largoPlazoL? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.trasplante? 'SI' : 'NO' }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.observacion }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.estado }}</td>
                    
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.actor }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.operador }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.nuevaIntervencion }}</td>
                    <td class="px-6 py-4 whitespace-no-wrap">{{ item.podaCorreccion? 'SI' : 'NO' }}</td>
                  </tr>
                </tbody>
              </table>
          </div></div></div></div>
    

    
      
      
      
    
      

</form>

</div>
---------------------------------------
impresion-censoarboreo.component.scss
************
.fixed-container {
  height: 400px;
  width: 300px;
}


/* Estilos normales de la tabla */
.table-con-borde {
  border-collapse: collapse;
}

.table-con-borde td, .table-con-borde th {
  border: 1px solid black;
  padding: 8px;
}

/* Estilos específicos para impresión */
@media print {
  .table-con-borde {
    border-collapse: collapse;
  }

  .table-con-borde td, .table-con-borde th {
    border: 1px solid black;
    padding: 8px;
  }
}

---------------------------------------
impresion-censoarboreo.component.ts
************
import { ClasificacionDto } from '../../../../core/models/clasificacion.model';
import { formatDate,DatePipe } from '@angular/common';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { Component, EventEmitter, Input, OnInit, Output, ViewChild, } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CensoArboreoDto, CoordenadaDto, RegistroFotograficoCensoDto, } from 'src/app/core/models/censoarboreo-dto.model';
import { DetalleDto } from 'src/app/core/models/detalle-dto.model';
import { MaestraDetalleCombo } from 'src/app/core/models/maestradetalle.mode';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { DetalleService } from 'src/app/core/services/detalle.service';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import { CoordenadaComponent } from 'src/app/modules/sharedcomponent/coordenada/coordenada.component';
import { RegistroFotograficoComponent } from 'src/app/modules/sharedcomponent/registrofotografico/registrofotografico.component';
import { Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
import { EsriMapService } from 'src/app/core/services/EsriMap.service';
import { ClasificacionService } from 'src/app/core/services/clasificacion-service';
import { ActividadesSilviculturalesService } from 'src/app/core/services/actividadessilviculturales.service';
import { ActividadesSilviculturalesDto } from 'src/app/core/models/actividadessilviculturales-dto.model';

declare var Object: any; 
@Component({
  selector: 'app-impresion-censoArboreo',
  templateUrl: './impresion-censoArboreo.component.html',
  styleUrls: ['./impresion-censoArboreo.component.scss'],
  providers: [DatePipe]
})
export class ImpresionfCensoArboreoComponent implements OnInit {

  @ViewChild('coordenadasComponent')
  coordenadas: CoordenadaComponent;

  @ViewChild('registroFotografico')
  
  registroFotosComponent: RegistroFotograficoComponent;
  fechaActual: string;
  statusDetail: RequestStatus = 'init';
  form: FormGroup;
  isNew: boolean = false;
  userNameRequired: boolean = false;
  passwordRequired: boolean = false;
  censoArboreo: CensoArboreoDto;
  formaCopa: DetalleDto[];
  estadosFito: DetalleDto[];
  madurez: DetalleDto[];
  tipoIndividuo: DetalleDto[];
  tipoEmpla: DetalleDto[];
  infraAfec: DetalleDto[];
  origenes: DetalleDto[];
  clasificado:ClasificacionDto[];
  recomendacionesParaManejoSilviculturalLista :DetalleDto[];
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  coordenadasList: CoordenadaDto[] = [];
  id: string;
  dato:string;
  dataList: ActividadesSilviculturalesDto[];

  coordsList: CoordenadaDto[] = [
    { id: "", latitud: 7.147551442, longitud: -73.12981657, altitud: 'not specified', norte: 'not specified', este: 'not specified' },
    { id: "", latitud: 7.1150, longitud: -73.1100, altitud: 'not specified', norte: 'not specified', este: 'not specified' },
    { id: "", latitud: 7.1200, longitud: -73.1140, altitud: 'not specified', norte: 'not specified', este: 'not specified' },
    { id: "", latitud: 7.1250, longitud: -73.1220, altitud: 'not specified', norte: 'not specified', este: 'not specified' },
    { id: "", latitud: 7.1100, longitud: -73.1180, altitud: 'not specified', norte: 'not specified', este: 'not specified' }
  ];

  onlyCoordenadas: CoordenadaDto = new CoordenadaDto();
  onlyRegistroFotografico: RegistroFotograficoCensoDto[] = new Array<RegistroFotograficoCensoDto>();
  window: any;

  @Input()
  set dataForm(data: CensoArboreoDto) {
   
    if (data) {
      this.isNew = false;

      this.form.patchValue(data);
      if (data.fecha) {
        const fechaCorteString = formatDate(data.fecha, 'yyyy-MM-dd', 'en-US');
        this.form.patchValue({ fecha: fechaCorteString });
      }

      //repairDAP
      this.form.patchValue({ dap2: data["daP2"] });
      this.form.patchValue({ dap3: data["daP3"] });
      this.form.patchValue({ dap4: data["daP4"] });
      try {
        this.form.patchValue({ estadoFitosanitario: JSON.parse(data["estadoFitosanitario"]) });
        this.form.patchValue({ recomendacionesParaManejoSilvicultural: JSON.parse(data["recomendacionesParaManejoSilvicultural"]) });
        this.form.patchValue({ infraestructuraAfectada: JSON.parse(data["infraestructuraAfectada"]) });
      } catch (error) {

      }


      this.form.markAllAsTouched();
      this.censoArboreo = data;
      this.onlyCoordenadas = this.censoArboreo.coordenada;

      this.onlyRegistroFotografico = this.censoArboreo.fotos;
    } else {
      this.initializedObj(data);
      this.isNew = true;
    }
  }

  private initializedObj(data: CensoArboreoDto) {
    if (!data) {
      data = new CensoArboreoDto();
    }
    if (!data.coordenada) {
      data.coordenada = new CoordenadaDto();
    }
  }

  @Input()
  set status(data: RequestStatus) {
    if (data) {
      this.statusDetail = data;
    }
  }
  
  @Output() create = new EventEmitter();
  @Output() update = new EventEmitter();
  @Output() delete = new EventEmitter();
  @Output() getactividad = new EventEmitter();


  constructor(
    private formbuilder: FormBuilder,
    private sweetAlertService: SweetAlertService,
    private detallesService: DetalleService,
    private habilitaracciones: Habilitaracciones,
    private clasificacionService: ClasificacionService,
    private datePipe: DatePipe,
    private activatedRoute: ActivatedRoute,
    private actividadessilviculturalesService: ActividadesSilviculturalesService 
    

  ) {
    this.BuildForm();
    this.getFormaCopa();
    this.getEstadoFito();
    this.getMadurez();
    this.getTipoIndividuo();
    this.getTipoEmpla();
    this.getInfraAfec();
    this.getClasificacion();
    this.obtenerFechaActual();
    
  }

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      this.traeractividades(this.id)
    });
    
    const checkbox = document.querySelector('#apendiceCites');
    const checkboxUicn = document.querySelector('#categoriaUicn');
    const checkboxMinisterioR = document.querySelector('#categoriaMinisterioResolucion01922014');
    const checkboxespecieEndemica = document.querySelector('#especieEndemica');
    const checkboxisGuadua = document.querySelector('#isGuadua');

    checkboxisGuadua.addEventListener('click', () => {
      // Deny the event
      event.preventDefault();
    });
    checkbox.addEventListener('click', () => {
      // Deny the event
      event.preventDefault();
    });
    checkboxUicn.addEventListener('click', () => {
      // Deny the event
      event.preventDefault();
    });
    checkboxMinisterioR.addEventListener('click', () => {
      // Deny the event
      event.preventDefault();
    });
    checkboxespecieEndemica.addEventListener('click', () => {
      // Deny the event
      event.preventDefault();
    });
    
   
    this.origenes = new Array<DetalleDto>();
    let nativa = new DetalleDto();
    nativa.codigo = "Nativa";
    nativa.nombre = "Nativa";
    let introducida = new DetalleDto();
    nativa.codigo = "Introducida";
    nativa.nombre = "Introducida";
    this.origenes.push(nativa);
    this.origenes.push(introducida);


    this.recomendacionesParaManejoSilviculturalLista = new Array<DetalleDto>();
    this.recomendacionesParaManejoSilviculturalLista.push(new DetalleDto('Poda'));
    this.recomendacionesParaManejoSilviculturalLista.push(new DetalleDto('Fertilizacion'));
    this.recomendacionesParaManejoSilviculturalLista.push(new DetalleDto('Tala'));
    this.recomendacionesParaManejoSilviculturalLista.push(new DetalleDto('Traslado'));
   
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      numeroIndividuoId: ['', [Validators.required]],
      alturaTotal: ['', [Validators.required]],
      alturaComercial: ['', [Validators.required]],
      cuadrilla: ['', [Validators.required]],
      formaCopa: ['', [Validators.required]],
      diametroCopa: ['', [Validators.required]],
      alturaCopa: ['', [Validators.required]],
      observacionCopa: ['', [Validators.required]],
      dap: ['0', [Validators.required]],
      dap2: ['0', [Validators.required]],
      dap3: ['0', [Validators.required]],
      dap4: ['0', [Validators.required]],
      ndaptotal: ['', [Validators.required]],
      daptotal: ['', [Validators.required]],
      numeroFustes: ['0', []],
      nombreComun: ['', [Validators.required]],
      nombreCientifico: ['', [Validators.required]],
      orden: ['', [Validators.required]],
      familia: ['', [Validators.required]],
      genero: ['', [Validators.required]],
      especie: ['', [Validators.required]],
      altitudASNM: ['', [Validators.required]],
      estadoFitosanitario: ['', [Validators.required]],
      estadoMadurez: ['', [Validators.required]],
      tipoIndividuoForestal: ['', [Validators.required]],
      departamento: ['Santander', [Validators.required]],
      ciudad: ['Bucaramanga', [Validators.required]],
      tipoAglomeracion: ['', [Validators.required]],
      barrio: ['', [Validators.required]],
      comuna: ['', [Validators.required]],
      tipoEmplazamiento: ['', [Validators.required]],
      observacionTipoEmplazamiento: ['', [Validators.required]],
      infraestructuraAfectada: ['', [Validators.required]],
      observacionInfraestructuraAfectada: ['', [Validators.required]],
      apendiceCites: [false, [Validators.required]],
      categoriaUicn: [false, [Validators.required]],
      categoriaMinisterioResolucion01922014: [false, [Validators.required]],
      especieEndemica: [false, [Validators.required]],
      origen: ['', [Validators.required]],
      observacion: ['', [Validators.required]],
      fecha: ['', [Validators.required]],
      recomendacionesParaManejoSilvicultural: ['', [Validators.required]],
      isGuadua: [false, [Validators.required]],
      clasificadoId: ['', [Validators.required]],
    });

    this.form.get('dap').valueChanges.subscribe(() => this.actualizarDapTotal());
    this.form.get('dap2').valueChanges.subscribe(() => this.actualizarDapTotal());
    this.form.get('dap3').valueChanges.subscribe(() => this.actualizarDapTotal());
    this.form.get('dap4').valueChanges.subscribe(() => this.actualizarDapTotal());


    const resultados = this.habilitaracciones.MostrarBotones('Censo');

    if (resultados.length > 0) {
      resultados.forEach(resultado => {
        this.mostraDelete = resultado.eliminar;
        this.mostraUpdate = resultado.editar;

      });
    }

  }

  private actualizarDapTotal() {

    const dap = this.form.get('dap').value;
    const dap2 = this.form.get('dap2').value;
    const dap3 = this.form.get('dap3').value;
    const dap4 = this.form.get('dap4').value;

    let dapTotalSuma = Number(dap)+  Number(dap2) + Number(dap3) +Number(dap4);

    // Actualizar el valor de dapTotal en el formulario
    this.form.patchValue({ daptotal : dapTotalSuma });
  }
  // Por ejemplo, en un método del componente o en ngOnInit

      traeractividades(dato){
      
        this.actividadessilviculturalesService.GetAll(dato).subscribe(
          response => {
            if (Array.isArray(response.data)) {
              this.dataList = response.data;
              console.log(JSON.stringify( this.dataList))
            } else {
              // Si response.data no es un array, puedes manejar el error de alguna manera
              console.error('Error: response.data no es un array');
            }
            // Puedes asignar los datos a una propiedad del componente para usarlos en la vista
          },
          (error) => {
            // Maneja los errores aquí
            console.error(error);
          }
        );
      }
  obtenerFechaActual() {
    const fecha = new Date();
    this.fechaActual = this.datePipe.transform(fecha, 'yyyy-MM-dd');
  }
  Imprimir(){

    var ventanaImpresion = window.open('', '_blank');
    ventanaImpresion.document.write('<html><head><title>Imprimir</title>' +
      '<style>' +
      'body { font-size: 20pt; }' + 
      '.label-container {display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px;  }'+
      '.item {padding: 20px; border: 1px solid #ccc; text-align: center; }' +
      '.itemright {padding: 20px; border: 1px solid #ccc; text-align: right; }' +
      '.itemleft {padding: 20px; border: 1px solid #ccc; text-align: right; }' +
     
      '</style></head><body>'
      );
    
    var contenidoDiv = document.getElementById('divimprimir').innerHTML;
    ventanaImpresion.document.write(contenidoDiv);
    
    ventanaImpresion.document.write('</body></html>');
    ventanaImpresion.document.close();
    ventanaImpresion.print();
    ventanaImpresion.close();
    
  }
  getFormaCopa() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.FormaCopa).subscribe(
      result => {
        this.formaCopa = result.data
        this.statusDetail = 'init';
      }
    );
  }
 
  getClasificacion() {
    this.statusDetail = 'loading';
    this.clasificacionService.getAll().subscribe(
      result => {
        this.clasificado = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getEstadoFito() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.EstadoFitosanitario).subscribe(
      result => {
        this.estadosFito = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getMadurez() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.EstadoMadurez).subscribe(
      result => {
        this.madurez = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getTipoIndividuo() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.TipoIndividuo).subscribe(
      result => {
        this.tipoIndividuo = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getTipoEmpla() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.TipoEmplazamiento).subscribe(
      result => {
        this.tipoEmpla = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getInfraAfec() {
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.InfraestructuraAfectada).subscribe(
      result => {
        this.infraAfec = result.data
        this.statusDetail = 'init';
      }
    );
  }


  obtenerCamposRequeridos(): string[] {
    const camposRequeridos: string[] = [];
    Object.keys(this.form.controls).forEach(controlName => {
      const control = this.form.get(controlName);
      if (control.errors ) {
        camposRequeridos.push(controlName);
      }
    });
    return camposRequeridos;
  }

  Guardar() {

    if (this.form.invalid) {
      alert (JSON.stringify(this.obtenerCamposRequeridos()))
      this.form.markAllAsTouched();
      return;
    }

    let clonForm = this.formbuilder.group(this.form.getRawValue());
    ;
    clonForm.value['coordenada'] = this.coordenadas.getFormValue();
    clonForm.value['fotos'] = new Array<RegistroFotograficoCensoDto>();

    const files = this.registroFotosComponent.getFilesLoaded();
    const formData = new FormData();

    for (let i = 0; i < files.length; i++) {
      formData.append('files', files[i]);
    }
    /*
    for (const prop in this.form.value) {
      if (this.form.value.hasOwnProperty(prop)) {
        formData.append(`censo.${prop}`, this.form.value[prop].toString());
      }
    }*/
    ;


    clonForm.value["estadoFitosanitario"]=JSON.stringify(this.form.value.estadoFitosanitario);
    clonForm.value["recomendacionesParaManejoSilvicultural"]=JSON.stringify(this.form.value.recomendacionesParaManejoSilvicultural);
    clonForm.value["infraestructuraAfectada"]=JSON.stringify(this.form.value.infraestructuraAfectada);

    let infoFotos = {
      'rotation'  : this.registroFotosComponent.getRotationLoaded().rotation,
    };

    formData.append('fullobject', JSON.stringify(clonForm.value));
    formData.append('infofotos', JSON.stringify(infoFotos));
    ;
    this.create.emit(formData);
  }

  Actualizar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }

    this.form.value.coordenada = this.coordenadas.getFormValue();
    this.form.value.fotos = this.registroFotosComponent.getCurrentFotos();

    const files = this.registroFotosComponent.getFilesLoaded();
    const formData = new FormData();

    for (let i = 0; i < files.length; i++) {
      formData.append('files', files[i]);
    }

    this.form.value["estadoFitosanitario"]=JSON.stringify(this.form.value.estadoFitosanitario);
    this.form.value["recomendacionesParaManejoSilvicultural"]=JSON.stringify(this.form.value.recomendacionesParaManejoSilvicultural);
    this.form.value["infraestructuraAfectada"]=JSON.stringify(this.form.value.infraestructuraAfectada);


    let infoFotos = {
      'rotation'  : this.registroFotosComponent.getRotationLoaded().rotation,

    };
    formData.append('fullobject', JSON.stringify(this.form.value));
    formData.append('infofotos', JSON.stringify(infoFotos));

    this.update.emit(formData);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del censoArboreo';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(
      TitleUp,
      TitleDonw,
      () => {
        //ejecuto el llamado a la funcion Borrar
        this.Borrar();
      },
      () => {
        //en caso de usar cancelacion
      }
    );
  }

  Borrar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit();
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
    return {
      get: () => this.form.get(name),
      isValid: () => this.form.get(name).touched && this.form.get(name).valid,
    };
  }
}

---------------------------------------
lista-censoarboreo.component.html
************
<div *ngIf="statusDetail === 'loading'" class="flex items-center justify-center min-h-screen">
  <div class="absolute inset-0 bg-gray-500 opacity-5"></div>
  <div class="z-0 p-2 bg-white rounded-lg shadow-lg" style="height: 50px;">
    <div class="flex justify-center mb-4">
      <div class="loader ease-linear border-8 border-t-8 border-gray-200 h-16 w-16"></div>
      <p class="text-1xl text-center text-gray-900 animate-pulse">
        Cargando Censo Arboreo...
      </p>
    </div>

  </div>
</div>
<div class="flex flex-col md:flex-row justify-between items-center mb-4">
  <h1 class="text-lg font-semibold mb-4 md:mb-0 md:mr-4">Censo Arboreo</h1>
  <div class="flex flex-wrap space-y-2 md:space-y-0 md:space-x-2">
      <app-btn (click)="Descargar()" typeBtn="submit" color="green" [customIcon]="'faShareFromSquare'">Descargar Csv</app-btn>
      <app-btn (click)="descargarShapefileZip()" typeBtn="submit" color="green" [customIcon]="'faShareFromSquare'">Descargar Shape</app-btn>
      <app-btn *ngIf="mostrarCreate" typeBtn="submit" color="primary" [customIcon]="'faPlus'" routerLink="/app/censo/create">Agregar</app-btn>
      <app-cargar-manual></app-cargar-manual>
  </div>
</div>


<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter"
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
        type="text" />
    </div>
  </div>
</form>
<div>
  <p-table [value]="dataList" [paginator]="true" [rows]="this.pageSize" [showCurrentPageReport]="true"
    [tableStyle]="{ 'min-width': '50rem' }" [lazy]="true" [totalRecords]="collectionSize"
    (onLazyLoad)="refreshGrid($event)" [rowsPerPageOptions]="[5, 10, 15, 20]">
    <ng-template pTemplate="header">
      <tr class="bg-gray-50">
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Numero de individuo -
          ID</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Altura total</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Altura comercial</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Diametro de copa</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Forma de copa</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">D.A.P.</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Número de fustes</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre común</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre científico
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Orden</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Familia</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Género</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Especie</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Coordenadas
          geográficas y planas</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Altitud (a.s.n.m.)
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado fitosanitario
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado de madurez
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo de individuo
          (forestal, arbusto, palma, frutal, bambú y guadua)</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Registro fotográfico
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Barrio</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Comuna</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo de emplazamiento
        </th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Infraestructura
          afectada</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">APENDICE CITES</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CATEGORIA UICN</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CATEGORIA MINISTERIO
          RESOLUCIÓN 0192/2014</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Especie endemica</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Origen</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Observación</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Recomendaciones para
          manejo silvicultural</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
      </tr>
    </ng-template>
    <ng-template pTemplate="body" let-rowData let-rowIndex="rowIndex">
      <tr [class.bg-gray-200]="rowIndex % 2 === 0">
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.numeroIndividuoId}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.alturaTotal}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.alturaComercial}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.diametroCopa}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.formaCopa}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.dap}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.numeroFustes}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.nombreComun}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.nombreCientifico}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.orden}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.familia}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.genero}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.especie}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.Coordenadas}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.altitudASNM}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.estadoFitosanitario}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.estadoMadurez}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.tipoIndividuoForestal}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.registroFotografico}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.barrio}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.comuna}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.tipoEmplazamiento}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.infraestructuraAfectada}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.apendiceCites}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.categoriaUicn}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.categoriaMinisterioResolucion01922014}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.especieEndemica}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.origen}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.observacion}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.fecha}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.recomendacionesParaManejoSilvicultural}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">
         <a [routerLink]="['./edit', rowData.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
         <span class="ml-2"></span>
         <a [routerLink]="['./print', rowData.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Imprimir</a>
          </td>
      </tr>
    </ng-template>
  </p-table>
</div>

---------------------------------------
lista-censoarboreo.component.scss
************

---------------------------------------
lista-censoarboreo.component.ts
************
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { CensoArboreoDto } from 'src/app/core/models/censoarboreo-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';
import { Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
import { faShareFromSquare } from '@fortawesome/free-solid-svg-icons';
import { MasreportesService } from 'src/app/core/services/masreportes-service';

@Component({
  selector: 'app-lista-censoArboreo',
  templateUrl: './lista-censoArboreo.component.html',
  styleUrls: ['./lista-censoArboreo.component.scss']
})
export class ListaCensoArboreoComponent implements OnInit {

  dataList: CensoArboreoDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  mostrarCreate: boolean = false;
  faShareFromSquare = faShareFromSquare;

  mostraPrint: boolean = false;
  mostraList: boolean = false;
  constructor(private formbuilder: FormBuilder,
    private censoArboreoService: CensoArboreoService,
    private habilitaracciones: Habilitaracciones,
    private reporteServicio: MasreportesService) {

  }

  ngOnInit(): void {

    this.BuildForm();
    this.getCredentials();
    const resultados = this.habilitaracciones.MostrarBotones('Censo');

    if (resultados.length > 0) {
      resultados.forEach(resultado => {
        this.mostrarCreate = resultado.crear;

      });
    }

  }

  private getCredentials() {
    this.censoArboreoService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';

      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.censoArboreoService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.censoArboreoService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }


  Descargar() {
    this.statusDetail = 'loading';
    console.log("descargar")
    this.censoArboreoService.getDescargas().subscribe(
      response => {
        this.statusDetail = 'init';
        this.downloadFile(response);
      },
      error => {
        console.error('Download error:', error);
        this.statusDetail = 'error';
      }
    );
  }

  private downloadFile(data: Blob) {
    const blob = new Blob([data], { type: 'text/csv; charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = 'censo_arboreo.csv';  // El nombre del archivo que se descargará.
    anchor.click();

    // Cleanup
    window.URL.revokeObjectURL(url);
  }

  // En tu componente Angular
  descargarShapefileZip() {
    this.reporteServicio.getShapefileZip().subscribe(
      data => {
        this.downloadShapeFile(data, 'censo_arboreo_shapefiles.zip');
      },
      error => console.error('Error al descargar el archivo:', error)
    );
  }

  private downloadShapeFile(data: Blob, filename: string) {
    const blob = new Blob([data], { type: 'application/zip' });
    const url = window.URL.createObjectURL(blob);

    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = filename;
    anchor.click();

    window.URL.revokeObjectURL(url);
  }

}

---------------------------------------
censoarboreo.component.html
************
<app-formulario-censoArboreo
[dataForm]="censoArboreo"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-censoArboreo>

---------------------------------------
censoarboreo.component.scss
************

---------------------------------------
censoarboreo.component.ts
************
import { Component, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { CensoArboreoDto } from 'src/app/core/models/censoarboreo-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';
import { RegistroFotograficoComponent } from 'src/app/modules/sharedcomponent/registrofotografico/registrofotografico.component';

@Component({
  selector: 'app-censoArboreo',
  templateUrl: './censoArboreo.component.html',
  styleUrls: ['./censoArboreo.component.scss']
})
export class CensoArboreoComponent implements OnInit {

  id: string;
  statusDetail: RequestStatus;
  censoArboreo:CensoArboreoDto;

  

  constructor(private activatedRoute: ActivatedRoute,
    private censoArboreoService: CensoArboreoService,
    private router: Router){

  }

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.censoArboreoService.getById(this.id)
        .subscribe(censoArboreo => {
          this.censoArboreo = censoArboreo.data;
        });
      }
    });

  }

  Guardar(data)
  {
    
    this.censoArboreoService.createWFiles(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/censo']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    this.censoArboreoService.updateWFile(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/censo']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.censoArboreoService.delete(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/censo']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
impresioncensoarboreo.component.html
************
<app-impresion-censoArboreo
[dataForm]="censoArboreo"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-impresion-censoArboreo>

---------------------------------------
impresioncensoarboreo.component.scss
************

---------------------------------------
impresioncensoarboreo.component.ts
************
import { Component, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { CensoArboreoDto } from 'src/app/core/models/censoarboreo-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';
import { RegistroFotograficoComponent } from 'src/app/modules/sharedcomponent/registrofotografico/registrofotografico.component';

@Component({
  selector: 'app-impresioncensoArboreo',
  templateUrl: './impresioncensoArboreo.component.html',
  styleUrls: ['./impresioncensoArboreo.component.scss']
})
export class ImpresionCensoArboreoComponent implements OnInit {

  id: string;
  statusDetail: RequestStatus;
  censoArboreo:CensoArboreoDto;

  

  constructor(private activatedRoute: ActivatedRoute,
    private censoArboreoService: CensoArboreoService,
    private router: Router){

  }

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.censoArboreoService.getById(this.id)
        .subscribe(censoArboreo => {
          this.censoArboreo = censoArboreo.data;
        });
      }
    });

  }

  Guardar(data)
  {
    
    this.censoArboreoService.createWFiles(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/censo']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    this.censoArboreoService.updateWFile(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/censo']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.censoArboreoService.delete(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/censo']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
formulario-detalle.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Detalle</h1>
</div>
<br>
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Detalle
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">

          <div >
            <label for="maestraId" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Maestra:</label>
              

            <ng-select            
              [items]="maestras" bindLabel="nombreTabla" bindValue="id" formControlName="maestraId" 
              placeholder="Maestra"
              [ngClass]="{required: form.get('maestraId').invalid && form.get('maestraId').touched}"
              >
            </ng-select>


          </div>

          <div>
            <label for="nombre" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nombre:</label>
            <input type="text" formControlName="nombre" id="nombre"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="nombre" [ngClass]="{'required': form.get('nombre').invalid && form.get('nombre').touched}">
          </div>

          <div>
            <label for="descripcion" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Descripcion:</label>
            <input type="text" formControlName="descripcion" id="descripcion"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="descripcion" [ngClass]="{'required': form.get('descripcion').invalid && form.get('descripcion').touched}">
          </div>

          <div>
            <label for="codigo" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Codigo:</label>
            <input type="text" formControlName="codigo" id="codigo"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="codigo" [ngClass]="{'required': form.get('codigo').invalid && form.get('codigo').touched}">
          </div>


        </div>
      </div>
    </div>
  </div>

  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el detalle.
  </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br>
  <div class="flex justify-end space-x-4">

    <app-btn *ngIf="!isNew" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
      (click)="mostrarConfirmacion()">Borrar</app-btn>

    <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Guardar()">Guardar</app-btn>

    <app-btn *ngIf="!isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Actualizar()">Actualizar</app-btn>
  </div>

</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>
---------------------------------------
formulario-detalle.component.scss
************

---------------------------------------
formulario-detalle.component.ts
************
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Params } from '@angular/router';
import { DetalleDto } from 'src/app/core/models/detalle-dto.model';
import { MaestraDto } from 'src/app/core/models/maestra-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { MaestraService } from 'src/app/core/services/maestra.service';

import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';

@Component({
  selector: 'app-formulario-detalle',
  templateUrl: './formulario-detalle.component.html',
  styleUrls: ['./formulario-detalle.component.scss']
})
export class FormularioDetalleComponent implements OnInit {

  idMaestra:string;
  statusDetail: RequestStatus = 'init';
  form:FormGroup;
  isNew:boolean = false;
  userNameRequired:boolean = false;
  passwordRequired:boolean = false;
  detalle:DetalleDto;
  maestras : MaestraDto[];
  @Input()
  set dataForm(data:DetalleDto)
  {
    
    if(data)
    {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.detalle = data;
    } else {
      this.isNew = true;
    }
  };
  @Input()
  set status(data:RequestStatus)
  {
    if(data)
    {
      this.statusDetail = data;
    }
  };


  @Output() create= new EventEmitter();
  @Output() update= new EventEmitter();
  @Output() delete= new EventEmitter();

  constructor( private formbuilder:FormBuilder,
    private sweetAlertService: SweetAlertService,
    private maestraService: MaestraService,
    private activatedRoute: ActivatedRoute,
  ){
      
  }

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      
      this.idMaestra = params['idMaestra'];  
      
      this.BuildForm();
    });
    
    this.maestraService.getAll().subscribe(
      (response) => {
        this.maestras = response.data;
      },
    );
  }

  private BuildForm(){


    this.form = this.formbuilder.group({
      nombre:['', [Validators.required]],
      maestraId:[this.idMaestra, [Validators.required]],
      codigo:['', [Validators.required]],
      descripcion:['', [Validators.required]],
    })
  }

  Guardar()
  {
    if(this.form.invalid)
    {

      this.form.markAllAsTouched();
      return;
    }


    this.create.emit(this.form.value);
  }

  Actualizar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.update.emit(this.form.value);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del detalle';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(TitleUp,TitleDonw, () => {
      //ejecuto el llamado a la funcion Borrar
      this.Borrar();
    }, () => {
         //en caso de usar cancelacion
    });
  }

  Borrar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit()
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
      return {
          get: () => this.form.get(name),
          isValid: () => this.form.get(name).touched && this.form.get(name).valid
      };
  }

}

---------------------------------------
lista-detalle.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Detalle <span *ngIf="maestra" ><b> - {{maestra.nombreTabla}}</b> </span></h1>
  <app-btn typeBtn="submit" color="primary" [customIcon]="'faPlus'" [routerLink]="redirectAdd">Agregar</app-btn>
</div>
<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter"
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
        type="text" />
    </div>
  </div>
</form>
<div>
  <p-table [value]="dataList" [paginator]="true" [rows]="this.pageSize" [showCurrentPageReport]="true"
    [tableStyle]="{ 'min-width': '50rem' }" [lazy]="true" [totalRecords]="collectionSize"
    (onLazyLoad)="refreshGrid($event)" [rowsPerPageOptions]="[5, 10, 15, 20]">
    <ng-template pTemplate="header">
      <tr class="bg-gray-50">
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Descripcion</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Codigo</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>          

      </tr>
    </ng-template>
    <ng-template pTemplate="body" let-rowData let-rowIndex="rowIndex">
      <tr [class.bg-gray-200]="rowIndex % 2 === 0">
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.nombre}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.descripcion}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.codigo}}</td>


        <td class="px-6 py-4 whitespace-nowrap w-64"  >
          <a [routerLink]="['/app/detalle/edit',rowData.id,maestraId]"
            class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
        </td>
        
      </tr>
    </ng-template>
  </p-table>
</div>
---------------------------------------
lista-detalle.component.scss
************

---------------------------------------
lista-detalle.component.ts
************
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { DetalleDto } from 'src/app/core/models/detalle-dto.model';
import { MaestraDto } from 'src/app/core/models/maestra-dto.model';
import { MaestraDetalleCombo } from 'src/app/core/models/maestradetalle.mode';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { DetalleService } from 'src/app/core/services/detalle.service';
import { MaestraService } from 'src/app/core/services/maestra.service';




@Component({
  selector: 'app-lista-detalle',
  templateUrl: './lista-detalle.component.html',
  styleUrls: ['./lista-detalle.component.scss']
})
export class ListaDetalleComponent implements OnInit {

  maestraId : string = null ;
  dataList: DetalleDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  
  maestra : MaestraDto;
  redirectAdd : string = "/app/detalle/create";

  constructor(private formbuilder: FormBuilder,
    private detalleService: DetalleService,
    private maestraService: MaestraService,
    private activatedRoute: ActivatedRoute) {

  }

  ngOnInit(): void {

    this.activatedRoute.params.subscribe((params: Params) => {
      this.maestraId = params['maestraId'] ?? "0";
      this.redirectAdd=this.redirectAdd+"/"+this.maestraId;
      this.BuildForm();
      this.getCredentials();
      if(this.maestraId != "0"){
        this.maestraService.getById(this.maestraId).subscribe(
          (response) => {
            this.maestra = response.data
          },
        );
      }
      
    });

    



    this.detalleService.getByMaestra(MaestraDetalleCombo.AlturasPotencialesArboles).subscribe(
      response => {

      }

    );

  }

  private getCredentials() {

    this.detalleService.getFilterByMaestra(this.filterField, this.maestraId, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';

      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.detalleService.getFilterByMaestra(this.filterField, this.maestraId, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';

    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.detalleService.getFilterByMaestra(this.filterField, this.maestraId, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }

}

---------------------------------------
detalle.component.html
************
<app-formulario-detalle
[dataForm]="detalle"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-detalle>

---------------------------------------
detalle.component.scss
************

---------------------------------------
detalle.component.ts
************
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { DetalleDto } from 'src/app/core/models/detalle-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { DetalleService } from 'src/app/core/services/detalle.service';


@Component({
  selector: 'app-detalle',
  templateUrl: './detalle.component.html',
  styleUrls: ['./detalle.component.scss']
})
export class DetalleComponent implements OnInit {
  idMaestra : string;
  id: string;
  statusDetail: RequestStatus;
  detalle:DetalleDto;

constructor(private activatedRoute: ActivatedRoute,
  private detalleService: DetalleService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.idMaestra = params['idMaestra'];  
      this.id = params['id'];
      if(this.id)
      {
        this.detalleService.getById(this.id)
        .subscribe(detalle => {
          this.detalle = detalle.data;
        });
      }
    });

  }

  Guardar(data)
  {
    this.detalleService.create(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/detalle/by/'+this.idMaestra]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    this.detalleService.update(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/detalle/by/'+this.idMaestra]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.detalleService.delete(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/detalle/by/'+this.idMaestra]);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
detalle-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ListaDetalleComponent } from './components/lista-detalle/lista-detalle.component';
import { DetalleComponent } from './containers/detalle/detalle.component';
import { AuthGuard } from 'src/app/core/guards/auth.guard';

const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ListaDetalleComponent
  },
  {
    path: 'by/:maestraId',
    canActivate: [ AuthGuard ],
    component: ListaDetalleComponent
  },
  {
    path: 'create/:idMaestra',
    canActivate: [ AuthGuard ],
    component: DetalleComponent
  },
  {
    path: 'edit/:id/:idMaestra',
    canActivate: [ AuthGuard ],
    component: DetalleComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule,
  ]
})
export class DetalleRoutingModule { }

---------------------------------------
detalle.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { DetalleRoutingModule } from './detalle-routing.module';
import { ReactiveFormsModule } from '@angular/forms';

import { SharedModule } from 'src/app/shared/shared.module';

import { FormularioDetalleComponent } from './components/formulario-detalle/formulario-detalle.component';
import { ListaDetalleComponent } from './components/lista-detalle/lista-detalle.component';
import { DetalleComponent } from './containers/detalle/detalle.component';



@NgModule({
  declarations: [
    ListaDetalleComponent,
    FormularioDetalleComponent,
    DetalleComponent
       
  ],
  imports: [
    CommonModule,
    DetalleRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class DetalleModule { }

---------------------------------------
formulario-espaciospotenciales.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">EspaciosPotenciales</h1>
</div>
<br>
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del espaciosPotenciales
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">





          <div>
            <label for="areasDisponibles" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Áreas
              disponibles:</label>
            <input type="text" appNumberInput formControlName="areasDisponibles" id="areasDisponibles"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Áreas disponibles"
              [ngClass]="{'required': form.get('areasDisponibles').invalid && form.get('areasDisponibles').touched}">
          </div>
          <div>
            <label for="tipoEmplazamiento" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Tipo
              de emplazamiento:</label>


            <ng-select
                [items]="tipoEmpla" bindLabel="nombre" bindValue="nombre" formControlName="tipoEmplazamiento"
                placeholder="Tipo de emplazamiento"
                [ngClass]="{required: form.get('tipoEmplazamiento').invalid && form.get('tipoEmplazamiento').touched}"
                >
              </ng-select>
          </div>
          <div>
            <label for="especiesPotencialesParaSiembraAlMenosTresOpciones"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Especies potenciales para siembra:</label>
            <input type="text" formControlName="especiesPotencialesParaSiembraAlMenosTresOpciones"
              id="especiesPotencialesParaSiembraAlMenosTresOpciones"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Especies potenciales para siembra (al menos tres opciones)"
              [ngClass]="{'required': form.get('especiesPotencialesParaSiembraAlMenosTresOpciones').invalid && form.get('especiesPotencialesParaSiembraAlMenosTresOpciones').touched}">
          </div>
          <div>
            <label for="alturasPotencialesArboles"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Alturas potenciales de
              árboles:</label>
            <input type="text" appNumberInput formControlName="alturasPotencialesArboles" id="alturasPotencialesArboles"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Alturas potenciales de árboles"
              [ngClass]="{'required': form.get('alturasPotencialesArboles').invalid && form.get('alturasPotencialesArboles').touched}">
          </div>
          <div>
            <label for="caracteristicasEdaficasODelSuelo"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Características edáficas o del
              suelo:</label>
            <input type="text" formControlName="caracteristicasEdaficasODelSuelo" id="caracteristicasEdaficasODelSuelo"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Características edáficas o del suelo"
              [ngClass]="{'required': form.get('caracteristicasEdaficasODelSuelo').invalid && form.get('caracteristicasEdaficasODelSuelo').touched}">
          </div>
          <div>
            <label for="tresBolillo" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Tres
              bolillo:</label>
            <input type="checkbox" formControlName="tresBolillo" id="tresBolillo"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Tres bolillo"
              [ngClass]="{'required': form.get('tresBolillo').invalid && form.get('tresBolillo').touched}">
          </div>
          <div>
            <label for="cuadrado"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cuadrado:</label>
            <input type="checkbox" formControlName="cuadrado" id="cuadrado"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Cuadrado"
              [ngClass]="{'required': form.get('cuadrado').invalid && form.get('cuadrado').touched}">
          </div>
          <div>
            <label for="rectangular"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Rectangular:</label>
            <input type="checkbox" formControlName="rectangular" id="rectangular"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Rectangular"
              [ngClass]="{'required': form.get('rectangular').invalid && form.get('rectangular').touched}">
          </div>
          <div>
            <label for="individualOUno"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Individual o uno:</label>
            <input type="checkbox" formControlName="individualOUno" id="individualOUno"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Individual o uno"
              [ngClass]="{'required': form.get('individualOUno').invalid && form.get('individualOUno').touched}">
          </div>
          <div>
            <label for="distanciamientoSiembra"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Distanciamiento de
              siembra:</label>


              <ng-select
                [items]="distSiembra" bindLabel="nombre" bindValue="nombre" formControlName="distanciamientoSiembra"
                placeholder="Distanciamiento de siembra"
                [ngClass]="{required: form.get('distanciamientoSiembra').invalid && form.get('distanciamientoSiembra').touched}"
                >
              </ng-select>


          </div>
          <div>
            <label for="infraestructuraAfectada"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Infraestructura afectada:</label>


            <ng-select
              [items]="infraAfec" bindLabel="nombre" bindValue="nombre" formControlName="infraestructuraAfectada"
              placeholder="Distanciamiento de siembra"
              [ngClass]="{required: form.get('infraestructuraAfectada').invalid && form.get('infraestructuraAfectada').touched}"
              >
            </ng-select>


          </div>
          <div>
            <label for="pendienteDelTerreno"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Pendiente del terreno:</label>


              <ng-select
                [items]="pendiente" bindLabel="nombre" bindValue="nombre" formControlName="pendienteDelTerreno"
                placeholder="Distanciamiento de siembra"
                [ngClass]="{required: form.get('pendienteDelTerreno').invalid && form.get('pendienteDelTerreno').touched}"
                >
              </ng-select>

          </div>
          <div>
            <label for="barrio" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Barrio:</label>
            <input type="text" formControlName="barrio" id="barrio"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Barrio" [ngClass]="{'required': form.get('barrio').invalid && form.get('barrio').touched}">
          </div>
          <div>
            <label for="comuna" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Comuna:</label>
            <input type="text" formControlName="comuna" id="comuna"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Comuna" [ngClass]="{'required': form.get('comuna').invalid && form.get('comuna').touched}">
          </div>
          <div>
            <label for="altitudASNM" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Altitud
              ASNM:</label>
            <input type="text" appNumberInput formControlName="altitudASNM" id="altitudASNM"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Altitud ASNM"
              [ngClass]="{'required': form.get('altitudASNM').invalid && form.get('altitudASNM').touched}">
          </div>

          <div>
            <label for="coordenadasGeograficasYPlanas"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Coordenadas geográficas y
              planas:</label>
            <app-coordenada-xy #componente1 [dataForm]="onlyCoordenadas"></app-coordenada-xy>

          </div>






        </div>
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-1">
          <div>
            <label for="registroFotografico"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Registro fotográfico:</label>
            <app-registrofotografico #registroFotografico
              [dataForm]="onlyRegistroFotografico"></app-registrofotografico>
          </div>
        </div>
      </div>

    </div>
  </div>

  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el espaciosPotenciales.
  </div>
  <div *ngIf="isFormInValid" class="alert alert-danger" role="alert">
    Hay campos que faltan por llenar.
   </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br>
  <div class="flex justify-end space-x-4">

    <app-btn *ngIf="!isNew && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
      (click)="mostrarConfirmacion()">Borrar</app-btn>

    <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Guardar()">Guardar</app-btn>

    <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Actualizar()">Actualizar</app-btn>
  </div>

</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>

---------------------------------------
formulario-espaciospotenciales.component.scss
************

---------------------------------------
formulario-espaciospotenciales.component.ts
************
import {
  Component,
  EventEmitter,
  Input,
  OnInit,
  Output,
  ViewChild,
} from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import {  CoordenadaDto, RegistroFotograficoEspacioDto  } from 'src/app/core/models/censoarboreo-dto.model';
import { DetalleDto } from 'src/app/core/models/detalle-dto.model';
import { EspaciosPotencialesDto } from 'src/app/core/models/espaciospotenciales-dto.model';
import { MaestraDetalleCombo } from 'src/app/core/models/maestradetalle.mode';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { DetalleService } from 'src/app/core/services/detalle.service';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import { CoordenadaComponent } from 'src/app/modules/sharedcomponent/coordenada/coordenada.component';
import { RegistroFotograficoComponent } from 'src/app/modules/sharedcomponent/registrofotografico/registrofotografico.component';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-formulario-espaciospotenciales',
  templateUrl: './formulario-espaciospotenciales.component.html',
  styleUrls: ['./formulario-espaciospotenciales.component.scss'],
})
export class FormularioEspaciosPotencialesComponent implements OnInit {
  @ViewChild('componente1')
  coordenadaPosicion: CoordenadaComponent;

  @ViewChild('registroFotografico')
  registroFotosComponent: RegistroFotograficoComponent;

  statusDetail: RequestStatus = 'init';
  form: FormGroup;
  isNew: boolean = false;
  userNameRequired: boolean = false;
  passwordRequired: boolean = false;
  espacios: EspaciosPotencialesDto = new EspaciosPotencialesDto();
  onlyCoordenadas: CoordenadaDto = new CoordenadaDto();
  onlyRegistroFotografico: RegistroFotograficoEspacioDto[] =
    new Array<RegistroFotograficoEspacioDto>();
  tipoEmpla:DetalleDto[];
  distSiembra:DetalleDto[];
  infraAfec:DetalleDto[];
  pendiente:DetalleDto[];
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;

  @Input()
  set dataForm(data: EspaciosPotencialesDto) {
    console.log(data);
    if (data) {
      this.isNew = false;
      this.initializedObj(data);
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.espacios = data;
      this.onlyCoordenadas = this.espacios.coordenada;
      this.onlyRegistroFotografico = this.espacios.fotos;
    } else {
      this.initializedObj(data);
      this.espacios = data;
      this.isNew = true;
    }
  }

  private initializedObj(data: EspaciosPotencialesDto) {
    if (!data) {
      data = new EspaciosPotencialesDto();
    }
    if (!data.coordenada) {
      data.coordenada = new CoordenadaDto();
    }
  }
  @Input()
  set status(data: RequestStatus) {
    if (data) {
      this.statusDetail = data;
    }
  }

  @Output() create = new EventEmitter();
  @Output() update = new EventEmitter();
  @Output() delete = new EventEmitter();

  constructor(
    private formbuilder: FormBuilder,
    private sweetAlertService: SweetAlertService,
    private detallesService:DetalleService,
    private habilitaracciones: Habilitaracciones
  ) {
    this.BuildForm();
    this.getTipoEmpla();
    this.getDistSiembra();
    this.getInfraAfec();
    this.getPendiente();
  }

  ngOnInit(): void {
    const resultados = this.habilitaracciones.MostrarBotones('Espacios');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostraDelete=resultado.eliminar;
             this.mostraUpdate=resultado.editar;
            
        });
    }
  }


  private BuildForm() {
    this.form = this.formbuilder.group({
      areasDisponibles: ['', [Validators.required]],
      tipoEmplazamiento: ['', [Validators.required]],
      especiesPotencialesParaSiembraAlMenosTresOpciones: [
        '',
        [Validators.required],
      ],
      alturasPotencialesArboles: ['', [Validators.required]],
      caracteristicasEdaficasODelSuelo: ['', [Validators.required]],
      tresBolillo: [false, [Validators.required]],
      cuadrado: [false, [Validators.required]],
      rectangular: [false, [Validators.required]],
      individualOUno: [false, [Validators.required]],
      distanciamientoSiembra: ['', [Validators.required]],
      infraestructuraAfectada: ['', [Validators.required]],
      pendienteDelTerreno: ['', [Validators.required]],
      barrio: ['', [Validators.required]],
      comuna: ['', [Validators.required]],
      altitudASNM: ['', [Validators.required]],
    });
  }

  getTipoEmpla(){
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.TipoEmplazamiento).subscribe(
      result => {
        this.tipoEmpla = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getInfraAfec(){
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.InfraestructuraAfectada).subscribe(
      result => {
        this.infraAfec = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getDistSiembra(){
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.DistanciamientoSiembra).subscribe(
      result => {
        this.distSiembra = result.data
        this.statusDetail = 'init';
      }
    );
  }

  getPendiente(){
    this.statusDetail = 'loading';
    this.detallesService.getByMaestra(MaestraDetalleCombo.PendienteDelTerreno).subscribe(
      result => {
        this.pendiente = result.data
        this.statusDetail = 'init';
      }
    );
  }

  Guardar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }

    this.form.value.coordenada = this.coordenadaPosicion.getFormValue();
    this.form.value.fotos = new Array<RegistroFotograficoEspacioDto>();

    const files = this.registroFotosComponent.getFilesLoaded();
    const formData = new FormData();

    for (let i = 0; i < files.length; i++) {
      formData.append('files', files[i]);
    }


    let infoFotos = {
      'rotation'  : this.registroFotosComponent.getRotationLoaded().rotation,      
    };
    formData.append('infofotos', JSON.stringify(infoFotos));

    formData.append('fullobject', JSON.stringify(this.form.value));
    
    this.create.emit(formData);
  }

  Actualizar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }

    this.form.value.coordenada = this.coordenadaPosicion.getFormValue();
    this.form.value.fotos = this.registroFotosComponent.getCurrentFotos();

    const files = this.registroFotosComponent.getFilesLoaded();
    const formData = new FormData();

    for (let i = 0; i < files.length; i++) {
      formData.append('files', files[i]);
    }

    let infoFotos = {
      'rotation'  : this.registroFotosComponent.getRotationLoaded().rotation,      
    };
    formData.append('infofotos', JSON.stringify(infoFotos));
    formData.append('fullobject', JSON.stringify(this.form.value));    
    
    this.update.emit(formData);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del espaciosPotenciales';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(
      TitleUp,
      TitleDonw,
      () => {
        //ejecuto el llamado a la funcion Borrar
        this.Borrar();
      },
      () => {
        //en caso de usar cancelacion
      }
    );
  }

  Borrar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit();
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
    return {
      get: () => this.form.get(name),
      isValid: () => this.form.get(name).touched && this.form.get(name).invalid,
    };
  }
}

---------------------------------------
lista-espaciospotenciales.component.html
************
<div class="flex justify-between items-center mb-4">
  <h1 class="text-lg font-semibold">Espacios Potenciales</h1>
  <div class="flex items-center space-x-2">
    <app-cargar-manual-espacios></app-cargar-manual-espacios>
    <app-btn (click)="Descargar()" typeBtn="submit" color="green" [customIcon]="'faShareFromSquare'">Descargar</app-btn> 
    <app-btn *ngIf="mostrarCreate" typeBtn="submit" color="primary" [customIcon]="'faPlus'" routerLink="/app/espacios/create">Agregar</app-btn>                   
  </div>
</div>


<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50" type="text" />
    </div>
  </div>
</form>
<div>
  <p-table   [value]="dataList"
  [paginator]="true"
  [rows]="this.pageSize"
  [showCurrentPageReport]="true"
  [tableStyle]="{ 'min-width': '50rem' }"
  [lazy]="true"
  [totalRecords]="collectionSize" (onLazyLoad)="refreshGrid($event)"
  [rowsPerPageOptions]="[5, 10, 15, 20]">
    <ng-template pTemplate="header">
        <tr class="bg-gray-50">
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Áreas disponibles</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo de emplazamiento</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Especies potenciales para siembra (Al menos tres opciones)</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Alturas potenciales de árboles</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Características edáficas o del suelo</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tres bolillo</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cuadrado</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rectangular</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Individual o uno</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Distanciamiento de siembra</th>
          
          
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Infraestructura afectada</th>
          
          
          
          
          
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Coordenadas geográficas y planas</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pendiente del terreno</th>
          
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Registro fotográfico</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Barrio</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Comuna</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Altitud (a.s.n.m.)</th>
          

            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
        </tr>
    </ng-template>
    <ng-template pTemplate="body" let-rowData let-rowIndex="rowIndex">
        <tr [class.bg-gray-200]="rowIndex % 2 === 0">
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.areasDisponibles}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.tipoEmplazamiento}}</td>
          
          
          
          
          
          
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.especiesPotencialesParaSiembraAlMenosTresOpciones}}</td>
          
          
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.alturasPotencialesArboles}}</td>
          
          
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.caracteristicasEdaficasODelSuelo}}</td>
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.tresBolillo}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.cuadrado}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.rectangular}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.individualOUno}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.distanciamientoSiembra}}</td>
          
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.infraestructuraAfectada}}</td>
          
          
          
          
          
          
          <td class="px-6 py-4 whitespace-nowrap w-64">--rowData.coordenadasGeograficasYPlanas</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.pendienteDelTerreno}}</td>
          
          <td class="px-6 py-4 whitespace-nowrap w-64">--rowData.registroFotografico}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.barrio}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.comuna}}</td>
          <td class="px-6 py-4 whitespace-nowrap w-64">{{rowData.altitudASNM}}</td>
          
            <td class="px-6 py-4 whitespace-nowrap w-64">
                <a [routerLink]="['./edit', rowData.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
            </td>
        </tr>
    </ng-template>
  </p-table>
</div>

---------------------------------------
lista-espaciospotenciales.component.scss
************

---------------------------------------
lista-espaciospotenciales.component.ts
************

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { EspaciosPotencialesDto } from 'src/app/core/models/espaciospotenciales-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { EspaciosPotencialesService } from 'src/app/core/services/espaciospotenciales.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-lista-espaciosPotenciales',
  templateUrl: './lista-espaciosPotenciales.component.html',
  styleUrls: ['./lista-espaciosPotenciales.component.scss']
})
export class ListaEspaciosPotencialesComponent implements OnInit {

  dataList: EspaciosPotencialesDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  mostrarCreate: boolean = false;

  constructor(private formbuilder: FormBuilder,
    private espaciosPotencialesService: EspaciosPotencialesService,
    private habilitaracciones: Habilitaracciones) {

  }

  ngOnInit(): void {

    this.BuildForm();
    this.getCredentials();
    const resultados = this.habilitaracciones.MostrarBotones('Espacios');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostrarCreate=resultado.editar;
            
        });
    }
  }

  private getCredentials() {
    this.espaciosPotencialesService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';

      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.espaciosPotencialesService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.espaciosPotencialesService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }

  Descargar() {
    this.statusDetail = 'loading';
    console.log("descargar")
    this.espaciosPotencialesService.getDescargas().subscribe(
      response => {
        this.statusDetail = 'init';
        this.downloadFile(response);
      },
      error => {
        console.error('Download error:', error);
        this.statusDetail = 'error';
      }
    );
  }

  private downloadFile(data: Blob) {
    const blob = new Blob([data], { type: 'text/csv; charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const anchor = document.createElement('a');
    anchor.href = url;
    anchor.download = 'espacios.csv';  // El nombre del archivo que se descargará.
    anchor.click();

    // Cleanup
    window.URL.revokeObjectURL(url);
  }

}

---------------------------------------
espaciospotenciales.component.html
************
<app-formulario-espaciospotenciales
[dataForm]="espaciosPotenciales"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-espaciospotenciales>

---------------------------------------
espaciospotenciales.component.scss
************

---------------------------------------
espaciospotenciales.component.ts
************
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { EspaciosPotencialesDto } from 'src/app/core/models/espaciospotenciales-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { EspaciosPotencialesService } from 'src/app/core/services/espaciospotenciales.service';

@Component({
  selector: 'app-espaciosPotenciales',
  templateUrl: './espaciosPotenciales.component.html',
  styleUrls: ['./espaciosPotenciales.component.scss']
})
export class EspaciosPotencialesComponent implements OnInit {

  id: string;
  statusDetail: RequestStatus;
  espaciosPotenciales: EspaciosPotencialesDto

constructor(private activatedRoute: ActivatedRoute,
  private espaciosPotencialesService: EspaciosPotencialesService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.espaciosPotencialesService.getById(this.id)
        .subscribe(espaciosPotenciales => {
          this.espaciosPotenciales = espaciosPotenciales.data;
        });
      }
    });

  }

  Guardar(data)
  {
    this.espaciosPotencialesService.createWFiles(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/espacios']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    this.espaciosPotencialesService.updateWFile(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/espacios']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.espaciosPotencialesService.delete( this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/espacios']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
espaciospotenciales-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ListaEspaciosPotencialesComponent } from './components/lista-espaciospotenciales/lista-espaciospotenciales.component';
import { EspaciosPotencialesComponent } from './containers/espaciospotenciales/espaciospotenciales.component';
import { AuthGuard } from 'src/app/core/guards/auth.guard';

const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ListaEspaciosPotencialesComponent
  },
  {
    path: 'create',
    canActivate: [ AuthGuard ],
    component: EspaciosPotencialesComponent
  },
  {
    path: 'edit/:id',
    canActivate: [ AuthGuard ],
    component: EspaciosPotencialesComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule,
  ]
})
export class EspaciosPotencialesRoutingModule { }

---------------------------------------
espaciospotenciales.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { EspaciosPotencialesRoutingModule } from './espaciospotenciales-routing.module';
import { ReactiveFormsModule } from '@angular/forms';

import { SharedModule } from 'src/app/shared/shared.module';

import { FormularioEspaciosPotencialesComponent } from './components/formulario-espaciospotenciales/formulario-espaciospotenciales.component';
import { ListaEspaciosPotencialesComponent } from './components/lista-espaciospotenciales/lista-espaciospotenciales.component';
import { EspaciosPotencialesComponent } from './containers/espaciospotenciales/espaciospotenciales.component';
import { NumberInputDirective } from 'src/app/core/directives/number-input.directive';
import { CargarManualEspaciosComponent } from '../censoarboreo/components/cargar-manual-espacios/cargar-manual-espacios.component';



@NgModule({
  declarations: [
    ListaEspaciosPotencialesComponent,
    FormularioEspaciosPotencialesComponent,
    EspaciosPotencialesComponent,
    CargarManualEspaciosComponent
    
  ],
  imports: [
    CommonModule,
    EspaciosPotencialesRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class EspaciosPotencialesModule { }

---------------------------------------
home-routing.module.ts
************
import { HomeComponent } from './pages/home/home.component';
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  {
    path: '',
    // canActivate: [ AuthGuard ],
    component: HomeComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class HomeRoutingModule { }

---------------------------------------
home.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { HomeRoutingModule } from './home-routing.module';
import { HomeComponent } from './pages/home/home.component';
import { SharedModule } from 'src/app/shared/shared.module';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';


@NgModule({
  declarations: [
    HomeComponent
  ],
  imports: [
    CommonModule,
    HomeRoutingModule,
    SharedModule,
    FontAwesomeModule
  ]
})
export class HomeModule { }

---------------------------------------
home.component.html
************
<h1>Arborizado de Bucaramanga</h1>
<br>
<app-btn (click)="getArbolesCiudad()" typeBtn="submit" color="green" [customIcon]="'faShareFromSquare'">Cargar Arboles</app-btn>
<div *ngIf="statusDetail === 'loading'" class="flex items-center justify-center min-h-screen">
  <div class="absolute inset-0 bg-gray-500 opacity-5"></div>
  <div class=" p-2 bg-white rounded-lg shadow-lg" style="height: 50px;">
    <div class="flex justify-center mb-4">
      <div class="loader ease-linear border-8 border-t-8 border-gray-200 h-16 w-16"></div>
      <p class="text-1xl text-center text-gray-900 animate-pulse">
        <fa-icon class="mr-2" [icon]="faSpinner" [pulse]="true"></fa-icon>Cargando Arboles...
      </p>
    </div>

  </div>
</div>
<div id="containerId">
</div>
<br>

---------------------------------------
home.component.scss
************
#containerId {
  width: 800px;
  height: 600px;
  border: 1px solid #ccc; /* Opcional: para visualizar el borde del contenedor del mapa */
}

#containerId2 {
  width: 150px;
  height: 150px;
  border: 1px solid #ccc; /* Opcional: para visualizar el borde del contenedor del mapa */
}

---------------------------------------
home.component.ts
************
import { Component } from '@angular/core';
import { CoordenadaDto } from 'src/app/core/models/censoarboreo-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { EsriMapService } from 'src/app/core/services/EsriMap.service';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';
import { faSpinner } from '@fortawesome/free-solid-svg-icons';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent {

  listaCoordenadas:CoordenadaDto[]=[];
  statusDetail: RequestStatus = 'init';
  faSpinner = faSpinner;


  constructor(private esriMapService: EsriMapService,
    private censoService: CensoArboreoService)
  {

  }

  getArbolesCiudad() {
    this.statusDetail = 'loading';
    this.censoService.getAllCoordenadas().subscribe(
      result => {
        this.listaCoordenadas = result.data
        this.listaCoordenadas.forEach(coord => {
          this.esriMapService.addPoint(coord.longitud, coord.latitud);
        });
        this.statusDetail = 'init';
      }
    );
  }

  async ngAfterViewInit() {
    await this.esriMapService.initializeMap('containerId'); // Asegúrate de pasar el ID correcto del contenedor
    this.esriMapService.resetMapView();
     //this.addAllPoints();
  }

}





---------------------------------------
formulario-maestra.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Maestra</h1>
</div>
<br>
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del individuo
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="nombreTabla" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">nombreTabla:</label>
            <input type="text" formControlName="nombreTabla" id="nombreTabla"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="nombreTabla" [ngClass]="{'required': form.get('nombreTabla').invalid && form.get('nombreTabla').touched}">
            </div>
        </div>
      </div>
    </div>
  </div>

  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el maestra.
  </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br>
  <div class="flex justify-end space-x-4">

    <app-btn *ngIf="!isNew && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
      (click)="mostrarConfirmacion()">Borrar</app-btn>

    <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Guardar()">Guardar</app-btn>

    <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Actualizar()">Actualizar</app-btn>
  </div>

</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>
---------------------------------------
formulario-maestra.component.scss
************

---------------------------------------
formulario-maestra.component.ts
************
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MaestraDto } from 'src/app/core/models/maestra-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-formulario-maestra',
  templateUrl: './formulario-maestra.component.html',
  styleUrls: ['./formulario-maestra.component.scss']
})
export class FormularioMaestraComponent implements OnInit {

  statusDetail: RequestStatus = 'init';
  form:FormGroup;
  isNew:boolean = false;
  userNameRequired:boolean = false;
  passwordRequired:boolean = false;
  maestra:MaestraDto;
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  @Input()
  set dataForm(data:MaestraDto)
  {
    if(data)
    {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.maestra = data;
    } else {
      this.isNew = true;
    }
  };
  @Input()
  set status(data:RequestStatus)
  {
    if(data)
    {
      this.statusDetail = data;
    }
  };


  @Output() create= new EventEmitter();
  @Output() update= new EventEmitter();
  @Output() delete= new EventEmitter();

  constructor( private formbuilder:FormBuilder,
    private sweetAlertService: SweetAlertService,
    private habilitaracciones: Habilitaracciones
  ){
      this.BuildForm();
  }

  ngOnInit(): void {
    const resultados = this.habilitaracciones.MostrarBotones('Maestra');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostraDelete=resultado.eliminar;
             this.mostraUpdate=resultado.editar;
            
        });
    }

  }

  private BuildForm(){


    this.form = this.formbuilder.group({
      nombreTabla:['', [Validators.required]]
    })
  }

  Guardar()
  {
    if(this.form.invalid)
    {

      this.form.markAllAsTouched();
      return;
    }


    this.create.emit(this.form.value);
  }

  Actualizar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.update.emit(this.form.value);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del maestra';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(TitleUp,TitleDonw, () => {
      //ejecuto el llamado a la funcion Borrar
      this.Borrar();
    }, () => {
         //en caso de usar cancelacion
    });
  }

  Borrar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit()
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
      return {
          get: () => this.form.get(name),
          isValid: () => this.form.get(name).touched && this.form.get(name).valid
      };
  }

}

---------------------------------------
lista-maestra.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Maestra</h1>
  <app-btn *ngIf="mostrarCreate" typeBtn="submit" color="primary"  [customIcon]="'faPlus'" routerLink="/app/maestra/create">Agregar</app-btn>
</div>
<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50" type="text" />
    </div>
  </div>
</form>
<div>
  <p-table   [value]="dataList"
  [paginator]="true"
  [rows]="this.pageSize"
  [showCurrentPageReport]="true"
  [tableStyle]="{ 'min-width': '50rem' }"
  [lazy]="true"
  [totalRecords]="collectionSize" (onLazyLoad)="refreshGrid($event)"
  [rowsPerPageOptions]="[5, 10, 15, 20]">
    <ng-template pTemplate="header">
        <tr class="bg-gray-50">
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre maestra</th>  
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>          
        </tr>
    </ng-template>
    <ng-template pTemplate="body" let-credencial let-rowIndex="rowIndex">
        <tr [class.bg-gray-200]="rowIndex % 2 === 0">
            <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.nombreTabla}}</td>
            
            <td class="px-6 py-4 whitespace-nowrap w-64">
                <a [routerLink]="['./edit', credencial.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
            </td>
        </tr>
    </ng-template>
  </p-table>
</div>

---------------------------------------
lista-maestra.component.scss
************

---------------------------------------
lista-maestra.component.ts
************
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MaestraDto } from 'src/app/core/models/maestra-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';

import { MaestraService } from 'src/app/core/services/maestra.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';

@Component({
  selector: 'app-lista-maestra',
  templateUrl: './lista-maestra.component.html',
  styleUrls: ['./lista-maestra.component.scss']
})
export class ListaMaestraComponent implements OnInit {

  dataList: MaestraDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';  
  mostrarCreate: boolean = false;

  constructor(private formbuilder: FormBuilder,
    private maestraService: MaestraService,
    private habilitaracciones: Habilitaracciones) {

  }

  ngOnInit(): void {

    this.BuildForm();
    this.getCredentials();
    const resultados = this.habilitaracciones.MostrarBotones('Maestra');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostrarCreate=resultado.editar;
            
        });
    }
  }

  private getCredentials() {
    this.maestraService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';

      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.maestraService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.maestraService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.dataList = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }

}

---------------------------------------
maestra.component.html
************
<app-formulario-maestra
[dataForm]="maestra"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-maestra>

---------------------------------------
maestra.component.scss
************

---------------------------------------
maestra.component.ts
************
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { MaestraDto } from 'src/app/core/models/maestra-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { MaestraService } from 'src/app/core/services/maestra.service';

@Component({
  selector: 'app-maestra',
  templateUrl: './maestra.component.html',
  styleUrls: ['./maestra.component.scss']
})
export class MaestraComponent implements OnInit {

  id: string;
  statusDetail: RequestStatus;
  maestra:MaestraDto;

constructor(private activatedRoute: ActivatedRoute,
  private maestraService: MaestraService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.maestraService.getById(this.id)
        .subscribe(maestra => {
          this.maestra = maestra.data;
        });
      }
    });

  }

  Guardar(data)
  {
    this.maestraService.create(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/maestra']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    this.maestraService.update(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/maestra']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.maestraService.delete(this.id , data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/maestra']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
maestra-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ListaMaestraComponent } from './components/lista-maestra/lista-maestra.component';
import { MaestraComponent } from './containers/maestra/maestra.component';
import { AuthGuard } from 'src/app/core/guards/auth.guard';

const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ListaMaestraComponent
  },
  {
    path: 'create',
    canActivate: [ AuthGuard ],
    component: MaestraComponent
  },
  {
    path: 'edit/:id',
    canActivate: [ AuthGuard ],
    component: MaestraComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule,
  ]
})
export class MaestraRoutingModule { }

---------------------------------------
maestra.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { MaestraRoutingModule } from './maestra-routing.module';
import { ReactiveFormsModule } from '@angular/forms';

import { SharedModule } from 'src/app/shared/shared.module';

import { FormularioMaestraComponent } from './components/formulario-maestra/formulario-maestra.component';
import { ListaMaestraComponent } from './components/lista-maestra/lista-maestra.component';
import { MaestraComponent } from './containers/maestra/maestra.component';


@NgModule({
  declarations: [
    ListaMaestraComponent,
    FormularioMaestraComponent,
    MaestraComponent    
  ],
  imports: [
    CommonModule,
    MaestraRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class MaestraModule { }

---------------------------------------
formulario-module.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Módulo</h1>
</div>
<br>
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del modulo
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="first_name" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nombre
              del módulo:</label>
            <input type="text" formControlName="moduleName" id="moduleName"
              class="bg-gray-50 border  border-primary-300 text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="John" [ngClass]="{'required': !field('moduleName').isValid()}">
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <app-btn *ngIf="!isNew && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
            (click)="mostrarConfirmacion()">Borrar</app-btn>

          <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
            (click)="Guardar()">Guardar</app-btn>

          <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
            (click)="Actualizar()">Actualizar</app-btn>
        </div>
      </div>
    </div>

  </div>
  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el rol.
  </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>

---------------------------------------
formulario-module.component.scss
************

---------------------------------------
formulario-module.component.ts
************
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ModulesDto } from 'src/app/core/models/modules-dto';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-formulario-module',
  templateUrl: './formulario-module.component.html',
  styleUrls: ['./formulario-module.component.scss']
})
export class FormularioModuleComponent {
  statusDetail: RequestStatus = 'init';
  form:FormGroup;
  isNew:boolean = true;
  userNameRequired:boolean = false;
  passwordRequired:boolean = false;
  user:ModulesDto;
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;

  @Input()
  set dataDto(data:ModulesDto)
  {
    if(data)
    {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.user = data;
    }
  };
  @Input()
  set status(data:RequestStatus)
  {
    if(data)
    {
      this.statusDetail = data;
    }
  };


  @Output() create= new EventEmitter();
  @Output() update= new EventEmitter();
  @Output() delete= new EventEmitter();

  constructor( private formbuilder:FormBuilder,
    private sweetAlertService: SweetAlertService,
    private habilitaracciones: Habilitaracciones
  ){
      this.BuildForm();
  }

  ngOnInit(): void {
    const resultados = this.habilitaracciones.MostrarBotones('Modules');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostraDelete=resultado.eliminar;
             this.mostraUpdate=resultado.editar;
            
        });
    }

  }

  private BuildForm(){


    this.form = this.formbuilder.group({
      moduleName:['', [Validators.required]]
    })
  }

  Guardar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }


    this.create.emit(this.form.value);
  }

  Actualizar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.update.emit(this.form.value);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del modulo';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(TitleUp,TitleDonw, () => {
      //ejecuto el llamado a la funcion Borrar
      this.Borrar();
    }, () => {
         //en caso de usar cancelacion
    });
  }

  Borrar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit()
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
      return {
          get: () => this.form.get(name),
          isValid: () => this.form.get(name).touched && this.form.get(name).valid
      };
  }
}

---------------------------------------
module-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthGuard } from 'src/app/core/guards/auth.guard';
import { ListaModuleComponent } from './page/lista-module/lista-module.component';
import { ModuleComponent } from './page/module/module.component';

const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ListaModuleComponent
  },
  {
    path: 'create',
    canActivate: [ AuthGuard ],
    component: ModuleComponent
  },
  {
    path: 'edit/:id',
    canActivate: [ AuthGuard ],
    component: ModuleComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class ModuleRoutingModule { }

---------------------------------------
module.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { ModuleRoutingModule } from './module-routing.module';
import { ModuleComponent } from './page/module/module.component';
import { ListaModuleComponent } from './page/lista-module/lista-module.component';
import { FormularioModuleComponent } from './component/formulario-module/formulario-module.component';
import { ReactiveFormsModule } from '@angular/forms';
import { SharedModule } from 'src/app/shared/shared.module';


@NgModule({
  declarations: [
    ModuleComponent,
    ListaModuleComponent,
    FormularioModuleComponent
  ],
  imports: [
    CommonModule,
    ModuleRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class ModuleModule { }

---------------------------------------
lista-module.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Módulos</h1>
  <app-btn *ngIf="mostrarCreate" typeBtn="submit" color="primary" [customIcon]="'faPlus'" routerLink="/app/modules/create">Agregar</app-btn>
</div>
<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter"
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
        type="text" />
    </div>
  </div>
</form>
<div *ngIf="algo">
  <p-table [value]="data" [paginator]="true" [rows]="this.pageSize" [showCurrentPageReport]="true"
    [tableStyle]="{ 'min-width': '50rem' }" [lazy]="true" [totalRecords]="collectionSize"
    (onLazyLoad)="refreshGrid($event)" [rowsPerPageOptions]="[5,10,15,20]">
    <ng-template pTemplate="header">
      <tr class="bg-gray-50">
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre módulo</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
      </tr>
    </ng-template>
    <ng-template pTemplate="body" let-credencial let-rowIndex="rowIndex">
      <tr [class.bg-gray-200]="rowIndex % 2 === 0">
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.moduleName}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">
          <a [routerLink]="['./edit', credencial.id]"
            class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
        </td>
      </tr>
    </ng-template>
  </p-table>
</div>

---------------------------------------
lista-module.component.scss
************

---------------------------------------
lista-module.component.ts
************
import { Component } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { ModulesDto } from 'src/app/core/models/modules-dto';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { ModuleService } from 'src/app/core/services/modules-service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-lista-module',
  templateUrl: './lista-module.component.html',
  styleUrls: ['./lista-module.component.scss']
})
export class ListaModuleComponent {
  data: ModulesDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  algo:boolean =false;
  mostrarCreate: boolean = false;
  constructor(private formbuilder: FormBuilder,
    private moduleService: ModuleService,
    private habilitaracciones: Habilitaracciones) {

  }
  ngOnInit(): void {

    this.BuildForm();
    this.getCredentials();
    const resultados = this.habilitaracciones.MostrarBotones('Modules');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostrarCreate=resultado.editar;
            
        });
    }
  }

  private getCredentials() {
    this.moduleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
        this.algo = true;
      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.moduleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.moduleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }

}

---------------------------------------
module.component.html
************
<app-formulario-module
[dataDto]="data"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-module>

---------------------------------------
module.component.scss
************

---------------------------------------
module.component.ts
************
import { Component } from '@angular/core';
import { ActivatedRoute, Router, Params } from '@angular/router';
import { ModulesDto } from 'src/app/core/models/modules-dto';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { ModulesService } from 'src/app/core/services/module.service';

@Component({
  selector: 'app-module',
  templateUrl: './module.component.html',
  styleUrls: ['./module.component.scss']
})
export class ModuleComponent {
  id: string;
  statusDetail: RequestStatus;
  data:ModulesDto

constructor(private activatedRoute: ActivatedRoute,
  private moduleService: ModulesService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.moduleService.getById(this.id)
        .subscribe(usuario => {
          this.data = usuario.data;
        });
      }
    });

  }

  Guardar(data)
  {
    this.moduleService.create(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/modules']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    this.moduleService.update(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/modules']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.moduleService.delete(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/modules']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }
}

---------------------------------------
formulario-permisos.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Permisos</h1>
</div>
<br>
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del modulo
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <!-- Input for idRol -->
          <div>
            <label for="idRol" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">ID Rol</label>
            <select formControlName="idRol" id="idRol" [ngClass]="{'required': !field('idRol').isValid()}"
              class="shadow  text-xs appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
              <option value="" selected>Seleccione</option>
              <option *ngFor="let periodo of roles" [value]="periodo.id">{{periodo.rolName}}</option>
            </select>
          </div>

          <!-- Input for idModule -->
          <div>
            <label for="idModule" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Id
              Módulo</label>
            <select formControlName="idModule" id="idModule" [ngClass]="{'required': !field('idModule').isValid()}"
              class="shadow  text-xs appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
              <option value="" selected>Seleccione</option>
              <option *ngFor="let periodo of modulos" [value]="periodo.id">{{periodo.moduleName}}</option>
            </select>
          </div>
          <!-- Created Permission Checkbox -->
          <div>
            <label for="created" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Permiso:
              Agregar</label>
            <input type="checkbox" formControlName="created" id="created"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full p-2.5  dark:focus:ring-blue-500 dark:focus:border-blue-500"
              [ngClass]="{'required': !field('created').get().valid}">
          </div>

          <!-- Edited Permission Checkbox -->
          <div>
            <label for="edited" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Permiso:
              Editar</label>
            <input type="checkbox" formControlName="edited" id="edited"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full p-2.5  dark:focus:ring-blue-500 dark:focus:border-blue-500"
              [ngClass]="{'required': !field('edited').get().valid}">
          </div>

          <!-- Listed Permission Checkbox -->
          <div>
            <label for="listed" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Permiso:
              Listar</label>
            <input type="checkbox" formControlName="listed" id="listed"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full p-2.5  dark:focus:ring-blue-500 dark:focus:border-blue-500"
              [ngClass]="{'required': !field('listed').get().valid}">
          </div>

          <!-- Deleted Permission Checkbox -->
          <div>
            <label for="deleted" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Permiso:
              Eliminar</label>
            <input type="checkbox" formControlName="deleted" id="deleted"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full p-2.5  dark:focus:ring-blue-500 dark:focus:border-blue-500"
              [ngClass]="{'required': !field('deleted').get().valid}">
          </div>

          <!-- Printed Permission Checkbox -->
          <div>
            <label for="printed" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Permiso:
              Imprimir</label>
            <input type="checkbox" formControlName="printed" id="printed"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 w-full p-2.5  dark:focus:ring-blue-500 dark:focus:border-blue-500"
              [ngClass]="{'required': !field('printed').get().valid}">
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <app-btn *ngIf="!isNew && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
            (click)="mostrarConfirmacion()">Borrar</app-btn>

          <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
            (click)="Guardar()">Guardar</app-btn>

          <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
            (click)="Actualizar()">Actualizar</app-btn>
        </div>
      </div>
    </div>

  </div>
  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el permiso.
  </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>

---------------------------------------
formulario-permisos.component.scss
************

---------------------------------------
formulario-permisos.component.ts
************
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { ModulesDto } from 'src/app/core/models/modules-dto';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { RolModuleDto } from 'src/app/core/models/rol-module-dto';
import { RolesDto } from 'src/app/core/models/roles-dto';
import { ModuleService } from 'src/app/core/services/modules-service';
import { RolesService } from 'src/app/core/services/roles-service';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-formulario-permisos',
  templateUrl: './formulario-permisos.component.html',
  styleUrls: ['./formulario-permisos.component.scss']
})
export class FormularioPermisosComponent {
  statusDetail: RequestStatus = 'init';
  form:FormGroup;
  isNew:boolean = true;
  userNameRequired:boolean = false;
  passwordRequired:boolean = false;
  user:RolModuleDto;
  roles:RolesDto[];
  modulos:ModulesDto[];
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  @Input()
  set dataDto(data:RolModuleDto)
  {
    if(data)
    {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.user = data;
    }
  };
  @Input()
  set status(data:RequestStatus)
  {
    if(data)
    {
      this.statusDetail = data;
    }
  };


  @Output() create= new EventEmitter();
  @Output() update= new EventEmitter();
  @Output() delete= new EventEmitter();

  constructor( private formbuilder:FormBuilder,
    private moduleService: ModuleService,
    private roleService: RolesService,
    private sweetAlertService: SweetAlertService,
    private habilitaracciones: Habilitaracciones
  ){
      this.BuildForm();
      this.getModulos();
      this.getRoles();
  }

  ngOnInit(): void {
    const resultados = this.habilitaracciones.MostrarBotones('Permisos');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostraDelete=resultado.eliminar;
             this.mostraUpdate=resultado.editar;
            
        });
    }
  }

  private BuildForm(){

    this.form = this.formbuilder.group({
      created: [false],
      edited: [false],
      listed: [false],
      deleted: [false],
      printed: [false],
      idRol: ['', Validators.required],
      idModule: ['', Validators.required],
    });
  }

  getModulos() {
    this.moduleService.getAll().subscribe(
      periodos => {
        this.modulos = periodos.data
      }
    );
  }

  getRoles() {
    this.roleService.getAll().subscribe(
      periodos => {
        this.roles = periodos.data
      }
    );
  }

  Guardar()
  {
    
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }


    this.create.emit(this.form.value);
  }

  Actualizar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.update.emit(this.form.value);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del permiso';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(TitleUp,TitleDonw, () => {
      //ejecuto el llamado a la funcion Borrar
      this.Borrar();
    }, () => {
         //en caso de usar cancelacion
    });
  }

  Borrar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit()
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
      return {
          get: () => this.form.get(name),
          isValid: () => this.form.get(name).touched && this.form.get(name).valid
      };
  }
}

---------------------------------------
lista-permisos.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Permisos</h1>
  <app-btn *ngIf="mostrarCreate" typeBtn="submit" color="primary" [customIcon]="'faPlus'" routerLink="/app/permisos/create">Agregar</app-btn>
</div>
<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter"
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
        type="text" />
    </div>
  </div>
</form>
<div *ngIf="algo">
  <p-table [value]="data" [paginator]="true" [rows]="this.pageSize" [showCurrentPageReport]="true"
    [tableStyle]="{ 'min-width': '50rem' }" [lazy]="true" [totalRecords]="collectionSize"
    (onLazyLoad)="refreshGrid($event)" [rowsPerPageOptions]="[5,10,15,20]">
    <ng-template pTemplate="header">
      <tr class="bg-gray-50">
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rol</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre módulo</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Consultar</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Agregar</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Editar</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Borrar</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Imprimir</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
      </tr>
    </ng-template>
    <ng-template pTemplate="body" let-credencial let-rowIndex="rowIndex">
      <tr [class.bg-gray-200]="rowIndex % 2 === 0">
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.rol.rolName}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.module.moduleName}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.listed}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.created}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.edited}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.deleted}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.printed}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">
          <a [routerLink]="['./edit', credencial.id]"
            class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
        </td>
      </tr>
    </ng-template>
  </p-table>
</div>

---------------------------------------
lista-permisos.component.scss
************

---------------------------------------
lista-permisos.component.ts
************
import { Component } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { RolModuleDto } from 'src/app/core/models/rol-module-dto';
import { RolModuleService } from 'src/app/core/services/roles-modules-service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-lista-permisos',
  templateUrl: './lista-permisos.component.html',
  styleUrls: ['./lista-permisos.component.scss']
})
export class ListaPermisosComponent {
  data: RolModuleDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  algo:boolean =false;  
  mostrarCreate: boolean = false;

  constructor(private formbuilder: FormBuilder,
    private rolModuleService: RolModuleService,
    private habilitaracciones: Habilitaracciones) {

  }
  ngOnInit(): void {

    this.BuildForm();
    this.getCredentials();
    const resultados = this.habilitaracciones.MostrarBotones('Permisos');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostrarCreate=resultado.editar;
            
        });
    }
  }

  private getCredentials() {
    this.rolModuleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
        this.algo = true;
      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.rolModuleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';
    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.rolModuleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }
}

---------------------------------------
permisos.component.html
************
<app-formulario-permisos
[dataDto]="data"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-permisos>

---------------------------------------
permisos.component.scss
************

---------------------------------------
permisos.component.ts
************
import { Component } from '@angular/core';
import { ActivatedRoute, Router, Params } from '@angular/router';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { RolModuleDto } from 'src/app/core/models/rol-module-dto';
import { RolModuleService } from 'src/app/core/services/roles-modules-service';

@Component({
  selector: 'app-permisos',
  templateUrl: './permisos.component.html',
  styleUrls: ['./permisos.component.scss']
})
export class PermisosComponent {
  id: string;
  statusDetail: RequestStatus;
  data:RolModuleDto

constructor(private activatedRoute: ActivatedRoute,
  private permisoservice: RolModuleService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.permisoservice.getById(this.id)
        .subscribe(usuario => {
          this.data = usuario.data;
        });
      }
    });

  }

  Guardar(data)
  {
    this.permisoservice.create(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/permisos']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {

    this.permisoservice.update(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/permisos']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    this.permisoservice.delete(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/permisos']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }
}

---------------------------------------
permisos-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { PermisosComponent } from './pages/permisos/permisos.component';
import { AuthGuard } from 'src/app/core/guards/auth.guard';
import { ListaPermisosComponent } from './pages/lista-permisos/lista-permisos.component';

const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ListaPermisosComponent
  },
  {
    path: 'create',
    canActivate: [ AuthGuard ],
    component: PermisosComponent
  },
  {
    path: 'edit/:id',
    canActivate: [ AuthGuard ],
    component: PermisosComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class PermisosRoutingModule { }

---------------------------------------
permisos.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { PermisosRoutingModule } from './permisos-routing.module';
import { PermisosComponent } from './pages/permisos/permisos.component';
import { FormularioPermisosComponent } from './components/formulario-permisos/formulario-permisos.component';
import { ReactiveFormsModule } from '@angular/forms';
import { SharedModule } from 'src/app/shared/shared.module';
import { ListaPermisosComponent } from './pages/lista-permisos/lista-permisos.component';


@NgModule({
  declarations: [
    ListaPermisosComponent,
    PermisosComponent,
    FormularioPermisosComponent
  ],
  imports: [
    CommonModule,
    PermisosRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class PermisosModule { }

---------------------------------------
masreportes.component.html
************
<form >
  <div class="flex flex-row items-center justify-between mb-4">
    <label class="text-sm font-medium text-gray-700">Tipo de reporte</label>
    <select [(ngModel)]="selectedReportType" name="tipofile"  class="w-full rounded-md border border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-2">
      <option value="1">Exportar siembra</option>
      <option value="2">Exportar poda</option>
      <option value="3">Exportar tala</option>
    </select>
    <div class="mx-4"></div>
    <button (click)="Descargar()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">Descargar</button>

  </div>
 </form>
 
     
      
      
      



---------------------------------------
masreportes.component.scss
************

---------------------------------------
masreportes.component.ts
************
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MasreportesService } from 'src/app/core/services/masreportes-service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';


@Component({
  selector: 'app-masreportes',
  templateUrl: './masreportes.component.html',
  styleUrls: ['./masreportes.component.scss']
})
export class MasReportesComponent implements OnInit {
  selectedReportType: number;
  form: FormGroup;

  constructor(private formbuilder: FormBuilder,
    private masreportesService: MasreportesService,
    private habilitaracciones: Habilitaracciones) {
      this.selectedReportType = 1;
  }

  ngOnInit(): void {

  }

  changeReportType(event) {
    this.selectedReportType = event.target.value;
  }
  Descargar() {

    this.masreportesService.getDescargas(+this.selectedReportType).subscribe(

      response => {


        this.downloadFile(response);
      },
      error => {
        console.error('Download error:', error);

      }
    );

  }

  private downloadFile(data: Blob) {
    const blob = new Blob([data], { type: 'text/xlsx; charset=utf-8' });
    const url = window.URL.createObjectURL(blob);
    const anchor = document.createElement('a');
    anchor.href = url;
    var ruta = ''
    if(this.selectedReportType == 1){
      ruta = 'actividades_silviculturales_siembra.xlsx'
    }else{
      if(this.selectedReportType == 2){
        ruta = 'actividades_silviculturales_poda.xlsx'
      }else{
        if(this.selectedReportType == 3){
          ruta = 'actividades_silviculturales_tala.xlsx'
        }

      }
    }
    anchor.download = ruta;
    anchor.click();
    window.URL.revokeObjectURL(url);
  }

}

---------------------------------------
reportes.component.html
************
<div class="mt-6">
  <div class="text-2xl font-bold">Reportes</div>
</div>
<form class="max-w-3xl mx-auto md:flex md:flex-wrap">
  <div class="card mb-2 shadow-md p-4 bg-white rounded-md w-full md:w-1/2">
    <div class="flex flex-col md:flex-row md:gap-6">
      <div class="w-full">
        <label for="fecha_inicio" class="block text-sm font-medium text-gray-700">Fecha de inicio</label>
        <input type="date" name="fecha_inicio" id="fecha_inicio" class="mt-1 p-2 block w-full border border-gray-300 rounded-md" />
      </div>
      <div class="w-full">
        <label for="fecha_final" class="block text-sm font-medium text-gray-700">Fecha final</label>
        <input type="date" name="fecha_final" id="fecha_final" class="mt-1 p-2 block w-full border border-gray-300 rounded-md" />
      </div>
      <div class="w-full">
        <label for="arbolesid" class="block text-sm font-medium text-gray-700">Seleccionar opción</label>
        <select id="arbolesid" name="arbolesid" class="mt-1 block w-full p-2 border border-gray-300 rounded-md">
          <option value="">¿Es un Árbol?</option>
          <option value="1">Sí</option>
          <option value="0">No</option>
        </select>
      </div>
    </div>
    <div class="w-full mt-6 flex justify-center">
      <button type="submit"  class="py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-700 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        Consultar
      </button>
    </div>
  </div>
</form>
<div class="text-center mt-6">
  <div class="text-2xl font-bold">Resultados de la consulta</div>
</div>

---------------------------------------
reportes.component.scss
************

---------------------------------------
reportes.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-reportes',
  templateUrl: './reportes.component.html',
  styleUrls: ['./reportes.component.scss']
})
export class ReportesComponent {

  
}





---------------------------------------
reportes-routing.module.ts
************
import { ReportesComponent } from './pages/reportes/reportes.component';
import { MasReportesComponent } from './pages/masreportes/masreportes.component';
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthGuard } from 'src/app/core/guards/auth.guard';
const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ReportesComponent
  },
  {
  path: 'masreportes',
  canActivate: [ AuthGuard ],
  component: MasReportesComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class ReportesRoutingModule { }

---------------------------------------
reportes.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ReportesRoutingModule } from './reportes-routing.module';
import { ReportesComponent } from './pages/reportes/reportes.component';
import { MasReportesComponent } from './pages/masreportes/masreportes.component';
import { SharedModule } from 'src/app/shared/shared.module';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
//import { BrowserModule } from '@angular/platform-browser';

@NgModule({
  declarations: [
    ReportesComponent,
    MasReportesComponent
  ],
  imports: [
    CommonModule,
    ReportesRoutingModule,
    SharedModule,
    FontAwesomeModule,
   // BrowserModule,
    FormsModule
  ]
})
export class ReportesModule { }

---------------------------------------
formulario-roles.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Rol</h1>
</div>
<br>
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del rol
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="first_name" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nombre
              del rol:</label>
            <input type="text" formControlName="rolName" id="rolName"
              class="bg-gray-50 border  border-primary-300 text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="John" [ngClass]="{'required': !field('rolName').isValid()}">
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <app-btn *ngIf="!isNew && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
            (click)="mostrarConfirmacion()">Borrar</app-btn>

          <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
            (click)="Guardar()">Guardar</app-btn>

          <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
            (click)="Actualizar()">Actualizar</app-btn>
        </div>
      </div>
    </div>

  </div>
  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al realizar la operación en el rol.
  </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>

---------------------------------------
formulario-roles.component.scss
************

---------------------------------------
formulario-roles.component.ts
************
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { RolesDto } from 'src/app/core/models/roles-dto';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-formulario-roles',
  templateUrl: './formulario-roles.component.html',
  styleUrls: ['./formulario-roles.component.scss']
})
export class FormularioRolesComponent {
  statusDetail: RequestStatus = 'init';
  form:FormGroup;
  isNew:boolean = true;
  userNameRequired:boolean = false;
  passwordRequired:boolean = false;
  user:RolesDto;
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  @Input()
  set dataDto(data:RolesDto)
  {
    if(data)
    {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.user = data;
    }
  };
  @Input()
  set status(data:RequestStatus)
  {
    if(data)
    {
      this.statusDetail = data;
    }
  };


  @Output() create= new EventEmitter();
  @Output() update= new EventEmitter();
  @Output() delete= new EventEmitter();

  constructor( private formbuilder:FormBuilder,
    private sweetAlertService: SweetAlertService,
    private habilitaracciones: Habilitaracciones
  ){
      this.BuildForm();
  }

  ngOnInit(): void {
    const resultados = this.habilitaracciones.MostrarBotones('Roles');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostraDelete=resultado.eliminar;
             this.mostraUpdate=resultado.editar;
            
        });
    }
  }

  private BuildForm(){


    this.form = this.formbuilder.group({
      rolName:['', [Validators.required]]
    })
  }

  Guardar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }


    this.create.emit(this.form.value);
  }

  Actualizar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.update.emit(this.form.value);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del rol';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(TitleUp,TitleDonw, () => {
      //ejecuto el llamado a la funcion Borrar
      this.Borrar();
    }, () => {
         //en caso de usar cancelacion
    });
  }

  Borrar()
  {
    if(this.form.invalid)
    {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit()
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
      return {
          get: () => this.form.get(name),
          isValid: () => this.form.get(name).touched && this.form.get(name).valid
      };
  }
}

---------------------------------------
lista-roles.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Roles</h1>
  <app-btn *ngIf="mostrarCreate" typeBtn="submit" color="primary" [customIcon]="'faPlus'" routerLink="/app/roles/create">Agregar</app-btn>
</div>
<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter"
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50"
        type="text" />
    </div>
  </div>
</form>
<div *ngIf="algo">
  <p-table [value]="data" [paginator]="true" [rows]="this.pageSize" [showCurrentPageReport]="true"
    [tableStyle]="{ 'min-width': '50rem' }" [lazy]="true" [totalRecords]="collectionSize"
    (onLazyLoad)="refreshGrid($event)" [rowsPerPageOptions]="[5,10,15,20]">
    <ng-template pTemplate="header">
      <tr class="bg-gray-50">
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre rol</th>
        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
      </tr>
    </ng-template>
    <ng-template pTemplate="body" let-credencial let-rowIndex="rowIndex">
      <tr [class.bg-gray-200]="rowIndex % 2 === 0">
        <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.rolName}}</td>
        <td class="px-6 py-4 whitespace-nowrap w-64">
          <a [routerLink]="['./edit', credencial.id]"
            class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
        </td>
      </tr>
    </ng-template>
  </p-table>
</div>

---------------------------------------
lista-roles.component.scss
************

---------------------------------------
lista-roles.component.ts
************
import { Component } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { RolesDto } from 'src/app/core/models/roles-dto';
import { RolesService } from 'src/app/core/services/roles-service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';
@Component({
  selector: 'app-lista-roles',
  templateUrl: './lista-roles.component.html',
  styleUrls: ['./lista-roles.component.scss']
})
export class ListaRolesComponent {
  data: RolesDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  algo:boolean =false;  
  mostrarCreate: boolean = false;
  constructor(private formbuilder: FormBuilder,
    private roleService: RolesService,
    private habilitaracciones: Habilitaracciones) {

  }

  ngOnInit(): void {

    this.BuildForm();
    this.getCredentials();
    const resultados = this.habilitaracciones.MostrarBotones('Roles');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostrarCreate=resultado.editar;
            
        });
    }
  }

  private getCredentials() {
    this.roleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
        this.algo = true;
      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.roleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';

    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.roleService.get(this.filterField, this.page, this.pageSize).subscribe(
      response => {
        this.data = response.data
        this.collectionSize = response.meta.totalCount;
        this.pageSize = response.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }
}

---------------------------------------
roles.component.html
************
<app-formulario-roles
[dataDto]="data"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-roles>

---------------------------------------
roles.component.scss
************

---------------------------------------
roles.component.ts
************
import { Component } from '@angular/core';
import { ActivatedRoute, Router, Params } from '@angular/router';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { RolesDto } from 'src/app/core/models/roles-dto';
import { RolesService } from 'src/app/core/services/roles-service';

@Component({
  selector: 'app-roles',
  templateUrl: './roles.component.html',
  styleUrls: ['./roles.component.scss']
})
export class RolesComponent {
  id: string;
  statusDetail: RequestStatus;
  data:RolesDto

constructor(private activatedRoute: ActivatedRoute,
  private rolesService: RolesService,
  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.rolesService.getById(this.id)
        .subscribe(usuario => {
          this.data = usuario.data;
        });
      }
    });

  }

  Guardar(data)
  {
    this.rolesService.create(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/roles']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {
    
    this.rolesService.update(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/roles']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.rolesService.delete( this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/roles']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
roles-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AuthGuard } from 'src/app/core/guards/auth.guard';
import { ListaRolesComponent } from './pages/lista-roles/lista-roles.component';
import { RolesComponent } from './pages/roles/roles.component';

const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ListaRolesComponent
  },
  {
    path: 'create',
    canActivate: [ AuthGuard ],
    component: RolesComponent
  },
  {
    path: 'edit/:id',
    canActivate: [ AuthGuard ],
    component: RolesComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class RolesRoutingModule { }

---------------------------------------
roles.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { RolesRoutingModule } from './roles-routing.module';
import { FormularioRolesComponent } from './components/formulario-roles/formulario-roles.component';
import { ListaRolesComponent } from './pages/lista-roles/lista-roles.component';
import { RolesComponent } from './pages/roles/roles.component';
import { ReactiveFormsModule } from '@angular/forms';
import { SharedModule } from 'src/app/shared/shared.module';


@NgModule({
  declarations: [
    FormularioRolesComponent,
    ListaRolesComponent,
    RolesComponent
  ],
  imports: [
    CommonModule,
    RolesRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class RolesModule { }

---------------------------------------
sample-form-ui.component.html
************
<p>sample-form-ui works!</p>

---------------------------------------
sample-form-ui.component.scss
************

---------------------------------------
sample-form-ui.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-sample-form-ui',
  templateUrl: './sample-form-ui.component.html',
  styleUrls: ['./sample-form-ui.component.scss']
})
export class SampleFormUiComponent {

}

---------------------------------------
sample-list-ui.component.html
************
<p>sample-list-ui works!</p>

---------------------------------------
sample-list-ui.component.scss
************

---------------------------------------
sample-list-ui.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-sample-list-ui',
  templateUrl: './sample-list-ui.component.html',
  styleUrls: ['./sample-list-ui.component.scss']
})
export class SampleListUiComponent {

}

---------------------------------------
sample-form.component.html
************
<p>sample-form works!</p>

---------------------------------------
sample-form.component.scss
************

---------------------------------------
sample-form.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-sample-form',
  templateUrl: './sample-form.component.html',
  styleUrls: ['./sample-form.component.scss']
})
export class SampleFormComponent {

}

---------------------------------------
sample-list.component.html
************
<p>sample-list works!</p>

---------------------------------------
sample-list.component.scss
************

---------------------------------------
sample-list.component.ts
************
import { Component } from '@angular/core';

@Component({
  selector: 'app-sample-list',
  templateUrl: './sample-list.component.html',
  styleUrls: ['./sample-list.component.scss']
})
export class SampleListComponent {

}

---------------------------------------
sample-crud-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class SampleCrudRoutingModule { }

---------------------------------------
sample-crud.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { SampleCrudRoutingModule } from './sample-crud-routing.module';
import { SampleListComponent } from './pages/sample-list/sample-list.component';
import { SampleFormComponent } from './pages/sample-form/sample-form.component';
import { SampleFormUiComponent } from './components/sample-form-ui/sample-form-ui.component';
import { SampleListUiComponent } from './components/sample-list-ui/sample-list-ui.component';


@NgModule({
  declarations: [
    SampleListComponent,
    SampleFormComponent,
    SampleFormUiComponent,
    SampleListUiComponent
  ],
  imports: [
    CommonModule,
    SampleCrudRoutingModule
  ]
})
export class SampleCrudModule { }

---------------------------------------
coordenada.component.html
************
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">

      <div class="p-1">
        <div class="grid gap-2 mb-2 md:grid-cols-2">
          <div>
            <label for="latitud"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Latitud:</label>
            <input type="text" formControlName="latitud" id="latitud"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Latitud"
              [ngClass]="{'required': form.get('latitud').invalid && form.get('latitud').touched}">
          </div>
          <div>
            <label for="longitud"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Longitud:</label>
            <input type="text" formControlName="longitud" id="longitud"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Longitud"
              [ngClass]="{'required': form.get('longitud').invalid && form.get('longitud').touched}">
          </div>
          <div>
            <label for="altitud"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Altitud:</label>
            <input type="text" formControlName="altitud" id="altitud"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Altitud"
              [ngClass]="{'required': form.get('altitud').invalid && form.get('altitud').touched}">
          </div>
          <div>
            <label for="norte" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Norte:</label>
            <input type="text" formControlName="norte" id="norte"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Norte" [ngClass]="{'required': form.get('norte').invalid && form.get('norte').touched}">
          </div>
          <div>
            <label for="este" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Este:</label>
            <input type="text" formControlName="este" id="este"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Este" [ngClass]="{'required': form.get('este').invalid && form.get('este').touched}">
          </div>
        </div>
      </div>
      <div id="containerId2" class="border-gray-300">
        <app-esri-map-selector (locationSelected)="selected($event)"> </app-esri-map-selector>
      </div>
    </div>
  </div>

  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el coordenada.
  </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br>


</form>

---------------------------------------
coordenada.component.scss
************
.p-1 {
    float: left;
    width: 50%;
  }
  
  #containerId2 {
    float: right;
    width: 50%;
  }
  
---------------------------------------
coordenada.component.ts
************
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CoordenadaDto } from 'src/app/core/models/censoarboreo-dto.model';
import proj4 from 'proj4';

import { RequestStatus } from 'src/app/core/models/request-status.model';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';

@Component({
  selector: 'app-coordenada-xy',
  templateUrl: './coordenada.component.html',
  styleUrls: ['./coordenada.component.scss'],
})
export class CoordenadaComponent implements OnInit {
  statusDetail: RequestStatus = 'init';
  form: FormGroup;
  isNew: boolean = false;
  userNameRequired: boolean = false;
  passwordRequired: boolean = false;
  detalle: CoordenadaDto;
  @Input()
  set dataForm(data: CoordenadaDto) {
    if (data) {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.detalle = data;
    } else {
      this.isNew = true;
    }
  }
  @Input()
  set status(data: RequestStatus) {
    if (data) {
      this.statusDetail = data;
    }
  }

  constructor(
    private formbuilder: FormBuilder,
    private sweetAlertService: SweetAlertService
  ) {
    this.BuildForm();
  }

  ngOnInit(): void {}

  private BuildForm() {
    this.form = this.formbuilder.group({
      latitud: ['', [Validators.required]],
      longitud: ['', [Validators.required]],
      altitud: ['0', []],
      norte: ['', [Validators.required]],
      este: ['', [Validators.required]],
      oeste:['', [Validators.required]],
    });
  }

  public getFormValue() {

    let values = { ...this.form.value };
    values['id'] = this.detalle.id;
    return values;
  }

  selected(event)
  {
    const utmCoordinates = this.convertToUTM(event.lat, event.lng);

    this.form.patchValue({latitud: event.lat});
    this.form.patchValue({longitud: event.lng});
    this.form.patchValue({altitud: event.elevation});
    this.form.patchValue({norte: utmCoordinates.north.toFixed(2)});
    this.form.patchValue({este: utmCoordinates.east.toFixed(2)});
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
    return {
      get: () => this.form.get(name),
      isValid: () => this.form.get(name).touched && this.form.get(name).valid,
    };
  }

  // Función para convertir latitud y longitud a coordenadas UTM
 convertToUTM(lat, lon) {
  // Definir las proyecciones
  const WGS84 = "WGS84";
  const UTM = `+proj=utm +zone=${this.calculateUTMZone(lon)} +datum=WGS84`; // Calcula la zona UTM basada en la longitud

  // Convertir coordenadas
  const [east, north] = proj4(WGS84, UTM, [lon, lat]);

  return { east, north };
}

// Función para calcular la zona UTM basada en la longitud
 calculateUTMZone(longitude) {
  return Math.floor((longitude + 180) / 6) + 1;
}

}

---------------------------------------
registrofotografico.component.html
************
<form [formGroup]="form">
  <div class="p6">
    <div class="grid gap-6 mb-6 md:grid-cols-4">
      <div *ngFor="let img of fotos; let i = index" class="container-registro">
        <img [src]="imagesUrl+img.nombre" class="registro-foto rounded-md" >        
        <button (click)="removeImageSaved(i)" class="button-float">
          <fa-icon class="mr-2" [icon]="faXmarkSquare"></fa-icon>
        </button>
      </div>
    </div>
  </div>
  <div class="p6">
    <div class="onlyButtonUpload">
      <input type="file" (change)="onFilesSelected($event)" accept="image/*" multiple>
    </div>
    <div class="grid gap-6 mb-6 md:grid-cols-4">
      <div *ngFor="let img of images; let i = index" class="container-registro">
        <img [src]="img.src" class="registro-foto rounded-md" [style.transform]="'rotate(' + img.rotation + 'deg)'">
        <button (click)="rotateImage(i, -90)" class="button-float"><fa-icon class="mr-2" [icon]="faArrowLeftRotate"></fa-icon></button>
        <button (click)="rotateImage(i, 90)" class="button-float"><fa-icon class="mr-2" [icon]="faArrowRightRotate"></fa-icon></button>
        
        <button (click)="removeImage(i)" class="button-float">
          <fa-icon class="mr-2" [icon]="faXmarkSquare"></fa-icon>
        </button>
      </div>
    </div>
  </div>
</form>
---------------------------------------
registrofotografico.component.scss
************
.container-registro{
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
}

.registro-foto {
    
    max-height: 200px;
} 

.button-float{
    float: left;
    position: relative;
    top: -50%;
    color: red;
    right: 10px;
    background: white;
    border-radius: 50%;
    font-size: 24px;
}

.onlyButtonUpload{
    
    width: 135px;
    overflow: hidden;
}
---------------------------------------
registrofotografico.component.ts
************
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { faXmarkSquare,faArrowLeftRotate,faArrowRightRotate } from '@fortawesome/free-solid-svg-icons';
import { RegistroFotograficoBaseDto } from 'src/app/core/models/censoarboreo-dto.model';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import { environment } from 'src/environments/environment';

@Component({
  selector: 'app-registrofotografico',
  templateUrl: './registrofotografico.component.html',
  styleUrls: ['./registrofotografico.component.scss']
})
export class RegistroFotograficoComponent implements OnInit {

  imagesUrl = environment.API_URL+"/api/images/";
  multipleMode  :boolean = true;
  images: { src: string | ArrayBuffer | null, file: File, rotation: number }[] = [];
  statusDetail: RequestStatus = 'init';
  form:FormGroup;
  cantidadFotos : number = 99999;
  isNew:boolean = false;
  userNameRequired:boolean = false;
  passwordRequired:boolean = false;
  fotos : RegistroFotograficoBaseDto[];
  faXmarkSquare = faXmarkSquare;
  faArrowLeftRotate=faArrowLeftRotate;
  faArrowRightRotate=faArrowRightRotate;

  @Input()
  set multiple (mul : boolean) {
    
    this.multipleMode = mul;      
  };

  @Input()
  set maxFotos (cant : number) {    
    ;
    if(cant==0){
      cant = 9999;
    }
    this.cantidadFotos = cant;      
  };

  @Input()
  set dataForm(data : RegistroFotograficoBaseDto[])
  {
    
    console.log(data)
    if(data)
    {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.fotos = data;
    } else {
      this.isNew = true;
    }
  };
  @Input()
  set status(data:RequestStatus)
  {
    if(data)
    {
      this.statusDetail = data;
    }
  };



  constructor( private formbuilder:FormBuilder,
    private sweetAlertService: SweetAlertService

  ){
      this.BuildForm();
  }

  ngOnInit(): void {

  }

  

  onFilesSelected(event: any): void {
    const selectedFiles = event.target.files;
    for (let i = 0; i < selectedFiles.length; i++) {
      const file = selectedFiles[i];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          
          this.images.push({ src: e.target.result, file, rotation: 0 });
          if(this.images.length > (this.cantidadFotos) ) {
            this.images.splice(0,1);
          }
        };
        reader.readAsDataURL(file);
      }
      
      if(!this.multipleMode) {
        this.fotos.splice(0,1);

        if(this.images.length >= 1 ) {
          this.images.splice(0,1);
        }
        break;

      } else {

        this.fotos.splice(0,1);

        if(this.images.length >= (this.cantidadFotos) ) {
          this.images.splice(0,1);
        }

        /*if(this.cantidadFotos <= (i+1 ) ){
          return;
        }*/
      }
    }
  }
  rotateImage(index: number, angle: number): void {
    const image = this.images[index];
    if (image.file) {
      if (!image.hasOwnProperty('rotation')) {
        image['rotation'] = 0;
      }
      image['rotation'] += angle;
    }
  }
  removeImage(index: number): void {
    
    this.images.splice(index, 1);
    
  }

  public removeImageSaved(index: number): void {
    this.fotos.splice(index, 1);
  }

  getCurrentFotos() {
    return this.fotos;
  }
  getFilesLoaded  (): File[] {

    
    const files: File[] = this.images.map(image => image.file)
    return files;
  }

  getRotationLoaded  (): any  { 
    const rotation: number[] = this.images.map(image => image.rotation);
    return { 'rotation' : rotation};    
  }
  


  private BuildForm() {

    this.form = this.formbuilder.group({
      x:['', [Validators.required]],
      y:['', [Validators.required]]
    })
  }


  public getFormValue(){
    return this.form.value;
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
      return {
          get: () => this.form.get(name),
          isValid: () => this.form.get(name).touched && this.form.get(name).valid
      };
  }

}

---------------------------------------
cambiar-contrasena.component.html
************
<app-btn  typeBtn="submit"
color="green"
(click)="toggleModal()"> Cambiar Contraseña </app-btn>

<app-modal [titulo]="'Cambiar contraseña'" [botonModal]="'Cambiar'" [ShowModal]="showModal" (cerrarModalEvent)="cerrarModal($event)">

  <section class="my-4 text-slate-500 text-lg leading-relaxed">
    <form [formGroup]="form">
      <div class="card mb-2">
        <div class="bg-white rounded-lg shadow-md overflow-hidden">
          <div class="bg-gray-500 text-white px-4 py-2">Información de Acceso
          </div>
          <div class="p-6">
            <div class="grid gap-6 mb-6 md:grid-cols-4">
                   <div>
                <label for="phone"
                  class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Usuario:</label>
                <input type="tel" formControlName="userName" id="userName"
                  class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  placeholder="">
              </div>
              <div>
                <label for="phone"
                  class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Contraseña:</label>
                <input type="tel" formControlName="password" id="phone"
                  class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
                  placeholder="">
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="">
        <br>
        <section>
          <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
            Ha ocurrido un error al actualizar los datos.
          </div>
          <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
            La operacion se ha realizado con exito.
          </div>
          <div *ngIf="isFormInValid" class="alert alert-danger" role="alert">
            <ul>
              <li *ngIf="!isPasswordFieldValid">El campo <strong>Contrasena</strong> es obligatorio</li>
              <li *ngIf="!isUserNameFieldValid">El campo <strong>Usuario</strong> es obligatorio</li>
            </ul>
          </div>
        </section>
        <br>
        <div class="flex justify-end space-x-4">
          <app-btn  typeBtn="submit"
          color="primary"
          (click)="CambiarContrasena()">Cambiar Contraseña</app-btn>
        </div>
      </div>
    </form>
  </section>
</app-modal>

---------------------------------------
cambiar-contrasena.component.scss
************

---------------------------------------
cambiar-contrasena.component.ts
************
import { FormGroup, FormBuilder, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { Component, Input } from '@angular/core';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { SecurityService } from 'src/app/core/services/security.service';

@Component({
  selector: 'app-cambiar-contrasena',
  templateUrl: './cambiar-contrasena.component.html',
  styleUrls: ['./cambiar-contrasena.component.scss']
})

export class CambiarContrasenaComponent {

  form: FormGroup;
  statusDetail: RequestStatus = 'init';


  @Input()
  set usuario(data: UserDto) {
    if (data) {

      this.form.patchValue({ userId: data.id });
      this.form.patchValue({ userName: data.userName });
      this.form.markAllAsTouched();//must
    }
  };

  /*Codigo para Modal*/
  @Input() showModal: boolean = false;

  toggleModal() {
    this.showModal = !this.showModal;
  }

  cerrarModal(data) {
    this.showModal = data;
  }
  /* Fin Codigo para Modal*/

  constructor(private formbuilder: FormBuilder,
    private securityService: SecurityService,
    private router: Router) {
    this.BuildForm();
  }

  CambiarContrasena() {
    this.securityService.update(this.userIdField, this.form.value).subscribe(
      (data) => {
        this.statusDetail = 'success';
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      userId: ['', [Validators.required]],
      userName: ['', [Validators.required]],
      password: ['', [Validators.required]]
    })
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  get userIdField(): string {
    return this.form.get('userId').value;
  }

  get passwordField() {
    return this.form.get('password');
  }

  get isPasswordFieldValid() {
    return this.passwordField.touched && this.passwordField.valid;
  }

  get userNameField() {
    return this.form.get('userName');
  }

  get isUserNameFieldValid() {
    return this.userNameField.touched && this.userNameField.valid;
  }

}

---------------------------------------
formulario-usuarios.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Usuarios</h1>
</div>
<br>
<form [formGroup]="form">
  <div class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información del usuario
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="first_name" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Nombre
              completo:</label>
            <input type="text" formControlName="fullName" id="fullName"
              class="bg-gray-50 border  border-primary-300 text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="John" [ngClass]="{'required': form.get('fullName').invalid && form.get('fullName').touched}">
          </div>
          <div>
            <label for="email" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Correo:</label>
            <input type="email" formControlName="email" id="email"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Usuario89" [ngClass]="{'required': form.get('email').invalid && form.get('email').touched}">
          </div>
          <div>
            <label for="dni" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Cedula:</label>
            <input type="text" formControlName="dni" id="dni"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="" [ngClass]="{'required': form.get('dni').invalid && form.get('dni').touched}">
          </div>
          <div>
            <label for="phone" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Telefono:</label>
            <input type="tel" formControlName="phone" id="phone"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="123-45-678" [ngClass]="{'required': form.get('phone').invalid && form.get('phone').touched}">
          </div>
          <div>
            <label for="isActive" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Usuario Activo:</label>
            <input type="checkbox" formControlName="isActive" id="isActive"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Usuario Activo" [ngClass]="{
                required:
                  form.get('isActive').invalid &&
                  form.get('isActive').touched
              }" />
          </div>
        </div>
      </div>
    </div>
  </div>
  <div *ngIf="this.isNew" class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Información de Acceso
      </div>
      <div class="p-6">
        <div class="grid gap-6 mb-6 md:grid-cols-4">
          <div>
            <label for="phone" class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Usuario:</label>
            <input type="tel" formControlName="userName" id="userName"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="">
          </div>
          <div>
            <label for="phone"
              class="block mb-2 text-xs font-medium text-gray-900 dark:text-gray-900">Contraseña:</label>
            <input type="tel" formControlName="password" id="phone"
              class="text-gray-900 text-xs rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  dark:placeholder-gray-400 dark:text-gray-900 dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="">
          </div>
        </div>
      </div>
    </div>
  </div>
  <br>
  <div *ngIf="!this.isNew" class="card mb-2">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="bg-gray-500 text-white px-4 py-2">Roles
      </div>
      <div class="p-6">
        <form [formGroup]="formRoles">
          <div class="p-6">
            <div class="grid gap-6 mb-6 md:grid-cols-4">
              <div class="mb-4 flex flex-col ">
                <label class="block text-gray-700 font-bold mb-1 text-xs" for="claseId"> Rol </label>
                <select formControlName="rolId" id="claseId"
                  class="shadow  text-xs appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                  <option value="" selected>Seleccione</option>
                  <option *ngFor="let rol of roles" [value]="rol.id">{{rol.rolName}}</option>
                </select>
              </div>
              <div class="mb-4 flex items-end">
                  <app-btn  typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
                    (click)="AgregarRol()">Agregar Rol</app-btn>
              </div>
            </div>
          </div>
        </form>
        <div>
          <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                  <tr>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rol</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acción</th>
                  </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                  <ng-container *ngFor="let userInRole of userInRoles">
                      <tr>
                          <td class="px-6 py-4 whitespace-nowrap">
                              <div class="text-sm font-bold text-blue-400">{{ userInRole.rol?.rolName }}</div>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap">
                              <button (click)="deleteRole(userInRole.id,userInRole)" class="px-4 py-2 bg-red-500 text-white rounded-md">Eliminar</button>
                          </td>
                      </tr>
                  </ng-container>
              </tbody>
          </table>
      </div>


      </div>
    </div>
  </div>
  <br>
  <div *ngIf="statusDetail==='error'" class="alert alert-danger" role="alert">
    Ha ocurrido un error al crear el usuario.
  </div>
  <div *ngIf="statusDetail==='success'" class="alert alert-success" role="alert">
    La operacion se ha realizado con exito.
  </div>
  <br>
  <div class="flex justify-end space-x-4">
    <app-cambiar-contrasena [usuario]="this.user"></app-cambiar-contrasena>
    <app-btn *ngIf="!isNew && mostraDelete" typeBtn="submit" color="yellow" [loading]="statusDetail === 'loading'"
      (click)="mostrarConfirmacion()">Borrar</app-btn>

    <app-btn *ngIf="isNew" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Guardar()">Guardar</app-btn>

    <app-btn *ngIf="!isNew && mostraUpdate" typeBtn="submit" color="primary" [loading]="statusDetail === 'loading'"
      (click)="Actualizar()">Actualizar</app-btn>
  </div>

</form>
<ng-template #content let-c="close" let-d="dismiss">
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title">Eliminar</h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="c('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>¿Estas seguro que deseas eliminar?</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="c('Save click')">No</button>
    <button type="button" class="btn btn-outline-dark" (click)="c(Borrar())">Si</button>
  </div>
</ng-template>

---------------------------------------
formulario-usuarios.component.scss
************

---------------------------------------
formulario-usuarios.component.ts
************
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { RolesDto } from 'src/app/core/models/roles-dto';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { UserInRolesDto } from 'src/app/core/models/user-in-roles-dto';
import { RolesService } from 'src/app/core/services/roles-service';
import { SweetAlertService } from 'src/app/core/services/sweet-alert.service';
import { UserInRolesService } from 'src/app/core/services/user-in-roles-service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';

@Component({
  selector: 'app-formulario-usuarios',
  templateUrl: './formulario-usuarios.component.html',
  styleUrls: ['./formulario-usuarios.component.scss']
})
export class FormularioUsuariosComponent implements OnInit {

  statusDetail: RequestStatus = 'init';
  form: FormGroup;
  formRoles: FormGroup;
  isNew: boolean = false;
  userNameRequired: boolean = false;
  passwordRequired: boolean = false;
  user: UserDto;
  roles: RolesDto[];
  userInRoles: UserInRolesDto[];
  mostraUpdate: boolean = false;
  mostraDelete: boolean = false;
  @Input()
  set userDto(data: UserDto) {
    if (data) {
      this.isNew = false;
      this.form.patchValue(data);
      this.form.markAllAsTouched();
      this.formRoles.patchValue({ userId: data.id });
      this.user = data;
      this.getUserInRoles();
    } else {
      this.isNew = true;
    }
  };
  @Input()
  set status(data: RequestStatus) {
    if (data) {
      this.statusDetail = data;
    }
  };


  @Output() create = new EventEmitter();
  @Output() update = new EventEmitter();
  @Output() delete = new EventEmitter();
  @Output() addRol = new EventEmitter();

  constructor(private formbuilder: FormBuilder,
    private sweetAlertService: SweetAlertService,
    private rolService: RolesService,
    private usuarioInRolService: UserInRolesService,
    private habilitaracciones: Habilitaracciones

  ) {
    this.BuildForm();
    this.BuildRolForm();
    this.getRoles();

  }

  ngOnInit(): void {
    this.ValidarBotones();

  }
  private ValidarBotones() {

    const resultados = this.habilitaracciones.MostrarBotones('Usuarios');

        if (resultados.length > 0) {
            resultados.forEach(resultado => {
                 this.mostraDelete=resultado.eliminar;
                 this.mostraUpdate=resultado.editar;

            });
        }
     }
  private BuildForm() {
    this.form = this.formbuilder.group({
      fullName: ['', [Validators.required]],
      email: ['', [Validators.required, Validators.email]],
      dni: ['', []],
      phone: ['', []],
      userName: ['', []],
      isActive: ['true', []],
      password: ['Password!01', []]
    })
  }

  private BuildRolForm() {
    this.formRoles = this.formbuilder.group({
      rolId: ['', [Validators.required]],
      userId: ['', [Validators.required]]
    })
  }

  getRoles() {
    this.statusDetail = 'loading';
    this.rolService.getAll().subscribe(
      response => {
        this.roles = response.data
        this.statusDetail = 'init';
      }
    );
  }

  getUserInRoles() {
    this.statusDetail = 'loading';

    this.usuarioInRolService.getAllById(this.user.id).subscribe(
      response => {
        this.userInRoles = response.data
        this.statusDetail = 'init';
      }
    );
  }

  Guardar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.create.emit(this.form.value);
  }

  AgregarRol() {

    if (this.formRoles.invalid) {
      this.formRoles.markAllAsTouched();
      return;
    }

    this.usuarioInRolService.create(this.formRoles.value).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.getUserInRoles();
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  deleteRole(id: string, data: UserInRolesDto) {
    this.usuarioInRolService.delete(id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.getUserInRoles();
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.update.emit(this.form.value);
  }

  async mostrarConfirmacion() {
    const TitleUp = 'Cambiara el estado del usuario';
    const TitleDonw = '¿Esta seguro de cambiar el estado?';
    this.sweetAlertService.showConfirmationCallback(TitleUp, TitleDonw, () => {
      //ejecuto el llamado a la funcion Borrar
      this.Borrar();
    }, () => {
      //en caso de usar cancelacion
    });
  }

  Borrar() {
    if (this.form.invalid) {
      this.form.markAllAsTouched();
      return;
    }
    this.delete.emit()
  }

  get isFormInValid() {
    return this.form.invalid && this.form.touched;
  }

  field(name: string) {
    return {
      get: () => this.form.get(name),
      isValid: () => this.form.get(name).touched && this.form.get(name).valid
    };
  }

}

---------------------------------------
lista-usuarios.component.html
************
<div class="flex justify-between mb-4">
  <h1 class="text-lg font-semibold">Credenciales</h1>
  <app-btn *ngIf="mostrarCreate"  typeBtn="submit" color="primary"  [customIcon]="'faPlus'" routerLink="/app/usuarios/create">Agregar</app-btn>
</div>
<form [formGroup]="form" class="mb-8">
  <div class="grid grid-cols-1 sm:grid-cols-4 gap-2">
    <div>
      <label for="table-filtering-search" class="block text-xs font-medium text-gray-700">Filtrar:</label>
      <input (keyup)="Buscar()" id="table-filtering-search" formControlName="filter" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50" type="text" />
    </div>
  </div>
</form>
<div *ngIf="algo">
  <p-table   [value]="credenciales"
  [paginator]="true"
  [rows]="this.pageSize"
  [showCurrentPageReport]="true"
  [tableStyle]="{ 'min-width': '50rem' }"
  [lazy]="true"
  [totalRecords]="collectionSize" (onLazyLoad)="refreshGrid($event)"
  [rowsPerPageOptions]="[5,10,15,20]">
    <ng-template pTemplate="header">
        <tr class="bg-gray-50">
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nombre usuario</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Telefono</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
        </tr>
    </ng-template>
    <ng-template pTemplate="body" let-credencial let-rowIndex="rowIndex">
        <tr [class.bg-gray-200]="rowIndex % 2 === 0">
            <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.fullName}}</td>
            <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.email}}</td>
            <td class="px-6 py-4 whitespace-nowrap w-64">{{credencial.phone}}</td>
            <td class="px-6 py-4 whitespace-nowrap w-64">
                <a [routerLink]="['./edit', credencial.id]" class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">Editar</a>
            </td>
        </tr>
    </ng-template>
  </p-table>
</div>

---------------------------------------
lista-usuarios.component.scss
************

---------------------------------------
lista-usuarios.component.ts
************
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { UsuarioService } from 'src/app/core/services/usuario.service';
import {Habilitaracciones } from 'src/app/core/services/habilitaracciones.service';

@Component({
  selector: 'app-lista-usuarios',
  templateUrl: './lista-usuarios.component.html',
  styleUrls: ['./lista-usuarios.component.scss']
})
export class ListaUsuariosComponent implements OnInit {

  credenciales: UserDto[] = [];
  form: FormGroup;
  pageSize: number = 5;
  page: number = 1;
  collectionSize: number = 1
  statusDetail: RequestStatus = 'init';
  algo:boolean =false;
  mostrarCreate: boolean = false;

  constructor(private formbuilder: FormBuilder,
    private usuarioService: UsuarioService,
    private habilitaracciones: Habilitaracciones
   ) {

  }

  ngOnInit(): void {

    this.BuildForm();
    this.getCredentials();
    const resultados = this.habilitaracciones.MostrarBotones('Censo');

    if (resultados.length > 0) {
        resultados.forEach(resultado => {
             this.mostrarCreate=resultado.editar;
            
        });
    }
    

  }

  private getCredentials() {

    this.usuarioService.get(this.filterField, this.page, this.pageSize).subscribe(
      barrios => {
        this.credenciales = barrios.data
        this.collectionSize = barrios.meta.totalCount;
        this.pageSize = barrios.meta.pageSize;
        this.statusDetail = 'init';
        this.algo = true;
      }
    );
  }

  private BuildForm() {
    this.form = this.formbuilder.group({
      filter: ['', []]
    })
  }

  Buscar() {
    if (this.filterField == "")
      this.getCredentials();

    this.usuarioService.get(this.filterField, this.page, this.pageSize).subscribe(
      barrios => {
        this.credenciales = barrios.data
        this.collectionSize = barrios.meta.totalCount;
        this.pageSize = barrios.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  refreshGrid(event) {
    this.statusDetail = 'loading';

    this.page = event.first / event.rows + 1
    this.pageSize = event.rows;
    this.usuarioService.get(this.filterField, this.page, this.pageSize).subscribe(
      barrios => {
        this.credenciales = barrios.data
        this.collectionSize = barrios.meta.totalCount;
        this.pageSize = barrios.meta.pageSize;
        this.statusDetail = 'init';
      }
    );
  }

  get filterField(): string {
    return this.form.get('filter').value;
  }

}

---------------------------------------
usuarios.component.html
************
<app-formulario-usuarios
[userDto]="usuario"
[status]="statusDetail"
(create)="Guardar($event)"
(update)="Actualizar($event)"
(delete)="Borrar($event)">
</app-formulario-usuarios>

---------------------------------------
usuarios.component.scss
************

---------------------------------------
usuarios.component.ts
************
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import { UserDto } from 'src/app/core/models/user-dto.model';
import { UserInRolesDto } from 'src/app/core/models/user-in-roles-dto';
import { UserInRolesService } from 'src/app/core/services/user-in-roles-service';
import { UsuarioService } from 'src/app/core/services/usuario.service';

@Component({
  selector: 'app-usuarios',
  templateUrl: './usuarios.component.html',
  styleUrls: ['./usuarios.component.scss']
})
export class UsuariosComponent implements OnInit {

  id: string;
  statusDetail: RequestStatus;
  usuario:UserDto

constructor(private activatedRoute: ActivatedRoute,
  private usuarioService: UsuarioService,

  private router: Router){

}

  ngOnInit(): void {
    this.activatedRoute.params.subscribe((params: Params) => {
      this.id = params['id'];
      if(this.id)
      {
        this.usuarioService.getById(this.id)
        .subscribe(usuario => {
          this.usuario = usuario.data;
        });
      }
    });

  }



  Guardar(data)
  {
    this.usuarioService.create(data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/usuarios']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Actualizar(data)
  {

    this.usuarioService.update(this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/usuarios']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

  Borrar(data)
  {
    console.log("borrar")
    this.usuarioService.delete( this.id, data).subscribe(
      (data) => {
        this.statusDetail = 'success';
        this.router.navigate(['/app/usuarios']);
      },
      (errorMsg) => {
        this.statusDetail = 'error';
      }
    );
  }

}

---------------------------------------
usuarios-routing.module.ts
************
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ListaUsuariosComponent } from './components/lista-usuarios/lista-usuarios.component';
import { UsuariosComponent } from './containers/usuarios/usuarios.component';
import { AuthGuard } from 'src/app/core/guards/auth.guard';

const routes: Routes = [
  {
    path: '',
    canActivate: [ AuthGuard ],
    component: ListaUsuariosComponent
  },
  {
    path: 'create',
    canActivate: [ AuthGuard ],
    component: UsuariosComponent
  },
  {
    path: 'edit/:id',
    canActivate: [ AuthGuard ],
    component: UsuariosComponent
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule,
  ]
})
export class UsuariosRoutingModule { }

---------------------------------------
usuarios.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { UsuariosRoutingModule } from './usuarios-routing.module';
import { ReactiveFormsModule } from '@angular/forms';

import { SharedModule } from 'src/app/shared/shared.module';
import { CambiarContrasenaComponent } from './components/cambiar-contrasena/cambiar-contrasena.component';
import { FormularioUsuariosComponent } from './components/formulario-usuarios/formulario-usuarios.component';
import { ListaUsuariosComponent } from './components/lista-usuarios/lista-usuarios.component';
import { UsuariosComponent } from './containers/usuarios/usuarios.component';


@NgModule({
  declarations: [
    ListaUsuariosComponent,
    FormularioUsuariosComponent,
    UsuariosComponent,
    CambiarContrasenaComponent
  ],
  imports: [
    CommonModule,
    UsuariosRoutingModule,
    ReactiveFormsModule,
    SharedModule
  ]
})
export class UsuariosModule { }

---------------------------------------
not-found.component.html
************

<div class="w-full flex items-center justify-center h-screen">
  <div class="w-full  max-w-sm p-4 bg-white border border-gray-200 rounded-lg shadow sm:p-6 md:p-8">
    <h2 class="text-2xl font-bold text-gray-900 mb-4">Page Not Found</h2>
    <p class="text-gray-600 mb-8">We're sorry, but the page you're looking for cannot be found.</p>
    <button (click)="GoBack()" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50" onclick="window.history.back();">Go Back</button>
  </div>
</div>

---------------------------------------
not-found.component.scss
************

---------------------------------------
not-found.component.ts
************
import { Component } from '@angular/core';
import { Location } from '@angular/common';

@Component({
  selector: 'app-error',
  templateUrl: './not-found.component.html',
  styleUrls: ['./not-found.component.scss']
})
export class NotFoundComponent {
  constructor(private location: Location){

  }

  GoBack(){
    this.location.back();
  }
}

---------------------------------------
button.component.html
************
<button
  [type]="typeBtn"
  [disabled]="disabled || loading"
  [ngClass]="colors"
  class="inline-flex items-center font-medium rounded text-sm px-5 py-2 space-x-4 bg-blue-700"
>
  <fa-icon
    *ngIf="loading"
    class="mr-2"
    [icon]="faSpinner"
    [pulse]="true"
  ></fa-icon>
  <fw-custom-icons
  [iconName]="customIcon">
  </fw-custom-icons>
  <ng-content></ng-content>
</button>

---------------------------------------
button.component.ts
************
import { Component, Input, OnInit } from '@angular/core';
import { faSpinner } from '@fortawesome/free-solid-svg-icons';
import { COLORS, Colors } from 'src/app/core/models/colors.model';


@Component({
  selector: 'app-btn',
  templateUrl: './button.component.html',
})
export class ButtonComponent {
  @Input() disabled = false;
  @Input() loading = false;
  @Input() customIcon:string;
  @Input() typeBtn: 'reset' | 'submit' | 'button' = 'button';
  @Input() color: Colors = 'primary';
  faSpinner = faSpinner;

  mapColors = COLORS;

  constructor() {}

  get colors() {
    const colors = this.mapColors[this.color];
    if (colors) {
      
      return colors;
    }
    return {};
  }
}

---------------------------------------
custom-icons.component.html
************

<fa-icon *ngIf="iconName" [icon]="iconValue" class="mr-2"></fa-icon>

---------------------------------------
custom-icons.component.scss
************

---------------------------------------
custom-icons.component.ts
************
import { Component, Input } from '@angular/core';
import {  IconDefinition } from '@fortawesome/fontawesome-svg-core';
import * as fasolid from '@fortawesome/free-solid-svg-icons';

@Component({
  selector: 'fw-custom-icons',
  templateUrl: './custom-icons.component.html',
  styleUrls: ['./custom-icons.component.scss']
})


export class CustomIconsComponent {
@Input() iconName: string = ""
public iconValue:IconDefinition = fasolid.fa0;

ngOnInit(): void {

    switch (this.iconName) {
      case "faGauge":
          this.iconValue = fasolid.faGauge;
          break;
      case "faBars":
          this.iconValue = fasolid.faBars;
          break;
      case "faEllipsisVertical":
            this.iconValue = fasolid.faEllipsisVertical;
            break;
      case "faGear":
            this.iconValue = fasolid.faGear;
            break;
      case "faAngleLeft":
              this.iconValue = fasolid.faAngleLeft;
              break;
      case "faAngleUp":
              this.iconValue = fasolid.faAngleUp;
              break;
      case "faCaretDown":
                this.iconValue = fasolid.faCaretDown;
                break;
      case "faFlag":
                  this.iconValue = fasolid.faFlag;
                  break;
      case "faMagnifyingGlass":
                  this.iconValue = fasolid.faMagnifyingGlass;
                  break;
      case "faPlus":
                  this.iconValue = fasolid.faPlus;
                  break;
      case "faUser":
                    this.iconValue = fasolid.faUser;
                    break;
      case "faShareFromSquare":
          this.iconValue = fasolid.faShareFromSquare;
          break;
      case "faSpinner":
                    this.iconValue = fasolid.faSpinner;
                    break;
      default:
        this.iconValue = fasolid.fa0;
          break;
      }

  }
}

---------------------------------------
esri-map.component.html
************
<p>esri-map works!</p>

---------------------------------------
esri-map.component.scss
************

---------------------------------------
esri-map.component.ts
************
import { Component, OnInit, OnDestroy, ElementRef, Input, SimpleChanges, OnChanges } from '@angular/core';
import { EsriMapService } from 'src/app/core/services/EsriMap.service';

@Component({
  selector: 'app-esri-map',
  template: '',
  styles: [`
    :host {
      display: block;
      height: 100%;
    }
  `],
  host: { id: 'mapViewNode' }
})
export class EsriMapComponent implements OnInit, OnDestroy {

  constructor(private esriMapService: EsriMapService, private elRef: ElementRef) {}

  async ngOnInit() {
    await this.esriMapService.initializeMap(this.elRef.nativeElement.id);
  }

  ngOnDestroy() {
    if (this.esriMapService.view) {
      this.esriMapService.view.container = null;
    }
  }
}

---------------------------------------
esri-map-selector.component.html
************
<p>esri-map-selector works!</p>

---------------------------------------
esri-map-selector.component.scss
************

---------------------------------------
esri-map-selector.component.ts
************
import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';
import Map from '@arcgis/core/Map';
import MapView from '@arcgis/core/views/MapView';
import Graphic from '@arcgis/core/Graphic';
import Point from '@arcgis/core/geometry/Point';
import SimpleMarkerSymbol from '@arcgis/core/symbols/SimpleMarkerSymbol';
import Basemap from '@arcgis/core/Basemap';
import ElevationLayer from '@arcgis/core/layers/ElevationLayer';
import * as webMercatorUtils from '@arcgis/core/geometry/support/webMercatorUtils';
import { RequestStatus } from 'src/app/core/models/request-status.model';
import GraphicsLayer from '@arcgis/core/layers/GraphicsLayer';
import PictureMarkerSymbol from "@arcgis/core/symbols/PictureMarkerSymbol.js";
import { CensoArboreoService } from 'src/app/core/services/censoarboreo.service';
import { CoordenadaDto } from 'src/app/core/models/censoarboreo-dto.model';


@Component({
  selector: 'app-esri-map-selector',
  template: `
    <div style="height: 300px; width: 300px; position: relative;">
      <div id="viewDiv" style="height: 100%; width: 100%;"></div>
      <select (change)="changeBasemap($event)" style="position: absolute; top: 10px; left: 10px; z-index: 10;">
        <option value="streets">Streets</option>
        <option value="satellite">Satellite</option>
        <option value="hybrid">Hybrid</option>
        <option value="topo">Topographic</option>
        <option value="gray">Gray</option>
      </select>
    </div>
  `,
  styleUrls: []
})
export class EsriMapSelectorComponent implements OnInit, OnDestroy {

  @Output() locationSelected = new EventEmitter<{ lat: number; lng: number, elevation:number }>();
  view: MapView;
  map: Map;
  statusDetail: RequestStatus = 'init';
  listaCoordenadas:CoordenadaDto[]=[];

  private pendingPoints: Array<{ longitude: number, latitude: number }> = [];
  private graphicsLayer: GraphicsLayer;

  constructor(private censoService: CensoArboreoService) {
    this.graphicsLayer = new GraphicsLayer();
  }

  ngOnInit() {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        this.initializeMap(position.coords);
      },
      (error) => {
        console.error('Error al obtener la geolocalización:', error);
        // Inicializar el mapa con una ubicación por defecto
        this.initializeMap({ latitude: 7.1139, longitude: -73.1198 });
      }
    );
  }

  async getElevation(lat: number, lng: number): Promise<number> {
    const elevationLayer = new ElevationLayer({
      url: "https://elevation.arcgis.com/arcgis/rest/services/WorldElevation/Terrain3D/ImageServer"
    });

    const point = new Point({
      latitude: lat,
      longitude: lng
    });

    // Convertir a Web Mercator para el servicio de elevación
    const webMercatorPoint = webMercatorUtils.geographicToWebMercator(point);

    try {

      const result = await elevationLayer.queryElevation(webMercatorPoint as __esri.Point);
      const pointGeometry = result.geometry as __esri.Point; // Hacer un casting a Point
      const elevation = pointGeometry.z; // Ahora puedes acceder a la propiedad z
      return elevation;
    } catch (error) {
      console.error('Error al obtener la elevación:', error);
      return null;
    }
  }

  async ngAfterViewInit() {
    this.getArbolesCiudad();
  }


  initializeMap(coords: { latitude: number; longitude: number }) {
    this.map = new Map({
      basemap: 'hybrid'
    });

    this.view = new MapView({
      container: 'viewDiv',
      map: this.map,
      center: [coords.longitude, coords.latitude], // Usa la geolocalización para centrar el mapa
      zoom: 17
    });

    this.view.when(() => {

      this.addMarker(coords.latitude, coords.longitude);

      this.view.on('click', async (event) => {
        const lat = event.mapPoint.latitude;
        const lng = event.mapPoint.longitude;
        this.addMarker(lat, lng);
        const elevation = await this.getElevation(lat, lng);

        console.log(`Elevación en el punto seleccionado: ${elevation} metros`);

        this.locationSelected.emit({
          lat: lat,
          lng: lng,
          elevation: elevation
        });
      });
    });

    this.view.map.add(this.graphicsLayer);

    this.view.watch('extent', () => {
      this.loadPendingPoints();
    });

  }

  getArbolesCiudad() {
    this.statusDetail = 'loading';
    this.censoService.getAllCoordenadas().subscribe(
      result => {
        this.listaCoordenadas = result.data
        this.listaCoordenadas.forEach(coord => {
          this.addPoint(coord.longitud, coord.latitud);
        });
        this.statusDetail = 'init';
      }
    );
  }

  public addPoint(longitude: number, latitude: number): void {
    if (!this.view || longitude == undefined || latitude == undefined) {
      console.error('La vista del mapa no está inicializada o las coordenadas no están definidas.');
      return;
    }

    // Create a point
    const point = new Point({
      longitude: longitude,
      latitude: latitude
    });

    if (this.isPointInView(point)) {
      this.createAndAddGraphic(point);
    } else {
      this.pendingPoints.push({ longitude, latitude });
    }
  }

  addMarker(latitude: number, longitude: number) {
    const point = new Point({
      longitude: longitude,
      latitude: latitude
    });

    const marker = new Graphic({
      geometry: point,
      symbol: new SimpleMarkerSymbol({
        color: 'blue',
        size: '12px',
        outline: { color: 'white', width: 2 }
      })
    });

    this.view.graphics.removeAll();
    this.view.graphics.add(marker);
  }

  changeBasemap(event: Event) {
    const selectElement = event.target as HTMLSelectElement;
    const basemap = selectElement.value;
    if (this.map) {
      this.map.basemap = Basemap.fromId(basemap); // This converts a string ID to a Basemap instance.
    }
  }

  ngOnDestroy() {
    if (this.view) {
      this.view.destroy();
    }
  }

  private loadPendingPoints(): void {
    this.pendingPoints = this.pendingPoints.filter(pendingPoint => {
      const point = new Point({
        longitude: pendingPoint.longitude,
        latitude: pendingPoint.latitude
      });

      if (this.isPointInView(point)) {
        this.createAndAddGraphic(point);
        return false;
      }

      return true;
    });
  }

  private isPointInView(point: Point): boolean {
    return this.view.extent.contains(point);
  }

  private createAndAddGraphic(point: Point): void {
    // Define a symbol
    const simpleMarkerSymbol = {
      type: 'simple-marker',
      style: 'triangle',
      color: [0, 128, 0], // green
      outline: {
        color: [0, 0, 0], // black
        width: 1
      }
    };

    // Define a picture marker symbol
    const pictureMarkerSymbol = new PictureMarkerSymbol({
      url: "./assets/img/arbol2.png",  // URL de la imagen PNG
      width: "24px",  // Ancho del ícono
      height: "24px"  // Altura del ícono
    });

    // Create a graphic
    const pointGraphic = new Graphic({
      geometry: point,
      symbol: simpleMarkerSymbol
    });

    // Add the graphic to the layer
    this.graphicsLayer.add(pointGraphic);
  }

}

---------------------------------------
file-upload.component.html
************
<section>
  <form [formGroup]="fileForm" >
    <input type="file" (change)="onFileChange($event)" formControlName="file" />
    <app-btn *ngIf="selectedFile" type="submit" color="primary" (click)="uploadFile()" >Preparar archivo</app-btn>
  </form>
</section>

---------------------------------------
file-upload.component.scss
************

---------------------------------------
file-upload.component.ts
************
import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { FormGroup, FormBuilder, FormControl } from '@angular/forms';

@Component({
  selector: 'app-file-upload',
  templateUrl: './file-upload.component.html',
  styleUrls: ['./file-upload.component.scss']
})
export class FileUploadComponent   {
  fileForm: FormGroup;
  selectedFile: File = null;
  @Output() fileUploaded= new EventEmitter();

  constructor(private formbuilder:FormBuilder) {
    this.fileForm = this.formbuilder.group({
      file: [null]
    });
  }

  onFileChange(event: any) {
    if (event.target.files.length > 0) {
     this.selectedFile = event.target.files[0];
    }
  }

  uploadFile() {
    this.fileUploaded.emit(this.selectedFile);
  }
}

---------------------------------------
modal.component.html
************
<!-- <app-btn  typeBtn="submit"
color="green"
(click)="toggleModal()"> {{ botonModal }}</app-btn> -->

<div *ngIf="showModal" class="overflow-x-hidden overflow-y-auto fixed inset-0  outline-none focus:outline-none justify-center items-center flex w-7/10 mx-auto">
  <div class="relative w-auto my-6 mx-auto max-w-6xl">
    <!--content-->
    <div class="border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none">
      <!--header-->
      <div class="flex items-start justify-between p-5 border-b border-solid border-slate-200 rounded-t">
        <h3 class="text-3xl font-semibold">
          {{titulo}}
        </h3>
        <button class="p-1 ml-auto bg-transparent border-0 text-black  float-right opacity-3 text-3xl leading-none font-semibold outline-none focus:outline-none" (click)="toggleModal()">
          <span class="bg-transparent text-black opacity-3 h-6 w-6 text-2xl block outline-none focus:outline-none">
            x
          </span>
        </button>
      </div>
      <!--body-->
      <div class="relative p-6 flex-auto">
        <ng-content></ng-content>
      </div>
      <!--footer-->
      <div class="flex items-center justify-end p-6 border-t border-solid border-slate-200 rounded-b">
        <button class="text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button" (click)="toggleModal()">
          Cerrar
        </button>
      </div>
    </div>
  </div>
</div>
<div *ngIf="showModal" class="opacity-25 fixed inset-0  bg-black"></div>

---------------------------------------
modal.component.scss
************

---------------------------------------
modal.component.ts
************
import { Component, EventEmitter, Input, Output } from '@angular/core';

@Component({
  selector: 'app-modal',
  templateUrl: './modal.component.html',
  styleUrls: ['./modal.component.scss']
})
export class ModalComponent {

  showModal: boolean = false;

  @Input() set ShowModal(data)
  {
     this.showModal = data;
  }

  @Input() titulo: string;
  @Input() botonModal: string;
  @Output() cerrarModalEvent= new EventEmitter();

  toggleModal(){
    this.showModal = !this.showModal;
    this.cerrarModalEvent.emit();
  }
}

---------------------------------------
shared.module.ts
************
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ButtonComponent } from './components/button/button.component';
import { CustomIconsComponent } from './components/custom-icons/custom-icons.component';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { ModalComponent } from './components/modal/modal.component';
import { TableModule } from 'primeng/table';
import { PaginatorModule } from 'primeng/paginator';
import { CoordenadaComponent } from '../modules/sharedcomponent/coordenada/coordenada.component';
import { ReactiveFormsModule } from '@angular/forms';
import { RegistroFotograficoComponent } from '../modules/sharedcomponent/registrofotografico/registrofotografico.component';
import { NumberInputDirective } from '../core/directives/number-input.directive';
import { ImageCropperModule } from 'ngx-image-cropper';
import { EsriMapComponent } from './components/esri-map/esri-map.component';
import { LeafletModule } from '@asymmetrik/ngx-leaflet';
import { EsriMapSelectorComponent } from './components/esri-map-selector/esri-map-selector.component';
import { FileUploadComponent } from './components/file-upload/file-upload.component';
import { NgSelectModule } from '@ng-select/ng-select';




@NgModule({
  declarations: [ButtonComponent,  CustomIconsComponent, ModalComponent, CoordenadaComponent,
    RegistroFotograficoComponent,NumberInputDirective,  EsriMapComponent,  EsriMapSelectorComponent, FileUploadComponent ],
  imports: [CommonModule, FontAwesomeModule, TableModule, PaginatorModule, ReactiveFormsModule, LeafletModule ,ImageCropperModule, NgSelectModule],
  exports:[ButtonComponent,  CustomIconsComponent, CoordenadaComponent, RegistroFotograficoComponent, ModalComponent, TableModule,
    PaginatorModule, NumberInputDirective, EsriMapComponent,  EsriMapSelectorComponent, FileUploadComponent, NgSelectModule]
})
export class SharedModule { }

---------------------------------------
environment.prod.ts
************
export const environment = {
  production: false,
  API_URL: 'https://api2.transfors.co:5001',
  templateColor: 'dark'
};

---------------------------------------
environment.ts
************
import { TemplateColor } from './../app/core/models/template-color';

export const environment = {
  production: false,
  API_URL: 'https://localhost:44312',
  templateColor: 'dark'
};


---------------------------------------
index.html
************
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>BasicSpaFramework</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.4/flowbite.min.css" rel="stylesheet" />
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="stylesheet" href="https://js.arcgis.com/4.8/esri/css/main.css">
</head>
<body>
  <app-root></app-root>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.6.4/flowbite.min.js"></script>
</body>
</html>

---------------------------------------
main.ts
************
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment.prod';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));

---------------------------------------
styles.scss
************
/* You can add global styles to this file, and also import other style files */
@tailwind base;
@tailwind components;
@tailwind utilities;
@import '@angular/cdk/overlay-prebuilt.css';

@import "~@ng-select/ng-select/themes/default.theme.css";

.required
{
  border: 1px solid red !important;
}


